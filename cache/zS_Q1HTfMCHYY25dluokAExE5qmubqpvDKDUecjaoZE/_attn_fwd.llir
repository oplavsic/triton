; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !6 float @llvm.amdgcn.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_attn_fwd(ptr addrspace(1) inreg nocapture readonly %0, ptr addrspace(1) inreg nocapture readonly %1, ptr addrspace(1) inreg nocapture readonly %2, float inreg %3, ptr addrspace(1) inreg nocapture writeonly %4, ptr addrspace(1) inreg nocapture writeonly %5, i32 inreg %6, i32 inreg %7, i32 inreg %8, i32 inreg %9, i32 inreg %10, i32 inreg %11, i32 inreg %12, i32 inreg %13, i32 inreg %14, i32 inreg %15, i32 inreg %16, i32 inreg %17, i32 inreg %18, i32 inreg %19) local_unnamed_addr #1 !dbg !9 {
  %21 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !10
  %.frozen = freeze i32 %18, !dbg !11
  %22 = sdiv i32 %21, %.frozen, !dbg !11
  %23 = sext i32 %22 to i64, !dbg !12
  %24 = sext i32 %6 to i64, !dbg !13
  %25 = mul nsw i64 %23, %24, !dbg !13
  %26 = mul i32 %22, %.frozen, !dbg !14
  %.decomposed = sub i32 %21, %26, !dbg !14
  %27 = sext i32 %.decomposed to i64, !dbg !15
  %28 = sext i32 %7 to i64, !dbg !16
  %29 = mul nsw i64 %27, %28, !dbg !16
  %30 = add nsw i64 %29, %25, !dbg !17
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !18
  %32 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !19
  %33 = shl i32 %32, 7, !dbg !20
  %34 = sext i32 %33 to i64, !dbg !21
  %35 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !22
  %36 = and i32 %35, 63, !dbg !22
  %37 = and i32 %35, 32, !dbg !22
  %38 = lshr exact i32 %37, 3, !dbg !22
  %39 = lshr i32 %35, 3, !dbg !22
  %40 = and i32 %39, 27, !dbg !22
  %41 = or disjoint i32 %40, %38, !dbg !22
  %42 = or disjoint i32 %41, 32, !dbg !22
  %43 = or disjoint i32 %41, 64, !dbg !22
  %44 = or disjoint i32 %41, 96, !dbg !22
  %45 = zext nneg i32 %41 to i64, !dbg !23
  %46 = zext nneg i32 %42 to i64, !dbg !23
  %47 = zext nneg i32 %43 to i64, !dbg !23
  %48 = zext nneg i32 %44 to i64, !dbg !23
  %49 = sext i32 %8 to i64, !dbg !21
  %50 = mul nsw i64 %49, %34, !dbg !23
  %51 = mul nsw i64 %49, %45, !dbg !23
  %52 = mul nsw i64 %49, %46, !dbg !23
  %53 = mul nsw i64 %49, %47, !dbg !23
  %54 = mul nsw i64 %49, %48, !dbg !23
  %55 = shl i32 %35, 3, !dbg !24
  %56 = and i32 %55, 56, !dbg !24
  %57 = zext nneg i32 %56 to i64, !dbg !23
  %58 = getelementptr half, ptr addrspace(1) %31, i64 %50, !dbg !23
  %59 = getelementptr half, ptr addrspace(1) %58, i64 %51, !dbg !23
  %60 = getelementptr half, ptr addrspace(1) %59, i64 %57, !dbg !23
  %61 = getelementptr half, ptr addrspace(1) %58, i64 %52, !dbg !23
  %62 = getelementptr half, ptr addrspace(1) %61, i64 %57, !dbg !23
  %63 = getelementptr half, ptr addrspace(1) %58, i64 %53, !dbg !23
  %64 = getelementptr half, ptr addrspace(1) %63, i64 %57, !dbg !23
  %65 = getelementptr half, ptr addrspace(1) %58, i64 %54, !dbg !23
  %66 = getelementptr half, ptr addrspace(1) %65, i64 %57, !dbg !23
  %unmaskedload = load <8 x half>, ptr addrspace(1) %60, align 16, !dbg !23
  %unmaskedload3 = load <8 x half>, ptr addrspace(1) %62, align 16, !dbg !23
  %unmaskedload4 = load <8 x half>, ptr addrspace(1) %64, align 16, !dbg !23
  %unmaskedload5 = load <8 x half>, ptr addrspace(1) %66, align 16, !dbg !23
  %67 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !25
  %68 = sext i32 %14 to i64, !dbg !26
  %69 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !27
  %70 = sext i32 %11 to i64, !dbg !28
  %71 = and i32 %35, 31, !dbg !22
  %72 = lshr i32 %35, 1, !dbg !22
  %73 = and i32 %72, 32, !dbg !22
  %74 = and i32 %72, 96, !dbg !22
  %75 = or disjoint i32 %74, %71, !dbg !22
  %76 = or disjoint i32 %75, %33, !dbg !29
  %77 = or disjoint i32 %38, 8, !dbg !24
  %78 = or disjoint i32 %38, 16, !dbg !24
  %79 = or disjoint i32 %38, 24, !dbg !24
  %80 = or disjoint i32 %38, 32, !dbg !24
  %81 = or disjoint i32 %38, 40, !dbg !24
  %82 = or disjoint i32 %38, 48, !dbg !24
  %83 = or disjoint i32 %38, 56, !dbg !24
  %84 = fmul float %3, 0x3FF7154760000000, !dbg !30
  %85 = and i32 %72, 4, !dbg !23
  %86 = or disjoint i32 %56, %85, !dbg !23
  %87 = and i32 %72, 8, !dbg !23
  %88 = lshr exact i32 %37, 1, !dbg !23
  %89 = or disjoint i32 %88, %87, !dbg !23
  %90 = or disjoint i32 %89, %73, !dbg !23
  %91 = xor i32 %90, %86, !dbg !23
  %92 = shl nuw nsw i32 %41, 6, !dbg !23
  %93 = getelementptr half, ptr addrspace(3) @global_smem, i32 %91, !dbg !23
  %94 = getelementptr half, ptr addrspace(3) %93, i32 %92, !dbg !23
  %95 = shufflevector <8 x half> %unmaskedload, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %95, ptr addrspace(3) %94, align 8, !dbg !23
  %96 = or disjoint i32 %56, 4, !dbg !23
  %97 = or disjoint i32 %89, %85, !dbg !23
  %98 = or disjoint i32 %97, %73, !dbg !23
  %99 = xor i32 %98, %96, !dbg !23
  %100 = getelementptr half, ptr addrspace(3) @global_smem, i32 %99, !dbg !23
  %101 = getelementptr half, ptr addrspace(3) %100, i32 %92, !dbg !23
  %102 = shufflevector <8 x half> %unmaskedload, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %102, ptr addrspace(3) %101, align 8, !dbg !23
  %103 = or disjoint i32 %92, 2048, !dbg !23
  %104 = getelementptr half, ptr addrspace(3) %93, i32 %103, !dbg !23
  %105 = shufflevector <8 x half> %unmaskedload3, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %105, ptr addrspace(3) %104, align 8, !dbg !23
  %106 = getelementptr half, ptr addrspace(3) %100, i32 %103, !dbg !23
  %107 = shufflevector <8 x half> %unmaskedload3, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %107, ptr addrspace(3) %106, align 8, !dbg !23
  %108 = or disjoint i32 %92, 4096, !dbg !23
  %109 = getelementptr half, ptr addrspace(3) %93, i32 %108, !dbg !23
  %110 = shufflevector <8 x half> %unmaskedload4, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %110, ptr addrspace(3) %109, align 8, !dbg !23
  %111 = getelementptr half, ptr addrspace(3) %100, i32 %108, !dbg !23
  %112 = shufflevector <8 x half> %unmaskedload4, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %112, ptr addrspace(3) %111, align 8, !dbg !23
  %113 = or disjoint i32 %92, 6144, !dbg !23
  %114 = getelementptr half, ptr addrspace(3) %93, i32 %113, !dbg !23
  %115 = shufflevector <8 x half> %unmaskedload5, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %115, ptr addrspace(3) %114, align 8, !dbg !23
  %116 = getelementptr half, ptr addrspace(3) %100, i32 %113, !dbg !23
  %117 = shufflevector <8 x half> %unmaskedload5, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %117, ptr addrspace(3) %116, align 8, !dbg !23
  fence syncscope("workgroup") release, !dbg !23
  tail call void @llvm.amdgcn.s.barrier(), !dbg !23
  fence syncscope("workgroup") acquire, !dbg !23
  %118 = icmp ugt i32 %36, 31, !dbg !23
  %119 = zext i1 %118 to i32, !dbg !23
  %120 = and i32 %35, 15, !dbg !23
  %121 = xor i32 %120, %119, !dbg !23
  %122 = shl nuw nsw i32 %121, 2, !dbg !23
  %123 = shl nuw nsw i32 %75, 6, !dbg !23
  %124 = or disjoint i32 %122, %123, !dbg !23
  %125 = or disjoint i32 %119, 2, !dbg !23
  %126 = xor i32 %125, %120, !dbg !23
  %127 = shl nuw nsw i32 %126, 2, !dbg !23
  %128 = or disjoint i32 %127, %123, !dbg !23
  %129 = or disjoint i32 %119, 4, !dbg !23
  %130 = xor i32 %129, %120, !dbg !23
  %131 = shl nuw nsw i32 %130, 2, !dbg !23
  %132 = or disjoint i32 %131, %123, !dbg !23
  %133 = or disjoint i32 %119, 6, !dbg !23
  %134 = xor i32 %133, %120, !dbg !23
  %135 = shl nuw nsw i32 %134, 2, !dbg !23
  %136 = or disjoint i32 %135, %123, !dbg !23
  %137 = or disjoint i32 %119, 8, !dbg !23
  %138 = xor i32 %137, %120, !dbg !23
  %139 = shl nuw nsw i32 %138, 2, !dbg !23
  %140 = or disjoint i32 %139, %123, !dbg !23
  %141 = or disjoint i32 %119, 10, !dbg !23
  %142 = xor i32 %141, %120, !dbg !23
  %143 = shl nuw nsw i32 %142, 2, !dbg !23
  %144 = or disjoint i32 %143, %123, !dbg !23
  %145 = or disjoint i32 %119, 12, !dbg !23
  %146 = xor i32 %145, %120, !dbg !23
  %147 = shl nuw nsw i32 %146, 2, !dbg !23
  %148 = or disjoint i32 %147, %123, !dbg !23
  %149 = or disjoint i32 %119, 14, !dbg !23
  %150 = xor i32 %149, %120, !dbg !23
  %151 = shl nuw nsw i32 %150, 2, !dbg !23
  %152 = or disjoint i32 %151, %123, !dbg !23
  %153 = getelementptr half, ptr addrspace(3) @global_smem, i32 %124, !dbg !23
  %154 = load <4 x half>, ptr addrspace(3) %153, align 8, !dbg !23
  %155 = getelementptr half, ptr addrspace(3) @global_smem, i32 %128, !dbg !23
  %156 = load <4 x half>, ptr addrspace(3) %155, align 8, !dbg !23
  %157 = getelementptr half, ptr addrspace(3) @global_smem, i32 %132, !dbg !23
  %158 = load <4 x half>, ptr addrspace(3) %157, align 8, !dbg !23
  %159 = getelementptr half, ptr addrspace(3) @global_smem, i32 %136, !dbg !23
  %160 = load <4 x half>, ptr addrspace(3) %159, align 8, !dbg !23
  %161 = getelementptr half, ptr addrspace(3) @global_smem, i32 %140, !dbg !23
  %162 = load <4 x half>, ptr addrspace(3) %161, align 8, !dbg !23
  %163 = getelementptr half, ptr addrspace(3) @global_smem, i32 %144, !dbg !23
  %164 = load <4 x half>, ptr addrspace(3) %163, align 8, !dbg !23
  %165 = getelementptr half, ptr addrspace(3) @global_smem, i32 %148, !dbg !23
  %166 = load <4 x half>, ptr addrspace(3) %165, align 8, !dbg !23
  %167 = getelementptr half, ptr addrspace(3) @global_smem, i32 %152, !dbg !23
  %168 = load <4 x half>, ptr addrspace(3) %167, align 8, !dbg !23
  %169 = icmp sgt i32 %33, 0, !dbg !31
  br i1 %169, label %.lr.ph, label %._crit_edge, !dbg !31

.lr.ph:                                           ; preds = %20
  %170 = mul nsw i64 %70, %45
  %171 = mul nsw i64 %70, %46
  %172 = mul nsw i64 %68, %45
  %173 = mul nsw i64 %68, %46
  %174 = shl nuw nsw i32 %71, 6
  %175 = or disjoint i32 %122, %174
  %176 = or disjoint i32 %127, %174
  %177 = or disjoint i32 %131, %174
  %178 = or disjoint i32 %135, %174
  %179 = or disjoint i32 %139, %174
  %180 = or disjoint i32 %143, %174
  %181 = or disjoint i32 %147, %174
  %182 = or disjoint i32 %151, %174
  %183 = or disjoint i32 %174, 2048
  %184 = or disjoint i32 %122, %183
  %185 = or disjoint i32 %127, %183
  %186 = or disjoint i32 %131, %183
  %187 = or disjoint i32 %135, %183
  %188 = or disjoint i32 %139, %183
  %189 = or disjoint i32 %143, %183
  %190 = or disjoint i32 %147, %183
  %191 = or disjoint i32 %151, %183
  %192 = getelementptr half, ptr addrspace(3) @global_smem, i32 %175
  %193 = getelementptr half, ptr addrspace(3) @global_smem, i32 %176
  %194 = getelementptr half, ptr addrspace(3) @global_smem, i32 %177
  %195 = getelementptr half, ptr addrspace(3) @global_smem, i32 %178
  %196 = getelementptr half, ptr addrspace(3) @global_smem, i32 %179
  %197 = getelementptr half, ptr addrspace(3) @global_smem, i32 %180
  %198 = getelementptr half, ptr addrspace(3) @global_smem, i32 %181
  %199 = getelementptr half, ptr addrspace(3) @global_smem, i32 %182
  %200 = getelementptr half, ptr addrspace(3) @global_smem, i32 %184
  %201 = getelementptr half, ptr addrspace(3) @global_smem, i32 %185
  %202 = getelementptr half, ptr addrspace(3) @global_smem, i32 %186
  %203 = getelementptr half, ptr addrspace(3) @global_smem, i32 %187
  %204 = getelementptr half, ptr addrspace(3) @global_smem, i32 %188
  %205 = getelementptr half, ptr addrspace(3) @global_smem, i32 %189
  %206 = getelementptr half, ptr addrspace(3) @global_smem, i32 %190
  %207 = getelementptr half, ptr addrspace(3) @global_smem, i32 %191
  %208 = shl i32 %35, 2
  %209 = xor i32 %208, 128
  %210 = or disjoint i32 %92, %56
  %211 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %210
  %212 = or disjoint i32 %103, %56
  %213 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %212
  %214 = shl nuw nsw i32 %36, 3
  %215 = and i32 %214, 256
  %216 = or disjoint i32 %215, %71
  %217 = or disjoint i32 %216, 64
  %218 = or disjoint i32 %216, 128
  %219 = or disjoint i32 %216, 192
  %220 = or disjoint i32 %216, 512
  %221 = or disjoint i32 %216, 576
  %222 = or disjoint i32 %216, 640
  %223 = or disjoint i32 %216, 704
  %224 = or disjoint i32 %216, 1024
  %225 = or disjoint i32 %216, 1088
  %226 = or disjoint i32 %216, 1152
  %227 = or disjoint i32 %216, 1216
  %228 = or disjoint i32 %216, 1536
  %229 = or disjoint i32 %216, 1600
  %230 = or disjoint i32 %216, 1664
  %231 = or disjoint i32 %216, 1728
  %232 = or disjoint i32 %216, 2048
  %233 = or disjoint i32 %216, 2112
  %234 = or disjoint i32 %216, 2176
  %235 = or disjoint i32 %216, 2240
  %236 = or disjoint i32 %216, 2560
  %237 = or disjoint i32 %216, 2624
  %238 = or disjoint i32 %216, 2688
  %239 = or disjoint i32 %216, 2752
  %240 = or disjoint i32 %216, 3072
  %241 = or disjoint i32 %216, 3136
  %242 = or disjoint i32 %216, 3200
  %243 = or disjoint i32 %216, 3264
  %244 = or disjoint i32 %216, 3584
  %245 = or disjoint i32 %216, 3648
  %246 = or disjoint i32 %216, 3712
  %247 = or disjoint i32 %216, 3776
  %248 = or disjoint i32 %216, 32
  %249 = or disjoint i32 %216, 96
  %250 = or disjoint i32 %216, 160
  %251 = or disjoint i32 %216, 224
  %252 = or disjoint i32 %216, 544
  %253 = or disjoint i32 %216, 608
  %254 = or disjoint i32 %216, 672
  %255 = or disjoint i32 %216, 736
  %256 = or disjoint i32 %216, 1056
  %257 = or disjoint i32 %216, 1120
  %258 = or disjoint i32 %216, 1184
  %259 = or disjoint i32 %216, 1248
  %260 = or disjoint i32 %216, 1568
  %261 = or disjoint i32 %216, 1632
  %262 = or disjoint i32 %216, 1696
  %263 = or disjoint i32 %216, 1760
  %264 = or disjoint i32 %216, 2080
  %265 = or disjoint i32 %216, 2144
  %266 = or disjoint i32 %216, 2208
  %267 = or disjoint i32 %216, 2272
  %268 = or disjoint i32 %216, 2592
  %269 = or disjoint i32 %216, 2656
  %270 = or disjoint i32 %216, 2720
  %271 = or disjoint i32 %216, 2784
  %272 = or disjoint i32 %216, 3104
  %273 = or disjoint i32 %216, 3168
  %274 = or disjoint i32 %216, 3232
  %275 = or disjoint i32 %216, 3296
  %276 = or disjoint i32 %216, 3616
  %277 = or disjoint i32 %216, 3680
  %278 = or disjoint i32 %216, 3744
  %279 = or disjoint i32 %216, 3808
  %280 = getelementptr half, ptr addrspace(3) @global_smem, i32 %216
  %281 = getelementptr half, ptr addrspace(3) @global_smem, i32 %217
  %282 = getelementptr half, ptr addrspace(3) @global_smem, i32 %218
  %283 = getelementptr half, ptr addrspace(3) @global_smem, i32 %219
  %284 = getelementptr half, ptr addrspace(3) @global_smem, i32 %220
  %285 = getelementptr half, ptr addrspace(3) @global_smem, i32 %221
  %286 = getelementptr half, ptr addrspace(3) @global_smem, i32 %222
  %287 = getelementptr half, ptr addrspace(3) @global_smem, i32 %223
  %288 = getelementptr half, ptr addrspace(3) @global_smem, i32 %224
  %289 = getelementptr half, ptr addrspace(3) @global_smem, i32 %225
  %290 = getelementptr half, ptr addrspace(3) @global_smem, i32 %226
  %291 = getelementptr half, ptr addrspace(3) @global_smem, i32 %227
  %292 = getelementptr half, ptr addrspace(3) @global_smem, i32 %228
  %293 = getelementptr half, ptr addrspace(3) @global_smem, i32 %229
  %294 = getelementptr half, ptr addrspace(3) @global_smem, i32 %230
  %295 = getelementptr half, ptr addrspace(3) @global_smem, i32 %231
  %296 = getelementptr half, ptr addrspace(3) @global_smem, i32 %232
  %297 = getelementptr half, ptr addrspace(3) @global_smem, i32 %233
  %298 = getelementptr half, ptr addrspace(3) @global_smem, i32 %234
  %299 = getelementptr half, ptr addrspace(3) @global_smem, i32 %235
  %300 = getelementptr half, ptr addrspace(3) @global_smem, i32 %236
  %301 = getelementptr half, ptr addrspace(3) @global_smem, i32 %237
  %302 = getelementptr half, ptr addrspace(3) @global_smem, i32 %238
  %303 = getelementptr half, ptr addrspace(3) @global_smem, i32 %239
  %304 = getelementptr half, ptr addrspace(3) @global_smem, i32 %240
  %305 = getelementptr half, ptr addrspace(3) @global_smem, i32 %241
  %306 = getelementptr half, ptr addrspace(3) @global_smem, i32 %242
  %307 = getelementptr half, ptr addrspace(3) @global_smem, i32 %243
  %308 = getelementptr half, ptr addrspace(3) @global_smem, i32 %244
  %309 = getelementptr half, ptr addrspace(3) @global_smem, i32 %245
  %310 = getelementptr half, ptr addrspace(3) @global_smem, i32 %246
  %311 = getelementptr half, ptr addrspace(3) @global_smem, i32 %247
  %312 = getelementptr half, ptr addrspace(3) @global_smem, i32 %248
  %313 = getelementptr half, ptr addrspace(3) @global_smem, i32 %249
  %314 = getelementptr half, ptr addrspace(3) @global_smem, i32 %250
  %315 = getelementptr half, ptr addrspace(3) @global_smem, i32 %251
  %316 = getelementptr half, ptr addrspace(3) @global_smem, i32 %252
  %317 = getelementptr half, ptr addrspace(3) @global_smem, i32 %253
  %318 = getelementptr half, ptr addrspace(3) @global_smem, i32 %254
  %319 = getelementptr half, ptr addrspace(3) @global_smem, i32 %255
  %320 = getelementptr half, ptr addrspace(3) @global_smem, i32 %256
  %321 = getelementptr half, ptr addrspace(3) @global_smem, i32 %257
  %322 = getelementptr half, ptr addrspace(3) @global_smem, i32 %258
  %323 = getelementptr half, ptr addrspace(3) @global_smem, i32 %259
  %324 = getelementptr half, ptr addrspace(3) @global_smem, i32 %260
  %325 = getelementptr half, ptr addrspace(3) @global_smem, i32 %261
  %326 = getelementptr half, ptr addrspace(3) @global_smem, i32 %262
  %327 = getelementptr half, ptr addrspace(3) @global_smem, i32 %263
  %328 = getelementptr half, ptr addrspace(3) @global_smem, i32 %264
  %329 = getelementptr half, ptr addrspace(3) @global_smem, i32 %265
  %330 = getelementptr half, ptr addrspace(3) @global_smem, i32 %266
  %331 = getelementptr half, ptr addrspace(3) @global_smem, i32 %267
  %332 = getelementptr half, ptr addrspace(3) @global_smem, i32 %268
  %333 = getelementptr half, ptr addrspace(3) @global_smem, i32 %269
  %334 = getelementptr half, ptr addrspace(3) @global_smem, i32 %270
  %335 = getelementptr half, ptr addrspace(3) @global_smem, i32 %271
  %336 = getelementptr half, ptr addrspace(3) @global_smem, i32 %272
  %337 = getelementptr half, ptr addrspace(3) @global_smem, i32 %273
  %338 = getelementptr half, ptr addrspace(3) @global_smem, i32 %274
  %339 = getelementptr half, ptr addrspace(3) @global_smem, i32 %275
  %340 = getelementptr half, ptr addrspace(3) @global_smem, i32 %276
  %341 = getelementptr half, ptr addrspace(3) @global_smem, i32 %277
  %342 = getelementptr half, ptr addrspace(3) @global_smem, i32 %278
  %343 = getelementptr half, ptr addrspace(3) @global_smem, i32 %279
  br label %344, !dbg !31

344:                                              ; preds = %.lr.ph, %344
  %345 = phi i64 [ 0, %.lr.ph ], [ %884, %344 ]
  %346 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %480, %344 ]
  %347 = phi float [ 1.000000e+00, %.lr.ph ], [ %615, %344 ]
  %348 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %886, %344 ]
  %349 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %887, %344 ]
  %350 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %888, %344 ]
  %351 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %889, %344 ]
  %352 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %890, %344 ]
  %353 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %891, %344 ]
  %354 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %892, %344 ]
  %355 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %893, %344 ]
  %356 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %894, %344 ]
  %357 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %895, %344 ]
  %358 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %896, %344 ]
  %359 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %897, %344 ]
  %360 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %898, %344 ]
  %361 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %899, %344 ]
  %362 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %900, %344 ]
  %363 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %901, %344 ]
  %364 = mul i64 %345, %70, !dbg !34
  %365 = getelementptr half, ptr addrspace(1) %69, i64 %364, !dbg !34
  %366 = getelementptr half, ptr addrspace(1) %365, i64 %170, !dbg !34
  %367 = getelementptr half, ptr addrspace(1) %366, i64 %57, !dbg !34
  %368 = getelementptr half, ptr addrspace(1) %365, i64 %171, !dbg !34
  %369 = getelementptr half, ptr addrspace(1) %368, i64 %57, !dbg !34
  %unmaskedload41 = load <8 x half>, ptr addrspace(1) %367, align 16, !dbg !34
  %unmaskedload42 = load <8 x half>, ptr addrspace(1) %369, align 16, !dbg !34
  %370 = mul i64 %345, %68, !dbg !35
  %371 = getelementptr half, ptr addrspace(1) %67, i64 %370, !dbg !35
  %372 = getelementptr half, ptr addrspace(1) %371, i64 %172, !dbg !35
  %373 = getelementptr half, ptr addrspace(1) %372, i64 %57, !dbg !35
  %374 = getelementptr half, ptr addrspace(1) %371, i64 %173, !dbg !35
  %375 = getelementptr half, ptr addrspace(1) %374, i64 %57, !dbg !35
  %unmaskedload43 = load <8 x half>, ptr addrspace(1) %373, align 16, !dbg !35
  %unmaskedload44 = load <8 x half>, ptr addrspace(1) %375, align 16, !dbg !35
  fence syncscope("workgroup") release, !dbg !34
  tail call void @llvm.amdgcn.s.barrier(), !dbg !34
  fence syncscope("workgroup") acquire, !dbg !34
  %376 = shufflevector <8 x half> %unmaskedload41, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !34
  store <4 x half> %376, ptr addrspace(3) %94, align 8, !dbg !34
  %377 = shufflevector <8 x half> %unmaskedload41, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !34
  store <4 x half> %377, ptr addrspace(3) %101, align 8, !dbg !34
  %378 = shufflevector <8 x half> %unmaskedload42, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !34
  store <4 x half> %378, ptr addrspace(3) %104, align 8, !dbg !34
  %379 = shufflevector <8 x half> %unmaskedload42, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !34
  store <4 x half> %379, ptr addrspace(3) %106, align 8, !dbg !34
  fence syncscope("workgroup") release, !dbg !34
  tail call void @llvm.amdgcn.s.barrier(), !dbg !34
  fence syncscope("workgroup") acquire, !dbg !34
  %380 = load <4 x half>, ptr addrspace(3) %192, align 8, !dbg !34
  %381 = load <4 x half>, ptr addrspace(3) %193, align 8, !dbg !34
  %382 = load <4 x half>, ptr addrspace(3) %194, align 8, !dbg !34
  %383 = load <4 x half>, ptr addrspace(3) %195, align 8, !dbg !34
  %384 = load <4 x half>, ptr addrspace(3) %196, align 8, !dbg !34
  %385 = load <4 x half>, ptr addrspace(3) %197, align 8, !dbg !34
  %386 = load <4 x half>, ptr addrspace(3) %198, align 8, !dbg !34
  %387 = load <4 x half>, ptr addrspace(3) %199, align 8, !dbg !34
  %388 = load <4 x half>, ptr addrspace(3) %200, align 8, !dbg !34
  %389 = load <4 x half>, ptr addrspace(3) %201, align 8, !dbg !34
  %390 = load <4 x half>, ptr addrspace(3) %202, align 8, !dbg !34
  %391 = load <4 x half>, ptr addrspace(3) %203, align 8, !dbg !34
  %392 = load <4 x half>, ptr addrspace(3) %204, align 8, !dbg !34
  %393 = load <4 x half>, ptr addrspace(3) %205, align 8, !dbg !34
  %394 = load <4 x half>, ptr addrspace(3) %206, align 8, !dbg !34
  %395 = load <4 x half>, ptr addrspace(3) %207, align 8, !dbg !34
  %396 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %380, <4 x half> %154, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !36
  %397 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %381, <4 x half> %156, <16 x float> %396, i32 0, i32 0, i32 0), !dbg !36
  %398 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %382, <4 x half> %158, <16 x float> %397, i32 0, i32 0, i32 0), !dbg !36
  %399 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %383, <4 x half> %160, <16 x float> %398, i32 0, i32 0, i32 0), !dbg !36
  %400 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %384, <4 x half> %162, <16 x float> %399, i32 0, i32 0, i32 0), !dbg !36
  %401 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %385, <4 x half> %164, <16 x float> %400, i32 0, i32 0, i32 0), !dbg !36
  %402 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %386, <4 x half> %166, <16 x float> %401, i32 0, i32 0, i32 0), !dbg !36
  %403 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %387, <4 x half> %168, <16 x float> %402, i32 0, i32 0, i32 0), !dbg !36
  %404 = extractelement <16 x float> %403, i64 0, !dbg !36
  %405 = extractelement <16 x float> %403, i64 1, !dbg !36
  %406 = extractelement <16 x float> %403, i64 2, !dbg !36
  %407 = extractelement <16 x float> %403, i64 3, !dbg !36
  %408 = extractelement <16 x float> %403, i64 4, !dbg !36
  %409 = extractelement <16 x float> %403, i64 5, !dbg !36
  %410 = extractelement <16 x float> %403, i64 6, !dbg !36
  %411 = extractelement <16 x float> %403, i64 7, !dbg !36
  %412 = extractelement <16 x float> %403, i64 8, !dbg !36
  %413 = extractelement <16 x float> %403, i64 9, !dbg !36
  %414 = extractelement <16 x float> %403, i64 10, !dbg !36
  %415 = extractelement <16 x float> %403, i64 11, !dbg !36
  %416 = extractelement <16 x float> %403, i64 12, !dbg !36
  %417 = extractelement <16 x float> %403, i64 13, !dbg !36
  %418 = extractelement <16 x float> %403, i64 14, !dbg !36
  %419 = extractelement <16 x float> %403, i64 15, !dbg !36
  %420 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %388, <4 x half> %154, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !36
  %421 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %389, <4 x half> %156, <16 x float> %420, i32 0, i32 0, i32 0), !dbg !36
  %422 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %390, <4 x half> %158, <16 x float> %421, i32 0, i32 0, i32 0), !dbg !36
  %423 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %391, <4 x half> %160, <16 x float> %422, i32 0, i32 0, i32 0), !dbg !36
  %424 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %392, <4 x half> %162, <16 x float> %423, i32 0, i32 0, i32 0), !dbg !36
  %425 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %393, <4 x half> %164, <16 x float> %424, i32 0, i32 0, i32 0), !dbg !36
  %426 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %394, <4 x half> %166, <16 x float> %425, i32 0, i32 0, i32 0), !dbg !36
  %427 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %395, <4 x half> %168, <16 x float> %426, i32 0, i32 0, i32 0), !dbg !36
  %428 = extractelement <16 x float> %427, i64 0, !dbg !36
  %429 = extractelement <16 x float> %427, i64 1, !dbg !36
  %430 = extractelement <16 x float> %427, i64 2, !dbg !36
  %431 = extractelement <16 x float> %427, i64 3, !dbg !36
  %432 = extractelement <16 x float> %427, i64 4, !dbg !36
  %433 = extractelement <16 x float> %427, i64 5, !dbg !36
  %434 = extractelement <16 x float> %427, i64 6, !dbg !36
  %435 = extractelement <16 x float> %427, i64 7, !dbg !36
  %436 = extractelement <16 x float> %427, i64 8, !dbg !36
  %437 = extractelement <16 x float> %427, i64 9, !dbg !36
  %438 = extractelement <16 x float> %427, i64 10, !dbg !36
  %439 = extractelement <16 x float> %427, i64 11, !dbg !36
  %440 = extractelement <16 x float> %427, i64 12, !dbg !36
  %441 = extractelement <16 x float> %427, i64 13, !dbg !36
  %442 = extractelement <16 x float> %427, i64 14, !dbg !36
  %443 = extractelement <16 x float> %427, i64 15, !dbg !36
  %444 = tail call float @llvm.maxnum.f32(float %404, float %405), !dbg !37
  %445 = tail call float @llvm.maxnum.f32(float %444, float %406), !dbg !37
  %446 = tail call float @llvm.maxnum.f32(float %445, float %407), !dbg !37
  %447 = tail call float @llvm.maxnum.f32(float %446, float %408), !dbg !37
  %448 = tail call float @llvm.maxnum.f32(float %447, float %409), !dbg !37
  %449 = tail call float @llvm.maxnum.f32(float %448, float %410), !dbg !37
  %450 = tail call float @llvm.maxnum.f32(float %449, float %411), !dbg !37
  %451 = tail call float @llvm.maxnum.f32(float %450, float %412), !dbg !37
  %452 = tail call float @llvm.maxnum.f32(float %451, float %413), !dbg !37
  %453 = tail call float @llvm.maxnum.f32(float %452, float %414), !dbg !37
  %454 = tail call float @llvm.maxnum.f32(float %453, float %415), !dbg !37
  %455 = tail call float @llvm.maxnum.f32(float %454, float %416), !dbg !37
  %456 = tail call float @llvm.maxnum.f32(float %455, float %417), !dbg !37
  %457 = tail call float @llvm.maxnum.f32(float %456, float %418), !dbg !37
  %458 = tail call float @llvm.maxnum.f32(float %457, float %419), !dbg !37
  %459 = tail call float @llvm.maxnum.f32(float %458, float %428), !dbg !37
  %460 = tail call float @llvm.maxnum.f32(float %459, float %429), !dbg !37
  %461 = tail call float @llvm.maxnum.f32(float %460, float %430), !dbg !37
  %462 = tail call float @llvm.maxnum.f32(float %461, float %431), !dbg !37
  %463 = tail call float @llvm.maxnum.f32(float %462, float %432), !dbg !37
  %464 = tail call float @llvm.maxnum.f32(float %463, float %433), !dbg !37
  %465 = tail call float @llvm.maxnum.f32(float %464, float %434), !dbg !37
  %466 = tail call float @llvm.maxnum.f32(float %465, float %435), !dbg !37
  %467 = tail call float @llvm.maxnum.f32(float %466, float %436), !dbg !37
  %468 = tail call float @llvm.maxnum.f32(float %467, float %437), !dbg !37
  %469 = tail call float @llvm.maxnum.f32(float %468, float %438), !dbg !37
  %470 = tail call float @llvm.maxnum.f32(float %469, float %439), !dbg !37
  %471 = tail call float @llvm.maxnum.f32(float %470, float %440), !dbg !37
  %472 = tail call float @llvm.maxnum.f32(float %471, float %441), !dbg !37
  %473 = tail call float @llvm.maxnum.f32(float %472, float %442), !dbg !37
  %474 = tail call float @llvm.maxnum.f32(float %473, float %443), !dbg !37
  %475 = bitcast float %474 to i32, !dbg !41
  %476 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %209, i32 %475), !dbg !41
  %477 = bitcast i32 %476 to float, !dbg !41
  %478 = tail call float @llvm.maxnum.f32(float %474, float %477), !dbg !37
  %479 = fmul float %84, %478, !dbg !42
  %480 = tail call float @llvm.maxnum.f32(float %346, float %479), !dbg !43
  %481 = fmul float %84, %404, !dbg !44
  %482 = fmul float %84, %405, !dbg !44
  %483 = fmul float %84, %406, !dbg !44
  %484 = fmul float %84, %407, !dbg !44
  %485 = fmul float %84, %408, !dbg !44
  %486 = fmul float %84, %409, !dbg !44
  %487 = fmul float %84, %410, !dbg !44
  %488 = fmul float %84, %411, !dbg !44
  %489 = fmul float %84, %412, !dbg !44
  %490 = fmul float %84, %413, !dbg !44
  %491 = fmul float %84, %414, !dbg !44
  %492 = fmul float %84, %415, !dbg !44
  %493 = fmul float %84, %416, !dbg !44
  %494 = fmul float %84, %417, !dbg !44
  %495 = fmul float %84, %418, !dbg !44
  %496 = fmul float %84, %419, !dbg !44
  %497 = fmul float %84, %428, !dbg !44
  %498 = fmul float %84, %429, !dbg !44
  %499 = fmul float %84, %430, !dbg !44
  %500 = fmul float %84, %431, !dbg !44
  %501 = fmul float %84, %432, !dbg !44
  %502 = fmul float %84, %433, !dbg !44
  %503 = fmul float %84, %434, !dbg !44
  %504 = fmul float %84, %435, !dbg !44
  %505 = fmul float %84, %436, !dbg !44
  %506 = fmul float %84, %437, !dbg !44
  %507 = fmul float %84, %438, !dbg !44
  %508 = fmul float %84, %439, !dbg !44
  %509 = fmul float %84, %440, !dbg !44
  %510 = fmul float %84, %441, !dbg !44
  %511 = fmul float %84, %442, !dbg !44
  %512 = fmul float %84, %443, !dbg !44
  %513 = fsub float %481, %480, !dbg !45
  %514 = fsub float %482, %480, !dbg !45
  %515 = fsub float %483, %480, !dbg !45
  %516 = fsub float %484, %480, !dbg !45
  %517 = fsub float %485, %480, !dbg !45
  %518 = fsub float %486, %480, !dbg !45
  %519 = fsub float %487, %480, !dbg !45
  %520 = fsub float %488, %480, !dbg !45
  %521 = fsub float %489, %480, !dbg !45
  %522 = fsub float %490, %480, !dbg !45
  %523 = fsub float %491, %480, !dbg !45
  %524 = fsub float %492, %480, !dbg !45
  %525 = fsub float %493, %480, !dbg !45
  %526 = fsub float %494, %480, !dbg !45
  %527 = fsub float %495, %480, !dbg !45
  %528 = fsub float %496, %480, !dbg !45
  %529 = fsub float %497, %480, !dbg !45
  %530 = fsub float %498, %480, !dbg !45
  %531 = fsub float %499, %480, !dbg !45
  %532 = fsub float %500, %480, !dbg !45
  %533 = fsub float %501, %480, !dbg !45
  %534 = fsub float %502, %480, !dbg !45
  %535 = fsub float %503, %480, !dbg !45
  %536 = fsub float %504, %480, !dbg !45
  %537 = fsub float %505, %480, !dbg !45
  %538 = fsub float %506, %480, !dbg !45
  %539 = fsub float %507, %480, !dbg !45
  %540 = fsub float %508, %480, !dbg !45
  %541 = fsub float %509, %480, !dbg !45
  %542 = fsub float %510, %480, !dbg !45
  %543 = fsub float %511, %480, !dbg !45
  %544 = fsub float %512, %480, !dbg !45
  %545 = tail call float @llvm.amdgcn.exp2.f32(float %513), !dbg !46
  %546 = tail call float @llvm.amdgcn.exp2.f32(float %514), !dbg !46
  %547 = tail call float @llvm.amdgcn.exp2.f32(float %515), !dbg !46
  %548 = tail call float @llvm.amdgcn.exp2.f32(float %516), !dbg !46
  %549 = tail call float @llvm.amdgcn.exp2.f32(float %517), !dbg !46
  %550 = tail call float @llvm.amdgcn.exp2.f32(float %518), !dbg !46
  %551 = tail call float @llvm.amdgcn.exp2.f32(float %519), !dbg !46
  %552 = tail call float @llvm.amdgcn.exp2.f32(float %520), !dbg !46
  %553 = tail call float @llvm.amdgcn.exp2.f32(float %521), !dbg !46
  %554 = tail call float @llvm.amdgcn.exp2.f32(float %522), !dbg !46
  %555 = tail call float @llvm.amdgcn.exp2.f32(float %523), !dbg !46
  %556 = tail call float @llvm.amdgcn.exp2.f32(float %524), !dbg !46
  %557 = tail call float @llvm.amdgcn.exp2.f32(float %525), !dbg !46
  %558 = tail call float @llvm.amdgcn.exp2.f32(float %526), !dbg !46
  %559 = tail call float @llvm.amdgcn.exp2.f32(float %527), !dbg !46
  %560 = tail call float @llvm.amdgcn.exp2.f32(float %528), !dbg !46
  %561 = tail call float @llvm.amdgcn.exp2.f32(float %529), !dbg !46
  %562 = tail call float @llvm.amdgcn.exp2.f32(float %530), !dbg !46
  %563 = tail call float @llvm.amdgcn.exp2.f32(float %531), !dbg !46
  %564 = tail call float @llvm.amdgcn.exp2.f32(float %532), !dbg !46
  %565 = tail call float @llvm.amdgcn.exp2.f32(float %533), !dbg !46
  %566 = tail call float @llvm.amdgcn.exp2.f32(float %534), !dbg !46
  %567 = tail call float @llvm.amdgcn.exp2.f32(float %535), !dbg !46
  %568 = tail call float @llvm.amdgcn.exp2.f32(float %536), !dbg !46
  %569 = tail call float @llvm.amdgcn.exp2.f32(float %537), !dbg !46
  %570 = tail call float @llvm.amdgcn.exp2.f32(float %538), !dbg !46
  %571 = tail call float @llvm.amdgcn.exp2.f32(float %539), !dbg !46
  %572 = tail call float @llvm.amdgcn.exp2.f32(float %540), !dbg !46
  %573 = tail call float @llvm.amdgcn.exp2.f32(float %541), !dbg !46
  %574 = tail call float @llvm.amdgcn.exp2.f32(float %542), !dbg !46
  %575 = tail call float @llvm.amdgcn.exp2.f32(float %543), !dbg !46
  %576 = tail call float @llvm.amdgcn.exp2.f32(float %544), !dbg !46
  %577 = fadd float %545, %546, !dbg !47
  %578 = fadd float %547, %577, !dbg !47
  %579 = fadd float %548, %578, !dbg !47
  %580 = fadd float %549, %579, !dbg !47
  %581 = fadd float %550, %580, !dbg !47
  %582 = fadd float %551, %581, !dbg !47
  %583 = fadd float %552, %582, !dbg !47
  %584 = fadd float %553, %583, !dbg !47
  %585 = fadd float %554, %584, !dbg !47
  %586 = fadd float %555, %585, !dbg !47
  %587 = fadd float %556, %586, !dbg !47
  %588 = fadd float %557, %587, !dbg !47
  %589 = fadd float %558, %588, !dbg !47
  %590 = fadd float %559, %589, !dbg !47
  %591 = fadd float %560, %590, !dbg !47
  %592 = fadd float %561, %591, !dbg !47
  %593 = fadd float %562, %592, !dbg !47
  %594 = fadd float %563, %593, !dbg !47
  %595 = fadd float %564, %594, !dbg !47
  %596 = fadd float %565, %595, !dbg !47
  %597 = fadd float %566, %596, !dbg !47
  %598 = fadd float %567, %597, !dbg !47
  %599 = fadd float %568, %598, !dbg !47
  %600 = fadd float %569, %599, !dbg !47
  %601 = fadd float %570, %600, !dbg !47
  %602 = fadd float %571, %601, !dbg !47
  %603 = fadd float %572, %602, !dbg !47
  %604 = fadd float %573, %603, !dbg !47
  %605 = fadd float %574, %604, !dbg !47
  %606 = fadd float %575, %605, !dbg !47
  %607 = fadd float %576, %606, !dbg !47
  %608 = bitcast float %607 to i32, !dbg !48
  %609 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %209, i32 %608), !dbg !48
  %610 = bitcast i32 %609 to float, !dbg !48
  %611 = fadd float %607, %610, !dbg !47
  %612 = fsub float %346, %480, !dbg !49
  %613 = tail call float @llvm.amdgcn.exp2.f32(float %612), !dbg !50
  %614 = fmul float %347, %613, !dbg !51
  %615 = fadd float %614, %611, !dbg !52
  %616 = insertelement <2 x float> poison, float %613, i64 0, !dbg !53
  %617 = shufflevector <2 x float> %616, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %618 = fmul <2 x float> %356, %617, !dbg !53
  %619 = fmul <2 x float> %357, %617, !dbg !53
  %620 = fmul <2 x float> %358, %617, !dbg !53
  %621 = fmul <2 x float> %359, %617, !dbg !53
  %622 = fmul <2 x float> %360, %617, !dbg !53
  %623 = fmul <2 x float> %361, %617, !dbg !53
  %624 = fmul <2 x float> %362, %617, !dbg !53
  %625 = fmul <2 x float> %363, %617, !dbg !53
  %626 = fmul <2 x float> %348, %617, !dbg !53
  %627 = fmul <2 x float> %349, %617, !dbg !53
  %628 = fmul <2 x float> %350, %617, !dbg !53
  %629 = fmul <2 x float> %351, %617, !dbg !53
  %630 = fmul <2 x float> %352, %617, !dbg !53
  %631 = fmul <2 x float> %353, %617, !dbg !53
  %632 = fmul <2 x float> %354, %617, !dbg !53
  %633 = fmul <2 x float> %355, %617, !dbg !53
  %634 = fptrunc float %545 to half, !dbg !54
  %635 = fptrunc float %546 to half, !dbg !54
  %636 = fptrunc float %547 to half, !dbg !54
  %637 = fptrunc float %548 to half, !dbg !54
  %638 = fptrunc float %549 to half, !dbg !54
  %639 = fptrunc float %550 to half, !dbg !54
  %640 = fptrunc float %551 to half, !dbg !54
  %641 = fptrunc float %552 to half, !dbg !54
  %642 = fptrunc float %553 to half, !dbg !54
  %643 = fptrunc float %554 to half, !dbg !54
  %644 = fptrunc float %555 to half, !dbg !54
  %645 = fptrunc float %556 to half, !dbg !54
  %646 = fptrunc float %557 to half, !dbg !54
  %647 = fptrunc float %558 to half, !dbg !54
  %648 = fptrunc float %559 to half, !dbg !54
  %649 = fptrunc float %560 to half, !dbg !54
  %650 = fptrunc float %561 to half, !dbg !54
  %651 = fptrunc float %562 to half, !dbg !54
  %652 = fptrunc float %563 to half, !dbg !54
  %653 = fptrunc float %564 to half, !dbg !54
  %654 = fptrunc float %565 to half, !dbg !54
  %655 = fptrunc float %566 to half, !dbg !54
  %656 = fptrunc float %567 to half, !dbg !54
  %657 = fptrunc float %568 to half, !dbg !54
  %658 = fptrunc float %569 to half, !dbg !54
  %659 = fptrunc float %570 to half, !dbg !54
  %660 = fptrunc float %571 to half, !dbg !54
  %661 = fptrunc float %572 to half, !dbg !54
  %662 = fptrunc float %573 to half, !dbg !54
  %663 = fptrunc float %574 to half, !dbg !54
  %664 = fptrunc float %575 to half, !dbg !54
  %665 = fptrunc float %576 to half, !dbg !54
  fence syncscope("workgroup") release, !dbg !35
  tail call void @llvm.amdgcn.s.barrier(), !dbg !35
  fence syncscope("workgroup") acquire, !dbg !35
  store <8 x half> %unmaskedload43, ptr addrspace(3) %211, align 16, !dbg !35
  store <8 x half> %unmaskedload44, ptr addrspace(3) %213, align 16, !dbg !35
  fence syncscope("workgroup") release, !dbg !35
  tail call void @llvm.amdgcn.s.barrier(), !dbg !35
  fence syncscope("workgroup") acquire, !dbg !35
  %666 = load <1 x half>, ptr addrspace(3) %280, align 2, !dbg !35
  %667 = load <1 x half>, ptr addrspace(3) %281, align 2, !dbg !35
  %668 = load <1 x half>, ptr addrspace(3) %282, align 2, !dbg !35
  %669 = shufflevector <1 x half> %668, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %670 = load <1 x half>, ptr addrspace(3) %283, align 2, !dbg !35
  %671 = shufflevector <1 x half> %670, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %672 = load <1 x half>, ptr addrspace(3) %284, align 2, !dbg !35
  %673 = load <1 x half>, ptr addrspace(3) %285, align 2, !dbg !35
  %674 = load <1 x half>, ptr addrspace(3) %286, align 2, !dbg !35
  %675 = shufflevector <1 x half> %674, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %676 = load <1 x half>, ptr addrspace(3) %287, align 2, !dbg !35
  %677 = shufflevector <1 x half> %676, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %678 = load <1 x half>, ptr addrspace(3) %288, align 2, !dbg !35
  %679 = load <1 x half>, ptr addrspace(3) %289, align 2, !dbg !35
  %680 = load <1 x half>, ptr addrspace(3) %290, align 2, !dbg !35
  %681 = shufflevector <1 x half> %680, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %682 = load <1 x half>, ptr addrspace(3) %291, align 2, !dbg !35
  %683 = shufflevector <1 x half> %682, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %684 = load <1 x half>, ptr addrspace(3) %292, align 2, !dbg !35
  %685 = load <1 x half>, ptr addrspace(3) %293, align 2, !dbg !35
  %686 = load <1 x half>, ptr addrspace(3) %294, align 2, !dbg !35
  %687 = shufflevector <1 x half> %686, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %688 = load <1 x half>, ptr addrspace(3) %295, align 2, !dbg !35
  %689 = shufflevector <1 x half> %688, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %690 = load <1 x half>, ptr addrspace(3) %296, align 2, !dbg !35
  %691 = load <1 x half>, ptr addrspace(3) %297, align 2, !dbg !35
  %692 = load <1 x half>, ptr addrspace(3) %298, align 2, !dbg !35
  %693 = shufflevector <1 x half> %692, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %694 = load <1 x half>, ptr addrspace(3) %299, align 2, !dbg !35
  %695 = shufflevector <1 x half> %694, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %696 = load <1 x half>, ptr addrspace(3) %300, align 2, !dbg !35
  %697 = load <1 x half>, ptr addrspace(3) %301, align 2, !dbg !35
  %698 = load <1 x half>, ptr addrspace(3) %302, align 2, !dbg !35
  %699 = shufflevector <1 x half> %698, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %700 = load <1 x half>, ptr addrspace(3) %303, align 2, !dbg !35
  %701 = shufflevector <1 x half> %700, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %702 = load <1 x half>, ptr addrspace(3) %304, align 2, !dbg !35
  %703 = load <1 x half>, ptr addrspace(3) %305, align 2, !dbg !35
  %704 = load <1 x half>, ptr addrspace(3) %306, align 2, !dbg !35
  %705 = shufflevector <1 x half> %704, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %706 = load <1 x half>, ptr addrspace(3) %307, align 2, !dbg !35
  %707 = shufflevector <1 x half> %706, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %708 = load <1 x half>, ptr addrspace(3) %308, align 2, !dbg !35
  %709 = load <1 x half>, ptr addrspace(3) %309, align 2, !dbg !35
  %710 = load <1 x half>, ptr addrspace(3) %310, align 2, !dbg !35
  %711 = shufflevector <1 x half> %710, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %712 = load <1 x half>, ptr addrspace(3) %311, align 2, !dbg !35
  %713 = shufflevector <1 x half> %712, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %714 = load <1 x half>, ptr addrspace(3) %312, align 2, !dbg !35
  %715 = load <1 x half>, ptr addrspace(3) %313, align 2, !dbg !35
  %716 = load <1 x half>, ptr addrspace(3) %314, align 2, !dbg !35
  %717 = shufflevector <1 x half> %716, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %718 = load <1 x half>, ptr addrspace(3) %315, align 2, !dbg !35
  %719 = shufflevector <1 x half> %718, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %720 = load <1 x half>, ptr addrspace(3) %316, align 2, !dbg !35
  %721 = load <1 x half>, ptr addrspace(3) %317, align 2, !dbg !35
  %722 = load <1 x half>, ptr addrspace(3) %318, align 2, !dbg !35
  %723 = shufflevector <1 x half> %722, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %724 = load <1 x half>, ptr addrspace(3) %319, align 2, !dbg !35
  %725 = shufflevector <1 x half> %724, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %726 = load <1 x half>, ptr addrspace(3) %320, align 2, !dbg !35
  %727 = load <1 x half>, ptr addrspace(3) %321, align 2, !dbg !35
  %728 = load <1 x half>, ptr addrspace(3) %322, align 2, !dbg !35
  %729 = shufflevector <1 x half> %728, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %730 = load <1 x half>, ptr addrspace(3) %323, align 2, !dbg !35
  %731 = shufflevector <1 x half> %730, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %732 = load <1 x half>, ptr addrspace(3) %324, align 2, !dbg !35
  %733 = load <1 x half>, ptr addrspace(3) %325, align 2, !dbg !35
  %734 = load <1 x half>, ptr addrspace(3) %326, align 2, !dbg !35
  %735 = shufflevector <1 x half> %734, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %736 = load <1 x half>, ptr addrspace(3) %327, align 2, !dbg !35
  %737 = shufflevector <1 x half> %736, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %738 = load <1 x half>, ptr addrspace(3) %328, align 2, !dbg !35
  %739 = load <1 x half>, ptr addrspace(3) %329, align 2, !dbg !35
  %740 = load <1 x half>, ptr addrspace(3) %330, align 2, !dbg !35
  %741 = shufflevector <1 x half> %740, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %742 = load <1 x half>, ptr addrspace(3) %331, align 2, !dbg !35
  %743 = shufflevector <1 x half> %742, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %744 = load <1 x half>, ptr addrspace(3) %332, align 2, !dbg !35
  %745 = load <1 x half>, ptr addrspace(3) %333, align 2, !dbg !35
  %746 = load <1 x half>, ptr addrspace(3) %334, align 2, !dbg !35
  %747 = shufflevector <1 x half> %746, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %748 = load <1 x half>, ptr addrspace(3) %335, align 2, !dbg !35
  %749 = shufflevector <1 x half> %748, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %750 = load <1 x half>, ptr addrspace(3) %336, align 2, !dbg !35
  %751 = load <1 x half>, ptr addrspace(3) %337, align 2, !dbg !35
  %752 = load <1 x half>, ptr addrspace(3) %338, align 2, !dbg !35
  %753 = shufflevector <1 x half> %752, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %754 = load <1 x half>, ptr addrspace(3) %339, align 2, !dbg !35
  %755 = shufflevector <1 x half> %754, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %756 = load <1 x half>, ptr addrspace(3) %340, align 2, !dbg !35
  %757 = load <1 x half>, ptr addrspace(3) %341, align 2, !dbg !35
  %758 = load <1 x half>, ptr addrspace(3) %342, align 2, !dbg !35
  %759 = shufflevector <1 x half> %758, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %760 = load <1 x half>, ptr addrspace(3) %343, align 2, !dbg !35
  %761 = shufflevector <1 x half> %760, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %762 = insertelement <4 x half> poison, half %634, i64 0, !dbg !55
  %763 = insertelement <4 x half> %762, half %635, i64 1, !dbg !55
  %764 = insertelement <4 x half> %763, half %636, i64 2, !dbg !55
  %765 = insertelement <4 x half> %764, half %637, i64 3, !dbg !55
  %766 = insertelement <4 x half> poison, half %638, i64 0, !dbg !55
  %767 = insertelement <4 x half> %766, half %639, i64 1, !dbg !55
  %768 = insertelement <4 x half> %767, half %640, i64 2, !dbg !55
  %769 = insertelement <4 x half> %768, half %641, i64 3, !dbg !55
  %770 = insertelement <4 x half> poison, half %642, i64 0, !dbg !55
  %771 = insertelement <4 x half> %770, half %643, i64 1, !dbg !55
  %772 = insertelement <4 x half> %771, half %644, i64 2, !dbg !55
  %773 = insertelement <4 x half> %772, half %645, i64 3, !dbg !55
  %774 = insertelement <4 x half> poison, half %646, i64 0, !dbg !55
  %775 = insertelement <4 x half> %774, half %647, i64 1, !dbg !55
  %776 = insertelement <4 x half> %775, half %648, i64 2, !dbg !55
  %777 = insertelement <4 x half> %776, half %649, i64 3, !dbg !55
  %778 = insertelement <4 x half> poison, half %650, i64 0, !dbg !55
  %779 = insertelement <4 x half> %778, half %651, i64 1, !dbg !55
  %780 = insertelement <4 x half> %779, half %652, i64 2, !dbg !55
  %781 = insertelement <4 x half> %780, half %653, i64 3, !dbg !55
  %782 = insertelement <4 x half> poison, half %654, i64 0, !dbg !55
  %783 = insertelement <4 x half> %782, half %655, i64 1, !dbg !55
  %784 = insertelement <4 x half> %783, half %656, i64 2, !dbg !55
  %785 = insertelement <4 x half> %784, half %657, i64 3, !dbg !55
  %786 = insertelement <4 x half> poison, half %658, i64 0, !dbg !55
  %787 = insertelement <4 x half> %786, half %659, i64 1, !dbg !55
  %788 = insertelement <4 x half> %787, half %660, i64 2, !dbg !55
  %789 = insertelement <4 x half> %788, half %661, i64 3, !dbg !55
  %790 = insertelement <4 x half> poison, half %662, i64 0, !dbg !55
  %791 = insertelement <4 x half> %790, half %663, i64 1, !dbg !55
  %792 = insertelement <4 x half> %791, half %664, i64 2, !dbg !55
  %793 = insertelement <4 x half> %792, half %665, i64 3, !dbg !55
  %794 = shufflevector <1 x half> %666, <1 x half> %667, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %795 = shufflevector <4 x half> %794, <4 x half> %669, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %796 = shufflevector <4 x half> %795, <4 x half> %671, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %797 = shufflevector <1 x half> %672, <1 x half> %673, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %798 = shufflevector <4 x half> %797, <4 x half> %675, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %799 = shufflevector <4 x half> %798, <4 x half> %677, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %800 = shufflevector <1 x half> %678, <1 x half> %679, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %801 = shufflevector <4 x half> %800, <4 x half> %681, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %802 = shufflevector <4 x half> %801, <4 x half> %683, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %803 = shufflevector <1 x half> %684, <1 x half> %685, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %804 = shufflevector <4 x half> %803, <4 x half> %687, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %805 = shufflevector <4 x half> %804, <4 x half> %689, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %806 = shufflevector <1 x half> %690, <1 x half> %691, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %807 = shufflevector <4 x half> %806, <4 x half> %693, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %808 = shufflevector <4 x half> %807, <4 x half> %695, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %809 = shufflevector <1 x half> %696, <1 x half> %697, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %810 = shufflevector <4 x half> %809, <4 x half> %699, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %811 = shufflevector <4 x half> %810, <4 x half> %701, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %812 = shufflevector <1 x half> %702, <1 x half> %703, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %813 = shufflevector <4 x half> %812, <4 x half> %705, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %814 = shufflevector <4 x half> %813, <4 x half> %707, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %815 = shufflevector <1 x half> %708, <1 x half> %709, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %816 = shufflevector <4 x half> %815, <4 x half> %711, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %817 = shufflevector <4 x half> %816, <4 x half> %713, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %818 = shufflevector <1 x half> %714, <1 x half> %715, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %819 = shufflevector <4 x half> %818, <4 x half> %717, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %820 = shufflevector <4 x half> %819, <4 x half> %719, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %821 = shufflevector <1 x half> %720, <1 x half> %721, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %822 = shufflevector <4 x half> %821, <4 x half> %723, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %823 = shufflevector <4 x half> %822, <4 x half> %725, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %824 = shufflevector <1 x half> %726, <1 x half> %727, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %825 = shufflevector <4 x half> %824, <4 x half> %729, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %826 = shufflevector <4 x half> %825, <4 x half> %731, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %827 = shufflevector <1 x half> %732, <1 x half> %733, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %828 = shufflevector <4 x half> %827, <4 x half> %735, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %829 = shufflevector <4 x half> %828, <4 x half> %737, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %830 = shufflevector <1 x half> %738, <1 x half> %739, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %831 = shufflevector <4 x half> %830, <4 x half> %741, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %832 = shufflevector <4 x half> %831, <4 x half> %743, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %833 = shufflevector <1 x half> %744, <1 x half> %745, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %834 = shufflevector <4 x half> %833, <4 x half> %747, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %835 = shufflevector <4 x half> %834, <4 x half> %749, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %836 = shufflevector <1 x half> %750, <1 x half> %751, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %837 = shufflevector <4 x half> %836, <4 x half> %753, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %838 = shufflevector <4 x half> %837, <4 x half> %755, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %839 = shufflevector <1 x half> %756, <1 x half> %757, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %840 = shufflevector <4 x half> %839, <4 x half> %759, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %841 = shufflevector <4 x half> %840, <4 x half> %761, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %842 = shufflevector <2 x float> %618, <2 x float> %619, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %843 = shufflevector <2 x float> %620, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %844 = shufflevector <16 x float> %842, <16 x float> %843, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %845 = shufflevector <2 x float> %621, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %846 = shufflevector <16 x float> %844, <16 x float> %845, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %847 = shufflevector <2 x float> %622, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %848 = shufflevector <16 x float> %846, <16 x float> %847, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %849 = shufflevector <2 x float> %623, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %850 = shufflevector <16 x float> %848, <16 x float> %849, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %851 = shufflevector <2 x float> %624, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %852 = shufflevector <16 x float> %850, <16 x float> %851, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !55
  %853 = shufflevector <2 x float> %625, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %854 = shufflevector <16 x float> %852, <16 x float> %853, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !55
  %855 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %796, <4 x half> %765, <16 x float> %854, i32 0, i32 0, i32 0), !dbg !55
  %856 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %799, <4 x half> %769, <16 x float> %855, i32 0, i32 0, i32 0), !dbg !55
  %857 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %802, <4 x half> %773, <16 x float> %856, i32 0, i32 0, i32 0), !dbg !55
  %858 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %805, <4 x half> %777, <16 x float> %857, i32 0, i32 0, i32 0), !dbg !55
  %859 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %808, <4 x half> %781, <16 x float> %858, i32 0, i32 0, i32 0), !dbg !55
  %860 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %811, <4 x half> %785, <16 x float> %859, i32 0, i32 0, i32 0), !dbg !55
  %861 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %814, <4 x half> %789, <16 x float> %860, i32 0, i32 0, i32 0), !dbg !55
  %862 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %817, <4 x half> %793, <16 x float> %861, i32 0, i32 0, i32 0), !dbg !55
  %863 = shufflevector <2 x float> %626, <2 x float> %627, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %864 = shufflevector <2 x float> %628, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %865 = shufflevector <16 x float> %863, <16 x float> %864, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %866 = shufflevector <2 x float> %629, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %867 = shufflevector <16 x float> %865, <16 x float> %866, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %868 = shufflevector <2 x float> %630, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %869 = shufflevector <16 x float> %867, <16 x float> %868, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %870 = shufflevector <2 x float> %631, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %871 = shufflevector <16 x float> %869, <16 x float> %870, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %872 = shufflevector <2 x float> %632, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %873 = shufflevector <16 x float> %871, <16 x float> %872, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !55
  %874 = shufflevector <2 x float> %633, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %875 = shufflevector <16 x float> %873, <16 x float> %874, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !55
  %876 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %820, <4 x half> %765, <16 x float> %875, i32 0, i32 0, i32 0), !dbg !55
  %877 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %823, <4 x half> %769, <16 x float> %876, i32 0, i32 0, i32 0), !dbg !55
  %878 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %826, <4 x half> %773, <16 x float> %877, i32 0, i32 0, i32 0), !dbg !55
  %879 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %829, <4 x half> %777, <16 x float> %878, i32 0, i32 0, i32 0), !dbg !55
  %880 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %832, <4 x half> %781, <16 x float> %879, i32 0, i32 0, i32 0), !dbg !55
  %881 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %835, <4 x half> %785, <16 x float> %880, i32 0, i32 0, i32 0), !dbg !55
  %882 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %838, <4 x half> %789, <16 x float> %881, i32 0, i32 0, i32 0), !dbg !55
  %883 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %841, <4 x half> %793, <16 x float> %882, i32 0, i32 0, i32 0), !dbg !55
  %884 = add nuw nsw i64 %345, 64, !dbg !56
  %indvars = trunc i64 %884 to i32, !dbg !31
  %885 = icmp sgt i32 %33, %indvars, !dbg !31
  %886 = shufflevector <16 x float> %883, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %887 = shufflevector <16 x float> %883, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %888 = shufflevector <16 x float> %883, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %889 = shufflevector <16 x float> %883, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %890 = shufflevector <16 x float> %883, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %891 = shufflevector <16 x float> %883, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %892 = shufflevector <16 x float> %883, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %893 = shufflevector <16 x float> %883, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %894 = shufflevector <16 x float> %862, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %895 = shufflevector <16 x float> %862, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %896 = shufflevector <16 x float> %862, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %897 = shufflevector <16 x float> %862, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %898 = shufflevector <16 x float> %862, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %899 = shufflevector <16 x float> %862, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %900 = shufflevector <16 x float> %862, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %901 = shufflevector <16 x float> %862, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %885, label %344, label %._crit_edge, !dbg !31

._crit_edge:                                      ; preds = %344, %20
  %.lcssa50 = phi float [ 1.000000e+00, %20 ], [ %615, %344 ]
  %.lcssa48 = phi float [ 0xFFF0000000000000, %20 ], [ %480, %344 ]
  %902 = phi <2 x float> [ zeroinitializer, %20 ], [ %886, %344 ]
  %903 = phi <2 x float> [ zeroinitializer, %20 ], [ %887, %344 ]
  %904 = phi <2 x float> [ zeroinitializer, %20 ], [ %888, %344 ]
  %905 = phi <2 x float> [ zeroinitializer, %20 ], [ %889, %344 ]
  %906 = phi <2 x float> [ zeroinitializer, %20 ], [ %890, %344 ]
  %907 = phi <2 x float> [ zeroinitializer, %20 ], [ %891, %344 ]
  %908 = phi <2 x float> [ zeroinitializer, %20 ], [ %892, %344 ]
  %909 = phi <2 x float> [ zeroinitializer, %20 ], [ %893, %344 ]
  %910 = phi <2 x float> [ zeroinitializer, %20 ], [ %894, %344 ]
  %911 = phi <2 x float> [ zeroinitializer, %20 ], [ %895, %344 ]
  %912 = phi <2 x float> [ zeroinitializer, %20 ], [ %896, %344 ]
  %913 = phi <2 x float> [ zeroinitializer, %20 ], [ %897, %344 ]
  %914 = phi <2 x float> [ zeroinitializer, %20 ], [ %898, %344 ]
  %915 = phi <2 x float> [ zeroinitializer, %20 ], [ %899, %344 ]
  %916 = phi <2 x float> [ zeroinitializer, %20 ], [ %900, %344 ]
  %917 = phi <2 x float> [ zeroinitializer, %20 ], [ %901, %344 ]
  %918 = add i32 %33, 128, !dbg !57
  %.not59 = icmp eq i32 %33, 2147483520, !dbg !59
  %919 = extractelement <2 x float> %902, i64 0, !dbg !59
  %920 = extractelement <2 x float> %902, i64 1, !dbg !59
  %921 = extractelement <2 x float> %903, i64 0, !dbg !59
  %922 = extractelement <2 x float> %903, i64 1, !dbg !59
  %923 = extractelement <2 x float> %904, i64 0, !dbg !59
  %924 = extractelement <2 x float> %904, i64 1, !dbg !59
  %925 = extractelement <2 x float> %905, i64 0, !dbg !59
  %926 = extractelement <2 x float> %905, i64 1, !dbg !59
  %927 = extractelement <2 x float> %906, i64 0, !dbg !59
  %928 = extractelement <2 x float> %906, i64 1, !dbg !59
  %929 = extractelement <2 x float> %907, i64 0, !dbg !59
  %930 = extractelement <2 x float> %907, i64 1, !dbg !59
  %931 = extractelement <2 x float> %908, i64 0, !dbg !59
  %932 = extractelement <2 x float> %908, i64 1, !dbg !59
  %933 = extractelement <2 x float> %909, i64 0, !dbg !59
  %934 = extractelement <2 x float> %909, i64 1, !dbg !59
  %935 = extractelement <2 x float> %910, i64 0, !dbg !59
  %936 = extractelement <2 x float> %910, i64 1, !dbg !59
  %937 = extractelement <2 x float> %911, i64 0, !dbg !59
  %938 = extractelement <2 x float> %911, i64 1, !dbg !59
  %939 = extractelement <2 x float> %912, i64 0, !dbg !59
  %940 = extractelement <2 x float> %912, i64 1, !dbg !59
  %941 = extractelement <2 x float> %913, i64 0, !dbg !59
  %942 = extractelement <2 x float> %913, i64 1, !dbg !59
  %943 = extractelement <2 x float> %914, i64 0, !dbg !59
  %944 = extractelement <2 x float> %914, i64 1, !dbg !59
  %945 = extractelement <2 x float> %915, i64 0, !dbg !59
  %946 = extractelement <2 x float> %915, i64 1, !dbg !59
  %947 = extractelement <2 x float> %916, i64 0, !dbg !59
  %948 = extractelement <2 x float> %916, i64 1, !dbg !59
  %949 = extractelement <2 x float> %917, i64 0, !dbg !59
  %950 = extractelement <2 x float> %917, i64 1, !dbg !59
  br i1 %.not59, label %._crit_edge55, label %.lr.ph54, !dbg !59

.lr.ph54:                                         ; preds = %._crit_edge
  %951 = mul nsw i64 %70, %45
  %952 = mul nsw i64 %70, %46
  %953 = mul nsw i64 %68, %45
  %954 = mul nsw i64 %68, %46
  %955 = shl nuw nsw i32 %71, 6
  %956 = or disjoint i32 %122, %955
  %957 = or disjoint i32 %127, %955
  %958 = or disjoint i32 %131, %955
  %959 = or disjoint i32 %135, %955
  %960 = or disjoint i32 %139, %955
  %961 = or disjoint i32 %143, %955
  %962 = or disjoint i32 %147, %955
  %963 = or disjoint i32 %151, %955
  %964 = or disjoint i32 %955, 2048
  %965 = or disjoint i32 %122, %964
  %966 = or disjoint i32 %127, %964
  %967 = or disjoint i32 %131, %964
  %968 = or disjoint i32 %135, %964
  %969 = or disjoint i32 %139, %964
  %970 = or disjoint i32 %143, %964
  %971 = or disjoint i32 %147, %964
  %972 = or disjoint i32 %151, %964
  %973 = getelementptr half, ptr addrspace(3) @global_smem, i32 %956
  %974 = getelementptr half, ptr addrspace(3) @global_smem, i32 %957
  %975 = getelementptr half, ptr addrspace(3) @global_smem, i32 %958
  %976 = getelementptr half, ptr addrspace(3) @global_smem, i32 %959
  %977 = getelementptr half, ptr addrspace(3) @global_smem, i32 %960
  %978 = getelementptr half, ptr addrspace(3) @global_smem, i32 %961
  %979 = getelementptr half, ptr addrspace(3) @global_smem, i32 %962
  %980 = getelementptr half, ptr addrspace(3) @global_smem, i32 %963
  %981 = getelementptr half, ptr addrspace(3) @global_smem, i32 %965
  %982 = getelementptr half, ptr addrspace(3) @global_smem, i32 %966
  %983 = getelementptr half, ptr addrspace(3) @global_smem, i32 %967
  %984 = getelementptr half, ptr addrspace(3) @global_smem, i32 %968
  %985 = getelementptr half, ptr addrspace(3) @global_smem, i32 %969
  %986 = getelementptr half, ptr addrspace(3) @global_smem, i32 %970
  %987 = getelementptr half, ptr addrspace(3) @global_smem, i32 %971
  %988 = getelementptr half, ptr addrspace(3) @global_smem, i32 %972
  %989 = shl i32 %35, 2
  %990 = xor i32 %989, 128
  %991 = or disjoint i32 %92, %56
  %992 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %991
  %993 = or disjoint i32 %103, %56
  %994 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %993
  %995 = shl nuw nsw i32 %36, 3
  %996 = and i32 %995, 256
  %997 = or disjoint i32 %996, %71
  %998 = or disjoint i32 %997, 64
  %999 = or disjoint i32 %997, 128
  %1000 = or disjoint i32 %997, 192
  %1001 = or disjoint i32 %997, 512
  %1002 = or disjoint i32 %997, 576
  %1003 = or disjoint i32 %997, 640
  %1004 = or disjoint i32 %997, 704
  %1005 = or disjoint i32 %997, 1024
  %1006 = or disjoint i32 %997, 1088
  %1007 = or disjoint i32 %997, 1152
  %1008 = or disjoint i32 %997, 1216
  %1009 = or disjoint i32 %997, 1536
  %1010 = or disjoint i32 %997, 1600
  %1011 = or disjoint i32 %997, 1664
  %1012 = or disjoint i32 %997, 1728
  %1013 = or disjoint i32 %997, 2048
  %1014 = or disjoint i32 %997, 2112
  %1015 = or disjoint i32 %997, 2176
  %1016 = or disjoint i32 %997, 2240
  %1017 = or disjoint i32 %997, 2560
  %1018 = or disjoint i32 %997, 2624
  %1019 = or disjoint i32 %997, 2688
  %1020 = or disjoint i32 %997, 2752
  %1021 = or disjoint i32 %997, 3072
  %1022 = or disjoint i32 %997, 3136
  %1023 = or disjoint i32 %997, 3200
  %1024 = or disjoint i32 %997, 3264
  %1025 = or disjoint i32 %997, 3584
  %1026 = or disjoint i32 %997, 3648
  %1027 = or disjoint i32 %997, 3712
  %1028 = or disjoint i32 %997, 3776
  %1029 = or disjoint i32 %997, 32
  %1030 = or disjoint i32 %997, 96
  %1031 = or disjoint i32 %997, 160
  %1032 = or disjoint i32 %997, 224
  %1033 = or disjoint i32 %997, 544
  %1034 = or disjoint i32 %997, 608
  %1035 = or disjoint i32 %997, 672
  %1036 = or disjoint i32 %997, 736
  %1037 = or disjoint i32 %997, 1056
  %1038 = or disjoint i32 %997, 1120
  %1039 = or disjoint i32 %997, 1184
  %1040 = or disjoint i32 %997, 1248
  %1041 = or disjoint i32 %997, 1568
  %1042 = or disjoint i32 %997, 1632
  %1043 = or disjoint i32 %997, 1696
  %1044 = or disjoint i32 %997, 1760
  %1045 = or disjoint i32 %997, 2080
  %1046 = or disjoint i32 %997, 2144
  %1047 = or disjoint i32 %997, 2208
  %1048 = or disjoint i32 %997, 2272
  %1049 = or disjoint i32 %997, 2592
  %1050 = or disjoint i32 %997, 2656
  %1051 = or disjoint i32 %997, 2720
  %1052 = or disjoint i32 %997, 2784
  %1053 = or disjoint i32 %997, 3104
  %1054 = or disjoint i32 %997, 3168
  %1055 = or disjoint i32 %997, 3232
  %1056 = or disjoint i32 %997, 3296
  %1057 = or disjoint i32 %997, 3616
  %1058 = or disjoint i32 %997, 3680
  %1059 = or disjoint i32 %997, 3744
  %1060 = or disjoint i32 %997, 3808
  %1061 = getelementptr half, ptr addrspace(3) @global_smem, i32 %997
  %1062 = getelementptr half, ptr addrspace(3) @global_smem, i32 %998
  %1063 = getelementptr half, ptr addrspace(3) @global_smem, i32 %999
  %1064 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1000
  %1065 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1001
  %1066 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1002
  %1067 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1003
  %1068 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1004
  %1069 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1005
  %1070 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1006
  %1071 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1007
  %1072 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1008
  %1073 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1009
  %1074 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1010
  %1075 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1011
  %1076 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1012
  %1077 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1013
  %1078 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1014
  %1079 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1015
  %1080 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1016
  %1081 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1017
  %1082 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1018
  %1083 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1019
  %1084 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1020
  %1085 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1021
  %1086 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1022
  %1087 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1023
  %1088 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1024
  %1089 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1025
  %1090 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1026
  %1091 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1027
  %1092 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1028
  %1093 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1029
  %1094 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1030
  %1095 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1031
  %1096 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1032
  %1097 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1033
  %1098 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1034
  %1099 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1035
  %1100 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1036
  %1101 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1037
  %1102 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1038
  %1103 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1039
  %1104 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1040
  %1105 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1041
  %1106 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1042
  %1107 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1043
  %1108 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1044
  %1109 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1045
  %1110 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1046
  %1111 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1047
  %1112 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1048
  %1113 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1049
  %1114 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1050
  %1115 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1051
  %1116 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1052
  %1117 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1053
  %1118 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1054
  %1119 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1055
  %1120 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1056
  %1121 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1057
  %1122 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1058
  %1123 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1059
  %1124 = getelementptr half, ptr addrspace(3) @global_smem, i32 %1060
  br label %1125, !dbg !59

1125:                                             ; preds = %.lr.ph54, %1125
  %1126 = phi i64 [ %34, %.lr.ph54 ], [ %1759, %1125 ]
  %1127 = phi float [ %.lcssa48, %.lr.ph54 ], [ %1387, %1125 ]
  %1128 = phi float [ %.lcssa50, %.lr.ph54 ], [ %1490, %1125 ]
  %1129 = phi <2 x float> [ %902, %.lr.ph54 ], [ %1761, %1125 ]
  %1130 = phi <2 x float> [ %903, %.lr.ph54 ], [ %1762, %1125 ]
  %1131 = phi <2 x float> [ %904, %.lr.ph54 ], [ %1763, %1125 ]
  %1132 = phi <2 x float> [ %905, %.lr.ph54 ], [ %1764, %1125 ]
  %1133 = phi <2 x float> [ %906, %.lr.ph54 ], [ %1765, %1125 ]
  %1134 = phi <2 x float> [ %907, %.lr.ph54 ], [ %1766, %1125 ]
  %1135 = phi <2 x float> [ %908, %.lr.ph54 ], [ %1767, %1125 ]
  %1136 = phi <2 x float> [ %909, %.lr.ph54 ], [ %1768, %1125 ]
  %1137 = phi <2 x float> [ %910, %.lr.ph54 ], [ %1769, %1125 ]
  %1138 = phi <2 x float> [ %911, %.lr.ph54 ], [ %1770, %1125 ]
  %1139 = phi <2 x float> [ %912, %.lr.ph54 ], [ %1771, %1125 ]
  %1140 = phi <2 x float> [ %913, %.lr.ph54 ], [ %1772, %1125 ]
  %1141 = phi <2 x float> [ %914, %.lr.ph54 ], [ %1773, %1125 ]
  %1142 = phi <2 x float> [ %915, %.lr.ph54 ], [ %1774, %1125 ]
  %1143 = phi <2 x float> [ %916, %.lr.ph54 ], [ %1775, %1125 ]
  %1144 = phi <2 x float> [ %917, %.lr.ph54 ], [ %1776, %1125 ]
  %indvars68 = trunc i64 %1126 to i32
  %1145 = mul i64 %1126, %70, !dbg !60
  %1146 = getelementptr half, ptr addrspace(1) %69, i64 %1145, !dbg !60
  %1147 = getelementptr half, ptr addrspace(1) %1146, i64 %951, !dbg !60
  %1148 = getelementptr half, ptr addrspace(1) %1147, i64 %57, !dbg !60
  %1149 = getelementptr half, ptr addrspace(1) %1146, i64 %952, !dbg !60
  %1150 = getelementptr half, ptr addrspace(1) %1149, i64 %57, !dbg !60
  %unmaskedload6 = load <8 x half>, ptr addrspace(1) %1148, align 16, !dbg !60
  %unmaskedload7 = load <8 x half>, ptr addrspace(1) %1150, align 16, !dbg !60
  %1151 = mul i64 %1126, %68, !dbg !61
  %1152 = getelementptr half, ptr addrspace(1) %67, i64 %1151, !dbg !61
  %1153 = getelementptr half, ptr addrspace(1) %1152, i64 %953, !dbg !61
  %1154 = getelementptr half, ptr addrspace(1) %1153, i64 %57, !dbg !61
  %1155 = getelementptr half, ptr addrspace(1) %1152, i64 %954, !dbg !61
  %1156 = getelementptr half, ptr addrspace(1) %1155, i64 %57, !dbg !61
  %unmaskedload8 = load <8 x half>, ptr addrspace(1) %1154, align 16, !dbg !61
  %unmaskedload9 = load <8 x half>, ptr addrspace(1) %1156, align 16, !dbg !61
  fence syncscope("workgroup") release, !dbg !60
  tail call void @llvm.amdgcn.s.barrier(), !dbg !60
  fence syncscope("workgroup") acquire, !dbg !60
  %1157 = shufflevector <8 x half> %unmaskedload6, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !60
  store <4 x half> %1157, ptr addrspace(3) %94, align 8, !dbg !60
  %1158 = shufflevector <8 x half> %unmaskedload6, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !60
  store <4 x half> %1158, ptr addrspace(3) %101, align 8, !dbg !60
  %1159 = shufflevector <8 x half> %unmaskedload7, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !60
  store <4 x half> %1159, ptr addrspace(3) %104, align 8, !dbg !60
  %1160 = shufflevector <8 x half> %unmaskedload7, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !60
  store <4 x half> %1160, ptr addrspace(3) %106, align 8, !dbg !60
  fence syncscope("workgroup") release, !dbg !60
  tail call void @llvm.amdgcn.s.barrier(), !dbg !60
  fence syncscope("workgroup") acquire, !dbg !60
  %1161 = load <4 x half>, ptr addrspace(3) %973, align 8, !dbg !60
  %1162 = load <4 x half>, ptr addrspace(3) %974, align 8, !dbg !60
  %1163 = load <4 x half>, ptr addrspace(3) %975, align 8, !dbg !60
  %1164 = load <4 x half>, ptr addrspace(3) %976, align 8, !dbg !60
  %1165 = load <4 x half>, ptr addrspace(3) %977, align 8, !dbg !60
  %1166 = load <4 x half>, ptr addrspace(3) %978, align 8, !dbg !60
  %1167 = load <4 x half>, ptr addrspace(3) %979, align 8, !dbg !60
  %1168 = load <4 x half>, ptr addrspace(3) %980, align 8, !dbg !60
  %1169 = load <4 x half>, ptr addrspace(3) %981, align 8, !dbg !60
  %1170 = load <4 x half>, ptr addrspace(3) %982, align 8, !dbg !60
  %1171 = load <4 x half>, ptr addrspace(3) %983, align 8, !dbg !60
  %1172 = load <4 x half>, ptr addrspace(3) %984, align 8, !dbg !60
  %1173 = load <4 x half>, ptr addrspace(3) %985, align 8, !dbg !60
  %1174 = load <4 x half>, ptr addrspace(3) %986, align 8, !dbg !60
  %1175 = load <4 x half>, ptr addrspace(3) %987, align 8, !dbg !60
  %1176 = load <4 x half>, ptr addrspace(3) %988, align 8, !dbg !60
  %1177 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1161, <4 x half> %154, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !62
  %1178 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1162, <4 x half> %156, <16 x float> %1177, i32 0, i32 0, i32 0), !dbg !62
  %1179 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1163, <4 x half> %158, <16 x float> %1178, i32 0, i32 0, i32 0), !dbg !62
  %1180 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1164, <4 x half> %160, <16 x float> %1179, i32 0, i32 0, i32 0), !dbg !62
  %1181 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1165, <4 x half> %162, <16 x float> %1180, i32 0, i32 0, i32 0), !dbg !62
  %1182 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1166, <4 x half> %164, <16 x float> %1181, i32 0, i32 0, i32 0), !dbg !62
  %1183 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1167, <4 x half> %166, <16 x float> %1182, i32 0, i32 0, i32 0), !dbg !62
  %1184 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1168, <4 x half> %168, <16 x float> %1183, i32 0, i32 0, i32 0), !dbg !62
  %1185 = extractelement <16 x float> %1184, i64 0, !dbg !62
  %1186 = extractelement <16 x float> %1184, i64 1, !dbg !62
  %1187 = extractelement <16 x float> %1184, i64 2, !dbg !62
  %1188 = extractelement <16 x float> %1184, i64 3, !dbg !62
  %1189 = extractelement <16 x float> %1184, i64 4, !dbg !62
  %1190 = extractelement <16 x float> %1184, i64 5, !dbg !62
  %1191 = extractelement <16 x float> %1184, i64 6, !dbg !62
  %1192 = extractelement <16 x float> %1184, i64 7, !dbg !62
  %1193 = extractelement <16 x float> %1184, i64 8, !dbg !62
  %1194 = extractelement <16 x float> %1184, i64 9, !dbg !62
  %1195 = extractelement <16 x float> %1184, i64 10, !dbg !62
  %1196 = extractelement <16 x float> %1184, i64 11, !dbg !62
  %1197 = extractelement <16 x float> %1184, i64 12, !dbg !62
  %1198 = extractelement <16 x float> %1184, i64 13, !dbg !62
  %1199 = extractelement <16 x float> %1184, i64 14, !dbg !62
  %1200 = extractelement <16 x float> %1184, i64 15, !dbg !62
  %1201 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1169, <4 x half> %154, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !62
  %1202 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1170, <4 x half> %156, <16 x float> %1201, i32 0, i32 0, i32 0), !dbg !62
  %1203 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1171, <4 x half> %158, <16 x float> %1202, i32 0, i32 0, i32 0), !dbg !62
  %1204 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1172, <4 x half> %160, <16 x float> %1203, i32 0, i32 0, i32 0), !dbg !62
  %1205 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1173, <4 x half> %162, <16 x float> %1204, i32 0, i32 0, i32 0), !dbg !62
  %1206 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1174, <4 x half> %164, <16 x float> %1205, i32 0, i32 0, i32 0), !dbg !62
  %1207 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1175, <4 x half> %166, <16 x float> %1206, i32 0, i32 0, i32 0), !dbg !62
  %1208 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1176, <4 x half> %168, <16 x float> %1207, i32 0, i32 0, i32 0), !dbg !62
  %1209 = extractelement <16 x float> %1208, i64 0, !dbg !62
  %1210 = extractelement <16 x float> %1208, i64 1, !dbg !62
  %1211 = extractelement <16 x float> %1208, i64 2, !dbg !62
  %1212 = extractelement <16 x float> %1208, i64 3, !dbg !62
  %1213 = extractelement <16 x float> %1208, i64 4, !dbg !62
  %1214 = extractelement <16 x float> %1208, i64 5, !dbg !62
  %1215 = extractelement <16 x float> %1208, i64 6, !dbg !62
  %1216 = extractelement <16 x float> %1208, i64 7, !dbg !62
  %1217 = extractelement <16 x float> %1208, i64 8, !dbg !62
  %1218 = extractelement <16 x float> %1208, i64 9, !dbg !62
  %1219 = extractelement <16 x float> %1208, i64 10, !dbg !62
  %1220 = extractelement <16 x float> %1208, i64 11, !dbg !62
  %1221 = extractelement <16 x float> %1208, i64 12, !dbg !62
  %1222 = extractelement <16 x float> %1208, i64 13, !dbg !62
  %1223 = extractelement <16 x float> %1208, i64 14, !dbg !62
  %1224 = extractelement <16 x float> %1208, i64 15, !dbg !62
  %1225 = or disjoint i32 %38, %indvars68, !dbg !63
  %1226 = or disjoint i32 %1225, 2, !dbg !63
  %1227 = or disjoint i32 %1225, 3, !dbg !63
  %1228 = or disjoint i32 %77, %indvars68, !dbg !63
  %1229 = or disjoint i32 %1225, 9, !dbg !63
  %1230 = or disjoint i32 %1225, 10, !dbg !63
  %1231 = or disjoint i32 %1225, 11, !dbg !63
  %1232 = or disjoint i32 %78, %indvars68, !dbg !63
  %1233 = or disjoint i32 %1225, 17, !dbg !63
  %1234 = or disjoint i32 %1225, 18, !dbg !63
  %1235 = or disjoint i32 %1225, 19, !dbg !63
  %1236 = or disjoint i32 %79, %indvars68, !dbg !63
  %1237 = or disjoint i32 %1225, 25, !dbg !63
  %1238 = or disjoint i32 %1225, 26, !dbg !63
  %1239 = or disjoint i32 %1225, 27, !dbg !63
  %1240 = or disjoint i32 %80, %indvars68, !dbg !63
  %1241 = or disjoint i32 %1225, 33, !dbg !63
  %1242 = or disjoint i32 %1225, 34, !dbg !63
  %1243 = or disjoint i32 %1225, 35, !dbg !63
  %1244 = or disjoint i32 %81, %indvars68, !dbg !63
  %1245 = or disjoint i32 %1225, 41, !dbg !63
  %1246 = or disjoint i32 %1225, 42, !dbg !63
  %1247 = or disjoint i32 %1225, 43, !dbg !63
  %1248 = or disjoint i32 %82, %indvars68, !dbg !63
  %1249 = or disjoint i32 %1225, 49, !dbg !63
  %1250 = or disjoint i32 %1225, 50, !dbg !63
  %1251 = or disjoint i32 %1225, 51, !dbg !63
  %1252 = or disjoint i32 %83, %indvars68, !dbg !63
  %1253 = or disjoint i32 %1225, 57, !dbg !63
  %1254 = or disjoint i32 %1225, 58, !dbg !63
  %1255 = or disjoint i32 %1225, 59, !dbg !63
  %.not = icmp slt i32 %76, %1225, !dbg !64
  %.not10.not = icmp sgt i32 %76, %1225, !dbg !64
  %.not11 = icmp slt i32 %76, %1226, !dbg !64
  %.not12 = icmp slt i32 %76, %1227, !dbg !64
  %.not13 = icmp slt i32 %76, %1228, !dbg !64
  %.not14 = icmp slt i32 %76, %1229, !dbg !64
  %.not15 = icmp slt i32 %76, %1230, !dbg !64
  %.not16 = icmp slt i32 %76, %1231, !dbg !64
  %.not17 = icmp slt i32 %76, %1232, !dbg !64
  %.not18 = icmp slt i32 %76, %1233, !dbg !64
  %.not19 = icmp slt i32 %76, %1234, !dbg !64
  %.not20 = icmp slt i32 %76, %1235, !dbg !64
  %.not21 = icmp slt i32 %76, %1236, !dbg !64
  %.not22 = icmp slt i32 %76, %1237, !dbg !64
  %.not23 = icmp slt i32 %76, %1238, !dbg !64
  %.not24 = icmp slt i32 %76, %1239, !dbg !64
  %.not25 = icmp slt i32 %76, %1240, !dbg !64
  %.not26 = icmp slt i32 %76, %1241, !dbg !64
  %.not27 = icmp slt i32 %76, %1242, !dbg !64
  %.not28 = icmp slt i32 %76, %1243, !dbg !64
  %.not29 = icmp slt i32 %76, %1244, !dbg !64
  %.not30 = icmp slt i32 %76, %1245, !dbg !64
  %.not31 = icmp slt i32 %76, %1246, !dbg !64
  %.not32 = icmp slt i32 %76, %1247, !dbg !64
  %.not33 = icmp slt i32 %76, %1248, !dbg !64
  %.not34 = icmp slt i32 %76, %1249, !dbg !64
  %.not35 = icmp slt i32 %76, %1250, !dbg !64
  %.not36 = icmp slt i32 %76, %1251, !dbg !64
  %.not37 = icmp slt i32 %76, %1252, !dbg !64
  %.not38 = icmp slt i32 %76, %1253, !dbg !64
  %.not39 = icmp slt i32 %76, %1254, !dbg !64
  %.not40 = icmp slt i32 %76, %1255, !dbg !64
  %1256 = fmul float %84, %1185, !dbg !65
  %1257 = fmul float %84, %1186, !dbg !65
  %1258 = fmul float %84, %1187, !dbg !65
  %1259 = fmul float %84, %1188, !dbg !65
  %1260 = fmul float %84, %1189, !dbg !65
  %1261 = fmul float %84, %1190, !dbg !65
  %1262 = fmul float %84, %1191, !dbg !65
  %1263 = fmul float %84, %1192, !dbg !65
  %1264 = fmul float %84, %1193, !dbg !65
  %1265 = fmul float %84, %1194, !dbg !65
  %1266 = fmul float %84, %1195, !dbg !65
  %1267 = fmul float %84, %1196, !dbg !65
  %1268 = fmul float %84, %1197, !dbg !65
  %1269 = fmul float %84, %1198, !dbg !65
  %1270 = fmul float %84, %1199, !dbg !65
  %1271 = fmul float %84, %1200, !dbg !65
  %1272 = fmul float %84, %1209, !dbg !65
  %1273 = fmul float %84, %1210, !dbg !65
  %1274 = fmul float %84, %1211, !dbg !65
  %1275 = fmul float %84, %1212, !dbg !65
  %1276 = fmul float %84, %1213, !dbg !65
  %1277 = fmul float %84, %1214, !dbg !65
  %1278 = fmul float %84, %1215, !dbg !65
  %1279 = fmul float %84, %1216, !dbg !65
  %1280 = fmul float %84, %1217, !dbg !65
  %1281 = fmul float %84, %1218, !dbg !65
  %1282 = fmul float %84, %1219, !dbg !65
  %1283 = fmul float %84, %1220, !dbg !65
  %1284 = fmul float %84, %1221, !dbg !65
  %1285 = fmul float %84, %1222, !dbg !65
  %1286 = fmul float %84, %1223, !dbg !65
  %1287 = fmul float %84, %1224, !dbg !65
  %1288 = select i1 %.not, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1289 = select i1 %.not10.not, float 0.000000e+00, float -1.000000e+06, !dbg !66
  %1290 = select i1 %.not11, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1291 = select i1 %.not12, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1292 = select i1 %.not13, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1293 = select i1 %.not14, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1294 = select i1 %.not15, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1295 = select i1 %.not16, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1296 = select i1 %.not17, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1297 = select i1 %.not18, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1298 = select i1 %.not19, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1299 = select i1 %.not20, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1300 = select i1 %.not21, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1301 = select i1 %.not22, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1302 = select i1 %.not23, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1303 = select i1 %.not24, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1304 = select i1 %.not25, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1305 = select i1 %.not26, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1306 = select i1 %.not27, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1307 = select i1 %.not28, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1308 = select i1 %.not29, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1309 = select i1 %.not30, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1310 = select i1 %.not31, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1311 = select i1 %.not32, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1312 = select i1 %.not33, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1313 = select i1 %.not34, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1314 = select i1 %.not35, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1315 = select i1 %.not36, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1316 = select i1 %.not37, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1317 = select i1 %.not38, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1318 = select i1 %.not39, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1319 = select i1 %.not40, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1320 = fadd float %1288, %1256, !dbg !67
  %1321 = fadd float %1289, %1257, !dbg !67
  %1322 = fadd float %1290, %1258, !dbg !67
  %1323 = fadd float %1291, %1259, !dbg !67
  %1324 = fadd float %1292, %1260, !dbg !67
  %1325 = fadd float %1293, %1261, !dbg !67
  %1326 = fadd float %1294, %1262, !dbg !67
  %1327 = fadd float %1295, %1263, !dbg !67
  %1328 = fadd float %1296, %1264, !dbg !67
  %1329 = fadd float %1297, %1265, !dbg !67
  %1330 = fadd float %1298, %1266, !dbg !67
  %1331 = fadd float %1299, %1267, !dbg !67
  %1332 = fadd float %1300, %1268, !dbg !67
  %1333 = fadd float %1301, %1269, !dbg !67
  %1334 = fadd float %1302, %1270, !dbg !67
  %1335 = fadd float %1303, %1271, !dbg !67
  %1336 = fadd float %1304, %1272, !dbg !67
  %1337 = fadd float %1305, %1273, !dbg !67
  %1338 = fadd float %1306, %1274, !dbg !67
  %1339 = fadd float %1307, %1275, !dbg !67
  %1340 = fadd float %1308, %1276, !dbg !67
  %1341 = fadd float %1309, %1277, !dbg !67
  %1342 = fadd float %1310, %1278, !dbg !67
  %1343 = fadd float %1311, %1279, !dbg !67
  %1344 = fadd float %1312, %1280, !dbg !67
  %1345 = fadd float %1313, %1281, !dbg !67
  %1346 = fadd float %1314, %1282, !dbg !67
  %1347 = fadd float %1315, %1283, !dbg !67
  %1348 = fadd float %1316, %1284, !dbg !67
  %1349 = fadd float %1317, %1285, !dbg !67
  %1350 = fadd float %1318, %1286, !dbg !67
  %1351 = fadd float %1319, %1287, !dbg !67
  %1352 = tail call float @llvm.maxnum.f32(float %1320, float %1321), !dbg !68
  %1353 = tail call float @llvm.maxnum.f32(float %1352, float %1322), !dbg !68
  %1354 = tail call float @llvm.maxnum.f32(float %1353, float %1323), !dbg !68
  %1355 = tail call float @llvm.maxnum.f32(float %1354, float %1324), !dbg !68
  %1356 = tail call float @llvm.maxnum.f32(float %1355, float %1325), !dbg !68
  %1357 = tail call float @llvm.maxnum.f32(float %1356, float %1326), !dbg !68
  %1358 = tail call float @llvm.maxnum.f32(float %1357, float %1327), !dbg !68
  %1359 = tail call float @llvm.maxnum.f32(float %1358, float %1328), !dbg !68
  %1360 = tail call float @llvm.maxnum.f32(float %1359, float %1329), !dbg !68
  %1361 = tail call float @llvm.maxnum.f32(float %1360, float %1330), !dbg !68
  %1362 = tail call float @llvm.maxnum.f32(float %1361, float %1331), !dbg !68
  %1363 = tail call float @llvm.maxnum.f32(float %1362, float %1332), !dbg !68
  %1364 = tail call float @llvm.maxnum.f32(float %1363, float %1333), !dbg !68
  %1365 = tail call float @llvm.maxnum.f32(float %1364, float %1334), !dbg !68
  %1366 = tail call float @llvm.maxnum.f32(float %1365, float %1335), !dbg !68
  %1367 = tail call float @llvm.maxnum.f32(float %1366, float %1336), !dbg !68
  %1368 = tail call float @llvm.maxnum.f32(float %1367, float %1337), !dbg !68
  %1369 = tail call float @llvm.maxnum.f32(float %1368, float %1338), !dbg !68
  %1370 = tail call float @llvm.maxnum.f32(float %1369, float %1339), !dbg !68
  %1371 = tail call float @llvm.maxnum.f32(float %1370, float %1340), !dbg !68
  %1372 = tail call float @llvm.maxnum.f32(float %1371, float %1341), !dbg !68
  %1373 = tail call float @llvm.maxnum.f32(float %1372, float %1342), !dbg !68
  %1374 = tail call float @llvm.maxnum.f32(float %1373, float %1343), !dbg !68
  %1375 = tail call float @llvm.maxnum.f32(float %1374, float %1344), !dbg !68
  %1376 = tail call float @llvm.maxnum.f32(float %1375, float %1345), !dbg !68
  %1377 = tail call float @llvm.maxnum.f32(float %1376, float %1346), !dbg !68
  %1378 = tail call float @llvm.maxnum.f32(float %1377, float %1347), !dbg !68
  %1379 = tail call float @llvm.maxnum.f32(float %1378, float %1348), !dbg !68
  %1380 = tail call float @llvm.maxnum.f32(float %1379, float %1349), !dbg !68
  %1381 = tail call float @llvm.maxnum.f32(float %1380, float %1350), !dbg !68
  %1382 = tail call float @llvm.maxnum.f32(float %1381, float %1351), !dbg !68
  %1383 = bitcast float %1382 to i32, !dbg !69
  %1384 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %990, i32 %1383), !dbg !69
  %1385 = bitcast i32 %1384 to float, !dbg !69
  %1386 = tail call float @llvm.maxnum.f32(float %1382, float %1385), !dbg !68
  %1387 = tail call float @llvm.maxnum.f32(float %1127, float %1386), !dbg !70
  %1388 = fsub float %1320, %1387, !dbg !71
  %1389 = fsub float %1321, %1387, !dbg !71
  %1390 = fsub float %1322, %1387, !dbg !71
  %1391 = fsub float %1323, %1387, !dbg !71
  %1392 = fsub float %1324, %1387, !dbg !71
  %1393 = fsub float %1325, %1387, !dbg !71
  %1394 = fsub float %1326, %1387, !dbg !71
  %1395 = fsub float %1327, %1387, !dbg !71
  %1396 = fsub float %1328, %1387, !dbg !71
  %1397 = fsub float %1329, %1387, !dbg !71
  %1398 = fsub float %1330, %1387, !dbg !71
  %1399 = fsub float %1331, %1387, !dbg !71
  %1400 = fsub float %1332, %1387, !dbg !71
  %1401 = fsub float %1333, %1387, !dbg !71
  %1402 = fsub float %1334, %1387, !dbg !71
  %1403 = fsub float %1335, %1387, !dbg !71
  %1404 = fsub float %1336, %1387, !dbg !71
  %1405 = fsub float %1337, %1387, !dbg !71
  %1406 = fsub float %1338, %1387, !dbg !71
  %1407 = fsub float %1339, %1387, !dbg !71
  %1408 = fsub float %1340, %1387, !dbg !71
  %1409 = fsub float %1341, %1387, !dbg !71
  %1410 = fsub float %1342, %1387, !dbg !71
  %1411 = fsub float %1343, %1387, !dbg !71
  %1412 = fsub float %1344, %1387, !dbg !71
  %1413 = fsub float %1345, %1387, !dbg !71
  %1414 = fsub float %1346, %1387, !dbg !71
  %1415 = fsub float %1347, %1387, !dbg !71
  %1416 = fsub float %1348, %1387, !dbg !71
  %1417 = fsub float %1349, %1387, !dbg !71
  %1418 = fsub float %1350, %1387, !dbg !71
  %1419 = fsub float %1351, %1387, !dbg !71
  %1420 = tail call float @llvm.amdgcn.exp2.f32(float %1388), !dbg !72
  %1421 = tail call float @llvm.amdgcn.exp2.f32(float %1389), !dbg !72
  %1422 = tail call float @llvm.amdgcn.exp2.f32(float %1390), !dbg !72
  %1423 = tail call float @llvm.amdgcn.exp2.f32(float %1391), !dbg !72
  %1424 = tail call float @llvm.amdgcn.exp2.f32(float %1392), !dbg !72
  %1425 = tail call float @llvm.amdgcn.exp2.f32(float %1393), !dbg !72
  %1426 = tail call float @llvm.amdgcn.exp2.f32(float %1394), !dbg !72
  %1427 = tail call float @llvm.amdgcn.exp2.f32(float %1395), !dbg !72
  %1428 = tail call float @llvm.amdgcn.exp2.f32(float %1396), !dbg !72
  %1429 = tail call float @llvm.amdgcn.exp2.f32(float %1397), !dbg !72
  %1430 = tail call float @llvm.amdgcn.exp2.f32(float %1398), !dbg !72
  %1431 = tail call float @llvm.amdgcn.exp2.f32(float %1399), !dbg !72
  %1432 = tail call float @llvm.amdgcn.exp2.f32(float %1400), !dbg !72
  %1433 = tail call float @llvm.amdgcn.exp2.f32(float %1401), !dbg !72
  %1434 = tail call float @llvm.amdgcn.exp2.f32(float %1402), !dbg !72
  %1435 = tail call float @llvm.amdgcn.exp2.f32(float %1403), !dbg !72
  %1436 = tail call float @llvm.amdgcn.exp2.f32(float %1404), !dbg !72
  %1437 = tail call float @llvm.amdgcn.exp2.f32(float %1405), !dbg !72
  %1438 = tail call float @llvm.amdgcn.exp2.f32(float %1406), !dbg !72
  %1439 = tail call float @llvm.amdgcn.exp2.f32(float %1407), !dbg !72
  %1440 = tail call float @llvm.amdgcn.exp2.f32(float %1408), !dbg !72
  %1441 = tail call float @llvm.amdgcn.exp2.f32(float %1409), !dbg !72
  %1442 = tail call float @llvm.amdgcn.exp2.f32(float %1410), !dbg !72
  %1443 = tail call float @llvm.amdgcn.exp2.f32(float %1411), !dbg !72
  %1444 = tail call float @llvm.amdgcn.exp2.f32(float %1412), !dbg !72
  %1445 = tail call float @llvm.amdgcn.exp2.f32(float %1413), !dbg !72
  %1446 = tail call float @llvm.amdgcn.exp2.f32(float %1414), !dbg !72
  %1447 = tail call float @llvm.amdgcn.exp2.f32(float %1415), !dbg !72
  %1448 = tail call float @llvm.amdgcn.exp2.f32(float %1416), !dbg !72
  %1449 = tail call float @llvm.amdgcn.exp2.f32(float %1417), !dbg !72
  %1450 = tail call float @llvm.amdgcn.exp2.f32(float %1418), !dbg !72
  %1451 = tail call float @llvm.amdgcn.exp2.f32(float %1419), !dbg !72
  %1452 = fadd float %1420, %1421, !dbg !73
  %1453 = fadd float %1422, %1452, !dbg !73
  %1454 = fadd float %1423, %1453, !dbg !73
  %1455 = fadd float %1424, %1454, !dbg !73
  %1456 = fadd float %1425, %1455, !dbg !73
  %1457 = fadd float %1426, %1456, !dbg !73
  %1458 = fadd float %1427, %1457, !dbg !73
  %1459 = fadd float %1428, %1458, !dbg !73
  %1460 = fadd float %1429, %1459, !dbg !73
  %1461 = fadd float %1430, %1460, !dbg !73
  %1462 = fadd float %1431, %1461, !dbg !73
  %1463 = fadd float %1432, %1462, !dbg !73
  %1464 = fadd float %1433, %1463, !dbg !73
  %1465 = fadd float %1434, %1464, !dbg !73
  %1466 = fadd float %1435, %1465, !dbg !73
  %1467 = fadd float %1436, %1466, !dbg !73
  %1468 = fadd float %1437, %1467, !dbg !73
  %1469 = fadd float %1438, %1468, !dbg !73
  %1470 = fadd float %1439, %1469, !dbg !73
  %1471 = fadd float %1440, %1470, !dbg !73
  %1472 = fadd float %1441, %1471, !dbg !73
  %1473 = fadd float %1442, %1472, !dbg !73
  %1474 = fadd float %1443, %1473, !dbg !73
  %1475 = fadd float %1444, %1474, !dbg !73
  %1476 = fadd float %1445, %1475, !dbg !73
  %1477 = fadd float %1446, %1476, !dbg !73
  %1478 = fadd float %1447, %1477, !dbg !73
  %1479 = fadd float %1448, %1478, !dbg !73
  %1480 = fadd float %1449, %1479, !dbg !73
  %1481 = fadd float %1450, %1480, !dbg !73
  %1482 = fadd float %1451, %1481, !dbg !73
  %1483 = bitcast float %1482 to i32, !dbg !74
  %1484 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %990, i32 %1483), !dbg !74
  %1485 = bitcast i32 %1484 to float, !dbg !74
  %1486 = fadd float %1482, %1485, !dbg !73
  %1487 = fsub float %1127, %1387, !dbg !75
  %1488 = tail call float @llvm.amdgcn.exp2.f32(float %1487), !dbg !76
  %1489 = fmul float %1128, %1488, !dbg !77
  %1490 = fadd float %1489, %1486, !dbg !78
  %1491 = insertelement <2 x float> poison, float %1488, i64 0, !dbg !79
  %1492 = shufflevector <2 x float> %1491, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %1493 = fmul <2 x float> %1137, %1492, !dbg !79
  %1494 = fmul <2 x float> %1138, %1492, !dbg !79
  %1495 = fmul <2 x float> %1139, %1492, !dbg !79
  %1496 = fmul <2 x float> %1140, %1492, !dbg !79
  %1497 = fmul <2 x float> %1141, %1492, !dbg !79
  %1498 = fmul <2 x float> %1142, %1492, !dbg !79
  %1499 = fmul <2 x float> %1143, %1492, !dbg !79
  %1500 = fmul <2 x float> %1144, %1492, !dbg !79
  %1501 = fmul <2 x float> %1129, %1492, !dbg !79
  %1502 = fmul <2 x float> %1130, %1492, !dbg !79
  %1503 = fmul <2 x float> %1131, %1492, !dbg !79
  %1504 = fmul <2 x float> %1132, %1492, !dbg !79
  %1505 = fmul <2 x float> %1133, %1492, !dbg !79
  %1506 = fmul <2 x float> %1134, %1492, !dbg !79
  %1507 = fmul <2 x float> %1135, %1492, !dbg !79
  %1508 = fmul <2 x float> %1136, %1492, !dbg !79
  %1509 = fptrunc float %1420 to half, !dbg !80
  %1510 = fptrunc float %1421 to half, !dbg !80
  %1511 = fptrunc float %1422 to half, !dbg !80
  %1512 = fptrunc float %1423 to half, !dbg !80
  %1513 = fptrunc float %1424 to half, !dbg !80
  %1514 = fptrunc float %1425 to half, !dbg !80
  %1515 = fptrunc float %1426 to half, !dbg !80
  %1516 = fptrunc float %1427 to half, !dbg !80
  %1517 = fptrunc float %1428 to half, !dbg !80
  %1518 = fptrunc float %1429 to half, !dbg !80
  %1519 = fptrunc float %1430 to half, !dbg !80
  %1520 = fptrunc float %1431 to half, !dbg !80
  %1521 = fptrunc float %1432 to half, !dbg !80
  %1522 = fptrunc float %1433 to half, !dbg !80
  %1523 = fptrunc float %1434 to half, !dbg !80
  %1524 = fptrunc float %1435 to half, !dbg !80
  %1525 = fptrunc float %1436 to half, !dbg !80
  %1526 = fptrunc float %1437 to half, !dbg !80
  %1527 = fptrunc float %1438 to half, !dbg !80
  %1528 = fptrunc float %1439 to half, !dbg !80
  %1529 = fptrunc float %1440 to half, !dbg !80
  %1530 = fptrunc float %1441 to half, !dbg !80
  %1531 = fptrunc float %1442 to half, !dbg !80
  %1532 = fptrunc float %1443 to half, !dbg !80
  %1533 = fptrunc float %1444 to half, !dbg !80
  %1534 = fptrunc float %1445 to half, !dbg !80
  %1535 = fptrunc float %1446 to half, !dbg !80
  %1536 = fptrunc float %1447 to half, !dbg !80
  %1537 = fptrunc float %1448 to half, !dbg !80
  %1538 = fptrunc float %1449 to half, !dbg !80
  %1539 = fptrunc float %1450 to half, !dbg !80
  %1540 = fptrunc float %1451 to half, !dbg !80
  fence syncscope("workgroup") release, !dbg !61
  tail call void @llvm.amdgcn.s.barrier(), !dbg !61
  fence syncscope("workgroup") acquire, !dbg !61
  store <8 x half> %unmaskedload8, ptr addrspace(3) %992, align 16, !dbg !61
  store <8 x half> %unmaskedload9, ptr addrspace(3) %994, align 16, !dbg !61
  fence syncscope("workgroup") release, !dbg !61
  tail call void @llvm.amdgcn.s.barrier(), !dbg !61
  fence syncscope("workgroup") acquire, !dbg !61
  %1541 = load <1 x half>, ptr addrspace(3) %1061, align 2, !dbg !61
  %1542 = load <1 x half>, ptr addrspace(3) %1062, align 2, !dbg !61
  %1543 = load <1 x half>, ptr addrspace(3) %1063, align 2, !dbg !61
  %1544 = shufflevector <1 x half> %1543, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1545 = load <1 x half>, ptr addrspace(3) %1064, align 2, !dbg !61
  %1546 = shufflevector <1 x half> %1545, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1547 = load <1 x half>, ptr addrspace(3) %1065, align 2, !dbg !61
  %1548 = load <1 x half>, ptr addrspace(3) %1066, align 2, !dbg !61
  %1549 = load <1 x half>, ptr addrspace(3) %1067, align 2, !dbg !61
  %1550 = shufflevector <1 x half> %1549, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1551 = load <1 x half>, ptr addrspace(3) %1068, align 2, !dbg !61
  %1552 = shufflevector <1 x half> %1551, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1553 = load <1 x half>, ptr addrspace(3) %1069, align 2, !dbg !61
  %1554 = load <1 x half>, ptr addrspace(3) %1070, align 2, !dbg !61
  %1555 = load <1 x half>, ptr addrspace(3) %1071, align 2, !dbg !61
  %1556 = shufflevector <1 x half> %1555, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1557 = load <1 x half>, ptr addrspace(3) %1072, align 2, !dbg !61
  %1558 = shufflevector <1 x half> %1557, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1559 = load <1 x half>, ptr addrspace(3) %1073, align 2, !dbg !61
  %1560 = load <1 x half>, ptr addrspace(3) %1074, align 2, !dbg !61
  %1561 = load <1 x half>, ptr addrspace(3) %1075, align 2, !dbg !61
  %1562 = shufflevector <1 x half> %1561, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1563 = load <1 x half>, ptr addrspace(3) %1076, align 2, !dbg !61
  %1564 = shufflevector <1 x half> %1563, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1565 = load <1 x half>, ptr addrspace(3) %1077, align 2, !dbg !61
  %1566 = load <1 x half>, ptr addrspace(3) %1078, align 2, !dbg !61
  %1567 = load <1 x half>, ptr addrspace(3) %1079, align 2, !dbg !61
  %1568 = shufflevector <1 x half> %1567, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1569 = load <1 x half>, ptr addrspace(3) %1080, align 2, !dbg !61
  %1570 = shufflevector <1 x half> %1569, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1571 = load <1 x half>, ptr addrspace(3) %1081, align 2, !dbg !61
  %1572 = load <1 x half>, ptr addrspace(3) %1082, align 2, !dbg !61
  %1573 = load <1 x half>, ptr addrspace(3) %1083, align 2, !dbg !61
  %1574 = shufflevector <1 x half> %1573, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1575 = load <1 x half>, ptr addrspace(3) %1084, align 2, !dbg !61
  %1576 = shufflevector <1 x half> %1575, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1577 = load <1 x half>, ptr addrspace(3) %1085, align 2, !dbg !61
  %1578 = load <1 x half>, ptr addrspace(3) %1086, align 2, !dbg !61
  %1579 = load <1 x half>, ptr addrspace(3) %1087, align 2, !dbg !61
  %1580 = shufflevector <1 x half> %1579, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1581 = load <1 x half>, ptr addrspace(3) %1088, align 2, !dbg !61
  %1582 = shufflevector <1 x half> %1581, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1583 = load <1 x half>, ptr addrspace(3) %1089, align 2, !dbg !61
  %1584 = load <1 x half>, ptr addrspace(3) %1090, align 2, !dbg !61
  %1585 = load <1 x half>, ptr addrspace(3) %1091, align 2, !dbg !61
  %1586 = shufflevector <1 x half> %1585, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1587 = load <1 x half>, ptr addrspace(3) %1092, align 2, !dbg !61
  %1588 = shufflevector <1 x half> %1587, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1589 = load <1 x half>, ptr addrspace(3) %1093, align 2, !dbg !61
  %1590 = load <1 x half>, ptr addrspace(3) %1094, align 2, !dbg !61
  %1591 = load <1 x half>, ptr addrspace(3) %1095, align 2, !dbg !61
  %1592 = shufflevector <1 x half> %1591, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1593 = load <1 x half>, ptr addrspace(3) %1096, align 2, !dbg !61
  %1594 = shufflevector <1 x half> %1593, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1595 = load <1 x half>, ptr addrspace(3) %1097, align 2, !dbg !61
  %1596 = load <1 x half>, ptr addrspace(3) %1098, align 2, !dbg !61
  %1597 = load <1 x half>, ptr addrspace(3) %1099, align 2, !dbg !61
  %1598 = shufflevector <1 x half> %1597, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1599 = load <1 x half>, ptr addrspace(3) %1100, align 2, !dbg !61
  %1600 = shufflevector <1 x half> %1599, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1601 = load <1 x half>, ptr addrspace(3) %1101, align 2, !dbg !61
  %1602 = load <1 x half>, ptr addrspace(3) %1102, align 2, !dbg !61
  %1603 = load <1 x half>, ptr addrspace(3) %1103, align 2, !dbg !61
  %1604 = shufflevector <1 x half> %1603, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1605 = load <1 x half>, ptr addrspace(3) %1104, align 2, !dbg !61
  %1606 = shufflevector <1 x half> %1605, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1607 = load <1 x half>, ptr addrspace(3) %1105, align 2, !dbg !61
  %1608 = load <1 x half>, ptr addrspace(3) %1106, align 2, !dbg !61
  %1609 = load <1 x half>, ptr addrspace(3) %1107, align 2, !dbg !61
  %1610 = shufflevector <1 x half> %1609, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1611 = load <1 x half>, ptr addrspace(3) %1108, align 2, !dbg !61
  %1612 = shufflevector <1 x half> %1611, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1613 = load <1 x half>, ptr addrspace(3) %1109, align 2, !dbg !61
  %1614 = load <1 x half>, ptr addrspace(3) %1110, align 2, !dbg !61
  %1615 = load <1 x half>, ptr addrspace(3) %1111, align 2, !dbg !61
  %1616 = shufflevector <1 x half> %1615, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1617 = load <1 x half>, ptr addrspace(3) %1112, align 2, !dbg !61
  %1618 = shufflevector <1 x half> %1617, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1619 = load <1 x half>, ptr addrspace(3) %1113, align 2, !dbg !61
  %1620 = load <1 x half>, ptr addrspace(3) %1114, align 2, !dbg !61
  %1621 = load <1 x half>, ptr addrspace(3) %1115, align 2, !dbg !61
  %1622 = shufflevector <1 x half> %1621, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1623 = load <1 x half>, ptr addrspace(3) %1116, align 2, !dbg !61
  %1624 = shufflevector <1 x half> %1623, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1625 = load <1 x half>, ptr addrspace(3) %1117, align 2, !dbg !61
  %1626 = load <1 x half>, ptr addrspace(3) %1118, align 2, !dbg !61
  %1627 = load <1 x half>, ptr addrspace(3) %1119, align 2, !dbg !61
  %1628 = shufflevector <1 x half> %1627, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1629 = load <1 x half>, ptr addrspace(3) %1120, align 2, !dbg !61
  %1630 = shufflevector <1 x half> %1629, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1631 = load <1 x half>, ptr addrspace(3) %1121, align 2, !dbg !61
  %1632 = load <1 x half>, ptr addrspace(3) %1122, align 2, !dbg !61
  %1633 = load <1 x half>, ptr addrspace(3) %1123, align 2, !dbg !61
  %1634 = shufflevector <1 x half> %1633, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1635 = load <1 x half>, ptr addrspace(3) %1124, align 2, !dbg !61
  %1636 = shufflevector <1 x half> %1635, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1637 = insertelement <4 x half> poison, half %1509, i64 0, !dbg !81
  %1638 = insertelement <4 x half> %1637, half %1510, i64 1, !dbg !81
  %1639 = insertelement <4 x half> %1638, half %1511, i64 2, !dbg !81
  %1640 = insertelement <4 x half> %1639, half %1512, i64 3, !dbg !81
  %1641 = insertelement <4 x half> poison, half %1513, i64 0, !dbg !81
  %1642 = insertelement <4 x half> %1641, half %1514, i64 1, !dbg !81
  %1643 = insertelement <4 x half> %1642, half %1515, i64 2, !dbg !81
  %1644 = insertelement <4 x half> %1643, half %1516, i64 3, !dbg !81
  %1645 = insertelement <4 x half> poison, half %1517, i64 0, !dbg !81
  %1646 = insertelement <4 x half> %1645, half %1518, i64 1, !dbg !81
  %1647 = insertelement <4 x half> %1646, half %1519, i64 2, !dbg !81
  %1648 = insertelement <4 x half> %1647, half %1520, i64 3, !dbg !81
  %1649 = insertelement <4 x half> poison, half %1521, i64 0, !dbg !81
  %1650 = insertelement <4 x half> %1649, half %1522, i64 1, !dbg !81
  %1651 = insertelement <4 x half> %1650, half %1523, i64 2, !dbg !81
  %1652 = insertelement <4 x half> %1651, half %1524, i64 3, !dbg !81
  %1653 = insertelement <4 x half> poison, half %1525, i64 0, !dbg !81
  %1654 = insertelement <4 x half> %1653, half %1526, i64 1, !dbg !81
  %1655 = insertelement <4 x half> %1654, half %1527, i64 2, !dbg !81
  %1656 = insertelement <4 x half> %1655, half %1528, i64 3, !dbg !81
  %1657 = insertelement <4 x half> poison, half %1529, i64 0, !dbg !81
  %1658 = insertelement <4 x half> %1657, half %1530, i64 1, !dbg !81
  %1659 = insertelement <4 x half> %1658, half %1531, i64 2, !dbg !81
  %1660 = insertelement <4 x half> %1659, half %1532, i64 3, !dbg !81
  %1661 = insertelement <4 x half> poison, half %1533, i64 0, !dbg !81
  %1662 = insertelement <4 x half> %1661, half %1534, i64 1, !dbg !81
  %1663 = insertelement <4 x half> %1662, half %1535, i64 2, !dbg !81
  %1664 = insertelement <4 x half> %1663, half %1536, i64 3, !dbg !81
  %1665 = insertelement <4 x half> poison, half %1537, i64 0, !dbg !81
  %1666 = insertelement <4 x half> %1665, half %1538, i64 1, !dbg !81
  %1667 = insertelement <4 x half> %1666, half %1539, i64 2, !dbg !81
  %1668 = insertelement <4 x half> %1667, half %1540, i64 3, !dbg !81
  %1669 = shufflevector <1 x half> %1541, <1 x half> %1542, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1670 = shufflevector <4 x half> %1669, <4 x half> %1544, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1671 = shufflevector <4 x half> %1670, <4 x half> %1546, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1672 = shufflevector <1 x half> %1547, <1 x half> %1548, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1673 = shufflevector <4 x half> %1672, <4 x half> %1550, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1674 = shufflevector <4 x half> %1673, <4 x half> %1552, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1675 = shufflevector <1 x half> %1553, <1 x half> %1554, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1676 = shufflevector <4 x half> %1675, <4 x half> %1556, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1677 = shufflevector <4 x half> %1676, <4 x half> %1558, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1678 = shufflevector <1 x half> %1559, <1 x half> %1560, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1679 = shufflevector <4 x half> %1678, <4 x half> %1562, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1680 = shufflevector <4 x half> %1679, <4 x half> %1564, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1681 = shufflevector <1 x half> %1565, <1 x half> %1566, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1682 = shufflevector <4 x half> %1681, <4 x half> %1568, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1683 = shufflevector <4 x half> %1682, <4 x half> %1570, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1684 = shufflevector <1 x half> %1571, <1 x half> %1572, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1685 = shufflevector <4 x half> %1684, <4 x half> %1574, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1686 = shufflevector <4 x half> %1685, <4 x half> %1576, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1687 = shufflevector <1 x half> %1577, <1 x half> %1578, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1688 = shufflevector <4 x half> %1687, <4 x half> %1580, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1689 = shufflevector <4 x half> %1688, <4 x half> %1582, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1690 = shufflevector <1 x half> %1583, <1 x half> %1584, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1691 = shufflevector <4 x half> %1690, <4 x half> %1586, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1692 = shufflevector <4 x half> %1691, <4 x half> %1588, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1693 = shufflevector <1 x half> %1589, <1 x half> %1590, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1694 = shufflevector <4 x half> %1693, <4 x half> %1592, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1695 = shufflevector <4 x half> %1694, <4 x half> %1594, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1696 = shufflevector <1 x half> %1595, <1 x half> %1596, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1697 = shufflevector <4 x half> %1696, <4 x half> %1598, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1698 = shufflevector <4 x half> %1697, <4 x half> %1600, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1699 = shufflevector <1 x half> %1601, <1 x half> %1602, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1700 = shufflevector <4 x half> %1699, <4 x half> %1604, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1701 = shufflevector <4 x half> %1700, <4 x half> %1606, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1702 = shufflevector <1 x half> %1607, <1 x half> %1608, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1703 = shufflevector <4 x half> %1702, <4 x half> %1610, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1704 = shufflevector <4 x half> %1703, <4 x half> %1612, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1705 = shufflevector <1 x half> %1613, <1 x half> %1614, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1706 = shufflevector <4 x half> %1705, <4 x half> %1616, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1707 = shufflevector <4 x half> %1706, <4 x half> %1618, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1708 = shufflevector <1 x half> %1619, <1 x half> %1620, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1709 = shufflevector <4 x half> %1708, <4 x half> %1622, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1710 = shufflevector <4 x half> %1709, <4 x half> %1624, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1711 = shufflevector <1 x half> %1625, <1 x half> %1626, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1712 = shufflevector <4 x half> %1711, <4 x half> %1628, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1713 = shufflevector <4 x half> %1712, <4 x half> %1630, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1714 = shufflevector <1 x half> %1631, <1 x half> %1632, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1715 = shufflevector <4 x half> %1714, <4 x half> %1634, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1716 = shufflevector <4 x half> %1715, <4 x half> %1636, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1717 = shufflevector <2 x float> %1493, <2 x float> %1494, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1718 = shufflevector <2 x float> %1495, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1719 = shufflevector <16 x float> %1717, <16 x float> %1718, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1720 = shufflevector <2 x float> %1496, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1721 = shufflevector <16 x float> %1719, <16 x float> %1720, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1722 = shufflevector <2 x float> %1497, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1723 = shufflevector <16 x float> %1721, <16 x float> %1722, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1724 = shufflevector <2 x float> %1498, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1725 = shufflevector <16 x float> %1723, <16 x float> %1724, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1726 = shufflevector <2 x float> %1499, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1727 = shufflevector <16 x float> %1725, <16 x float> %1726, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !81
  %1728 = shufflevector <2 x float> %1500, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1729 = shufflevector <16 x float> %1727, <16 x float> %1728, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !81
  %1730 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1671, <4 x half> %1640, <16 x float> %1729, i32 0, i32 0, i32 0), !dbg !81
  %1731 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1674, <4 x half> %1644, <16 x float> %1730, i32 0, i32 0, i32 0), !dbg !81
  %1732 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1677, <4 x half> %1648, <16 x float> %1731, i32 0, i32 0, i32 0), !dbg !81
  %1733 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1680, <4 x half> %1652, <16 x float> %1732, i32 0, i32 0, i32 0), !dbg !81
  %1734 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1683, <4 x half> %1656, <16 x float> %1733, i32 0, i32 0, i32 0), !dbg !81
  %1735 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1686, <4 x half> %1660, <16 x float> %1734, i32 0, i32 0, i32 0), !dbg !81
  %1736 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1689, <4 x half> %1664, <16 x float> %1735, i32 0, i32 0, i32 0), !dbg !81
  %1737 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1692, <4 x half> %1668, <16 x float> %1736, i32 0, i32 0, i32 0), !dbg !81
  %1738 = shufflevector <2 x float> %1501, <2 x float> %1502, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1739 = shufflevector <2 x float> %1503, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1740 = shufflevector <16 x float> %1738, <16 x float> %1739, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1741 = shufflevector <2 x float> %1504, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1742 = shufflevector <16 x float> %1740, <16 x float> %1741, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1743 = shufflevector <2 x float> %1505, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1744 = shufflevector <16 x float> %1742, <16 x float> %1743, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1745 = shufflevector <2 x float> %1506, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1746 = shufflevector <16 x float> %1744, <16 x float> %1745, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1747 = shufflevector <2 x float> %1507, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1748 = shufflevector <16 x float> %1746, <16 x float> %1747, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !81
  %1749 = shufflevector <2 x float> %1508, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1750 = shufflevector <16 x float> %1748, <16 x float> %1749, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !81
  %1751 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1695, <4 x half> %1640, <16 x float> %1750, i32 0, i32 0, i32 0), !dbg !81
  %1752 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1698, <4 x half> %1644, <16 x float> %1751, i32 0, i32 0, i32 0), !dbg !81
  %1753 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1701, <4 x half> %1648, <16 x float> %1752, i32 0, i32 0, i32 0), !dbg !81
  %1754 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1704, <4 x half> %1652, <16 x float> %1753, i32 0, i32 0, i32 0), !dbg !81
  %1755 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1707, <4 x half> %1656, <16 x float> %1754, i32 0, i32 0, i32 0), !dbg !81
  %1756 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1710, <4 x half> %1660, <16 x float> %1755, i32 0, i32 0, i32 0), !dbg !81
  %1757 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1713, <4 x half> %1664, <16 x float> %1756, i32 0, i32 0, i32 0), !dbg !81
  %1758 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1716, <4 x half> %1668, <16 x float> %1757, i32 0, i32 0, i32 0), !dbg !81
  %1759 = add nsw i64 %1126, 64, !dbg !82
  %indvars67 = trunc i64 %1759 to i32, !dbg !59
  %1760 = icmp sgt i32 %918, %indvars67, !dbg !59
  %1761 = shufflevector <16 x float> %1758, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1762 = shufflevector <16 x float> %1758, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1763 = shufflevector <16 x float> %1758, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1764 = shufflevector <16 x float> %1758, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1765 = shufflevector <16 x float> %1758, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1766 = shufflevector <16 x float> %1758, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1767 = shufflevector <16 x float> %1758, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1768 = shufflevector <16 x float> %1758, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1769 = shufflevector <16 x float> %1737, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1770 = shufflevector <16 x float> %1737, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1771 = shufflevector <16 x float> %1737, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1772 = shufflevector <16 x float> %1737, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1773 = shufflevector <16 x float> %1737, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1774 = shufflevector <16 x float> %1737, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1775 = shufflevector <16 x float> %1737, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1776 = shufflevector <16 x float> %1737, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %1760, label %1125, label %._crit_edge55.loopexit, !dbg !59

._crit_edge55.loopexit:                           ; preds = %1125
  %1777 = extractelement <16 x float> %1758, i64 15, !dbg !81
  %1778 = extractelement <16 x float> %1758, i64 14, !dbg !81
  %1779 = extractelement <16 x float> %1758, i64 13, !dbg !81
  %1780 = extractelement <16 x float> %1758, i64 12, !dbg !81
  %1781 = extractelement <16 x float> %1758, i64 11, !dbg !81
  %1782 = extractelement <16 x float> %1758, i64 10, !dbg !81
  %1783 = extractelement <16 x float> %1758, i64 9, !dbg !81
  %1784 = extractelement <16 x float> %1758, i64 8, !dbg !81
  %1785 = extractelement <16 x float> %1758, i64 7, !dbg !81
  %1786 = extractelement <16 x float> %1758, i64 6, !dbg !81
  %1787 = extractelement <16 x float> %1758, i64 5, !dbg !81
  %1788 = extractelement <16 x float> %1758, i64 4, !dbg !81
  %1789 = extractelement <16 x float> %1758, i64 3, !dbg !81
  %1790 = extractelement <16 x float> %1758, i64 2, !dbg !81
  %1791 = extractelement <16 x float> %1758, i64 1, !dbg !81
  %1792 = extractelement <16 x float> %1758, i64 0, !dbg !81
  %1793 = extractelement <16 x float> %1737, i64 15, !dbg !81
  %1794 = extractelement <16 x float> %1737, i64 14, !dbg !81
  %1795 = extractelement <16 x float> %1737, i64 13, !dbg !81
  %1796 = extractelement <16 x float> %1737, i64 12, !dbg !81
  %1797 = extractelement <16 x float> %1737, i64 11, !dbg !81
  %1798 = extractelement <16 x float> %1737, i64 10, !dbg !81
  %1799 = extractelement <16 x float> %1737, i64 9, !dbg !81
  %1800 = extractelement <16 x float> %1737, i64 8, !dbg !81
  %1801 = extractelement <16 x float> %1737, i64 7, !dbg !81
  %1802 = extractelement <16 x float> %1737, i64 6, !dbg !81
  %1803 = extractelement <16 x float> %1737, i64 5, !dbg !81
  %1804 = extractelement <16 x float> %1737, i64 4, !dbg !81
  %1805 = extractelement <16 x float> %1737, i64 3, !dbg !81
  %1806 = extractelement <16 x float> %1737, i64 2, !dbg !81
  %1807 = extractelement <16 x float> %1737, i64 1, !dbg !81
  %1808 = extractelement <16 x float> %1737, i64 0, !dbg !81
  br label %._crit_edge55, !dbg !23

._crit_edge55:                                    ; preds = %._crit_edge55.loopexit, %._crit_edge
  %.lcssa47 = phi float [ %.lcssa50, %._crit_edge ], [ %1490, %._crit_edge55.loopexit ], !dbg !33
  %1809 = phi float [ %935, %._crit_edge ], [ %1808, %._crit_edge55.loopexit ], !dbg !33
  %1810 = phi float [ %936, %._crit_edge ], [ %1807, %._crit_edge55.loopexit ], !dbg !33
  %1811 = phi float [ %937, %._crit_edge ], [ %1806, %._crit_edge55.loopexit ], !dbg !33
  %1812 = phi float [ %938, %._crit_edge ], [ %1805, %._crit_edge55.loopexit ], !dbg !33
  %1813 = phi float [ %939, %._crit_edge ], [ %1804, %._crit_edge55.loopexit ], !dbg !33
  %1814 = phi float [ %940, %._crit_edge ], [ %1803, %._crit_edge55.loopexit ], !dbg !33
  %1815 = phi float [ %941, %._crit_edge ], [ %1802, %._crit_edge55.loopexit ], !dbg !33
  %1816 = phi float [ %942, %._crit_edge ], [ %1801, %._crit_edge55.loopexit ], !dbg !33
  %1817 = phi float [ %943, %._crit_edge ], [ %1800, %._crit_edge55.loopexit ], !dbg !33
  %1818 = phi float [ %944, %._crit_edge ], [ %1799, %._crit_edge55.loopexit ], !dbg !33
  %1819 = phi float [ %945, %._crit_edge ], [ %1798, %._crit_edge55.loopexit ], !dbg !33
  %1820 = phi float [ %946, %._crit_edge ], [ %1797, %._crit_edge55.loopexit ], !dbg !33
  %1821 = phi float [ %947, %._crit_edge ], [ %1796, %._crit_edge55.loopexit ], !dbg !33
  %1822 = phi float [ %948, %._crit_edge ], [ %1795, %._crit_edge55.loopexit ], !dbg !33
  %1823 = phi float [ %949, %._crit_edge ], [ %1794, %._crit_edge55.loopexit ], !dbg !33
  %1824 = phi float [ %950, %._crit_edge ], [ %1793, %._crit_edge55.loopexit ], !dbg !33
  %1825 = phi float [ %919, %._crit_edge ], [ %1792, %._crit_edge55.loopexit ], !dbg !33
  %1826 = phi float [ %920, %._crit_edge ], [ %1791, %._crit_edge55.loopexit ], !dbg !33
  %1827 = phi float [ %921, %._crit_edge ], [ %1790, %._crit_edge55.loopexit ], !dbg !33
  %1828 = phi float [ %922, %._crit_edge ], [ %1789, %._crit_edge55.loopexit ], !dbg !33
  %1829 = phi float [ %923, %._crit_edge ], [ %1788, %._crit_edge55.loopexit ], !dbg !33
  %1830 = phi float [ %924, %._crit_edge ], [ %1787, %._crit_edge55.loopexit ], !dbg !33
  %1831 = phi float [ %925, %._crit_edge ], [ %1786, %._crit_edge55.loopexit ], !dbg !33
  %1832 = phi float [ %926, %._crit_edge ], [ %1785, %._crit_edge55.loopexit ], !dbg !33
  %1833 = phi float [ %927, %._crit_edge ], [ %1784, %._crit_edge55.loopexit ], !dbg !33
  %1834 = phi float [ %928, %._crit_edge ], [ %1783, %._crit_edge55.loopexit ], !dbg !33
  %1835 = phi float [ %929, %._crit_edge ], [ %1782, %._crit_edge55.loopexit ], !dbg !33
  %1836 = phi float [ %930, %._crit_edge ], [ %1781, %._crit_edge55.loopexit ], !dbg !33
  %1837 = phi float [ %931, %._crit_edge ], [ %1780, %._crit_edge55.loopexit ], !dbg !33
  %1838 = phi float [ %932, %._crit_edge ], [ %1779, %._crit_edge55.loopexit ], !dbg !33
  %1839 = phi float [ %933, %._crit_edge ], [ %1778, %._crit_edge55.loopexit ], !dbg !33
  %1840 = phi float [ %934, %._crit_edge ], [ %1777, %._crit_edge55.loopexit ], !dbg !33
  %.lcssa = phi float [ %.lcssa48, %._crit_edge ], [ %1387, %._crit_edge55.loopexit ], !dbg !33
  %1841 = zext nneg i32 %83 to i64, !dbg !23
  %1842 = zext nneg i32 %82 to i64, !dbg !23
  %1843 = zext nneg i32 %81 to i64, !dbg !23
  %1844 = zext nneg i32 %80 to i64, !dbg !23
  %1845 = zext nneg i32 %79 to i64, !dbg !23
  %1846 = zext nneg i32 %78 to i64, !dbg !23
  %1847 = zext nneg i32 %77 to i64, !dbg !23
  %1848 = zext nneg i32 %38 to i64, !dbg !23
  %1849 = zext nneg i32 %75 to i64, !dbg !23
  %1850 = and i32 %35, 127, !dbg !22
  %1851 = sext i32 %17 to i64, !dbg !83
  %1852 = getelementptr half, ptr addrspace(1) %5, i64 %30, !dbg !84
  %1853 = tail call noundef float @llvm.log2.f32(float %.lcssa47), !dbg !85
  %1854 = fadd float %1853, %.lcssa, !dbg !86
  %1855 = fdiv float %1809, %.lcssa47, !dbg !87
  %1856 = fdiv float %1810, %.lcssa47, !dbg !87
  %1857 = fdiv float %1811, %.lcssa47, !dbg !87
  %1858 = fdiv float %1812, %.lcssa47, !dbg !87
  %1859 = fdiv float %1813, %.lcssa47, !dbg !87
  %1860 = fdiv float %1814, %.lcssa47, !dbg !87
  %1861 = fdiv float %1815, %.lcssa47, !dbg !87
  %1862 = fdiv float %1816, %.lcssa47, !dbg !87
  %1863 = fdiv float %1817, %.lcssa47, !dbg !87
  %1864 = fdiv float %1818, %.lcssa47, !dbg !87
  %1865 = fdiv float %1819, %.lcssa47, !dbg !87
  %1866 = fdiv float %1820, %.lcssa47, !dbg !87
  %1867 = fdiv float %1821, %.lcssa47, !dbg !87
  %1868 = fdiv float %1822, %.lcssa47, !dbg !87
  %1869 = fdiv float %1823, %.lcssa47, !dbg !87
  %1870 = fdiv float %1824, %.lcssa47, !dbg !87
  %1871 = fdiv float %1825, %.lcssa47, !dbg !87
  %1872 = fdiv float %1826, %.lcssa47, !dbg !87
  %1873 = fdiv float %1827, %.lcssa47, !dbg !87
  %1874 = fdiv float %1828, %.lcssa47, !dbg !87
  %1875 = fdiv float %1829, %.lcssa47, !dbg !87
  %1876 = fdiv float %1830, %.lcssa47, !dbg !87
  %1877 = fdiv float %1831, %.lcssa47, !dbg !87
  %1878 = fdiv float %1832, %.lcssa47, !dbg !87
  %1879 = fdiv float %1833, %.lcssa47, !dbg !87
  %1880 = fdiv float %1834, %.lcssa47, !dbg !87
  %1881 = fdiv float %1835, %.lcssa47, !dbg !87
  %1882 = fdiv float %1836, %.lcssa47, !dbg !87
  %1883 = fdiv float %1837, %.lcssa47, !dbg !87
  %1884 = fdiv float %1838, %.lcssa47, !dbg !87
  %1885 = fdiv float %1839, %.lcssa47, !dbg !87
  %1886 = fdiv float %1840, %.lcssa47, !dbg !87
  %1887 = mul i32 %19, %21, !dbg !88
  %1888 = sext i32 %1887 to i64, !dbg !89
  %1889 = getelementptr float, ptr addrspace(1) %4, i64 %1888, !dbg !89
  %1890 = getelementptr float, ptr addrspace(1) %1889, i64 %34, !dbg !90
  fence syncscope("workgroup") release, !dbg !91
  tail call void @llvm.amdgcn.s.barrier(), !dbg !91
  fence syncscope("workgroup") acquire, !dbg !91
  %1891 = getelementptr float, ptr addrspace(3) @global_smem, i32 %75, !dbg !91
  %1892 = insertelement <1 x float> poison, float %1854, i64 0, !dbg !91
  store <1 x float> %1892, ptr addrspace(3) %1891, align 4, !dbg !91
  fence syncscope("workgroup") release, !dbg !91
  tail call void @llvm.amdgcn.s.barrier(), !dbg !91
  fence syncscope("workgroup") acquire, !dbg !91
  %1893 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1850, !dbg !91
  %1894 = load <1 x float>, ptr addrspace(3) %1893, align 4, !dbg !91
  %1895 = zext nneg i32 %1850 to i64, !dbg !91
  %1896 = getelementptr float, ptr addrspace(1) %1890, i64 %1895, !dbg !91
  %urem = and i32 %35, 128, !dbg !91
  %1897 = icmp eq i32 %urem, 0, !dbg !91
  %1898 = insertelement <1 x i1> poison, i1 %1897, i64 0, !dbg !91
  tail call void @llvm.masked.store.v1f32.p1(<1 x float> %1894, ptr addrspace(1) %1896, i32 16, <1 x i1> %1898), !dbg !91
  %1899 = fptrunc float %1855 to half, !dbg !92
  %1900 = fptrunc float %1856 to half, !dbg !92
  %1901 = fptrunc float %1857 to half, !dbg !92
  %1902 = fptrunc float %1858 to half, !dbg !92
  %1903 = fptrunc float %1859 to half, !dbg !92
  %1904 = fptrunc float %1860 to half, !dbg !92
  %1905 = fptrunc float %1861 to half, !dbg !92
  %1906 = fptrunc float %1862 to half, !dbg !92
  %1907 = fptrunc float %1863 to half, !dbg !92
  %1908 = fptrunc float %1864 to half, !dbg !92
  %1909 = fptrunc float %1865 to half, !dbg !92
  %1910 = fptrunc float %1866 to half, !dbg !92
  %1911 = fptrunc float %1867 to half, !dbg !92
  %1912 = fptrunc float %1868 to half, !dbg !92
  %1913 = fptrunc float %1869 to half, !dbg !92
  %1914 = fptrunc float %1870 to half, !dbg !92
  %1915 = fptrunc float %1871 to half, !dbg !92
  %1916 = fptrunc float %1872 to half, !dbg !92
  %1917 = fptrunc float %1873 to half, !dbg !92
  %1918 = fptrunc float %1874 to half, !dbg !92
  %1919 = fptrunc float %1875 to half, !dbg !92
  %1920 = fptrunc float %1876 to half, !dbg !92
  %1921 = fptrunc float %1877 to half, !dbg !92
  %1922 = fptrunc float %1878 to half, !dbg !92
  %1923 = fptrunc float %1879 to half, !dbg !92
  %1924 = fptrunc float %1880 to half, !dbg !92
  %1925 = fptrunc float %1881 to half, !dbg !92
  %1926 = fptrunc float %1882 to half, !dbg !92
  %1927 = fptrunc float %1883 to half, !dbg !92
  %1928 = fptrunc float %1884 to half, !dbg !92
  %1929 = fptrunc float %1885 to half, !dbg !92
  %1930 = fptrunc float %1886 to half, !dbg !92
  %1931 = mul nsw i64 %1851, %34, !dbg !93
  %1932 = mul nsw i64 %1851, %1849, !dbg !93
  %1933 = getelementptr half, ptr addrspace(1) %1852, i64 %1931, !dbg !93
  %1934 = getelementptr half, ptr addrspace(1) %1933, i64 %1932, !dbg !93
  %1935 = getelementptr half, ptr addrspace(1) %1934, i64 %1848, !dbg !93
  %1936 = getelementptr half, ptr addrspace(1) %1934, i64 %1847, !dbg !93
  %1937 = getelementptr half, ptr addrspace(1) %1934, i64 %1846, !dbg !93
  %1938 = getelementptr half, ptr addrspace(1) %1934, i64 %1845, !dbg !93
  %1939 = getelementptr half, ptr addrspace(1) %1934, i64 %1844, !dbg !93
  %1940 = getelementptr half, ptr addrspace(1) %1934, i64 %1843, !dbg !93
  %1941 = getelementptr half, ptr addrspace(1) %1934, i64 %1842, !dbg !93
  %1942 = getelementptr half, ptr addrspace(1) %1934, i64 %1841, !dbg !93
  %1943 = insertelement <4 x half> poison, half %1899, i64 0, !dbg !93
  %1944 = insertelement <4 x half> %1943, half %1900, i64 1, !dbg !93
  %1945 = insertelement <4 x half> %1944, half %1901, i64 2, !dbg !93
  %1946 = insertelement <4 x half> %1945, half %1902, i64 3, !dbg !93
  store <4 x half> %1946, ptr addrspace(1) %1935, align 16, !dbg !93
  %1947 = insertelement <4 x half> poison, half %1903, i64 0, !dbg !93
  %1948 = insertelement <4 x half> %1947, half %1904, i64 1, !dbg !93
  %1949 = insertelement <4 x half> %1948, half %1905, i64 2, !dbg !93
  %1950 = insertelement <4 x half> %1949, half %1906, i64 3, !dbg !93
  store <4 x half> %1950, ptr addrspace(1) %1936, align 16, !dbg !93
  %1951 = insertelement <4 x half> poison, half %1907, i64 0, !dbg !93
  %1952 = insertelement <4 x half> %1951, half %1908, i64 1, !dbg !93
  %1953 = insertelement <4 x half> %1952, half %1909, i64 2, !dbg !93
  %1954 = insertelement <4 x half> %1953, half %1910, i64 3, !dbg !93
  store <4 x half> %1954, ptr addrspace(1) %1937, align 16, !dbg !93
  %1955 = insertelement <4 x half> poison, half %1911, i64 0, !dbg !93
  %1956 = insertelement <4 x half> %1955, half %1912, i64 1, !dbg !93
  %1957 = insertelement <4 x half> %1956, half %1913, i64 2, !dbg !93
  %1958 = insertelement <4 x half> %1957, half %1914, i64 3, !dbg !93
  store <4 x half> %1958, ptr addrspace(1) %1938, align 16, !dbg !93
  %1959 = insertelement <4 x half> poison, half %1915, i64 0, !dbg !93
  %1960 = insertelement <4 x half> %1959, half %1916, i64 1, !dbg !93
  %1961 = insertelement <4 x half> %1960, half %1917, i64 2, !dbg !93
  %1962 = insertelement <4 x half> %1961, half %1918, i64 3, !dbg !93
  store <4 x half> %1962, ptr addrspace(1) %1939, align 16, !dbg !93
  %1963 = insertelement <4 x half> poison, half %1919, i64 0, !dbg !93
  %1964 = insertelement <4 x half> %1963, half %1920, i64 1, !dbg !93
  %1965 = insertelement <4 x half> %1964, half %1921, i64 2, !dbg !93
  %1966 = insertelement <4 x half> %1965, half %1922, i64 3, !dbg !93
  store <4 x half> %1966, ptr addrspace(1) %1940, align 16, !dbg !93
  %1967 = insertelement <4 x half> poison, half %1923, i64 0, !dbg !93
  %1968 = insertelement <4 x half> %1967, half %1924, i64 1, !dbg !93
  %1969 = insertelement <4 x half> %1968, half %1925, i64 2, !dbg !93
  %1970 = insertelement <4 x half> %1969, half %1926, i64 3, !dbg !93
  store <4 x half> %1970, ptr addrspace(1) %1941, align 16, !dbg !93
  %1971 = insertelement <4 x half> poison, half %1927, i64 0, !dbg !93
  %1972 = insertelement <4 x half> %1971, half %1928, i64 1, !dbg !93
  %1973 = insertelement <4 x half> %1972, half %1929, i64 2, !dbg !93
  %1974 = insertelement <4 x half> %1973, half %1930, i64 3, !dbg !93
  store <4 x half> %1974, ptr addrspace(1) %1942, align 16, !dbg !93
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half>, <4 x half>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.log2.f32(float) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.masked.store.v1f32.p1(<1 x float>, ptr addrspace(1) nocapture, i32 immarg, <1 x i1>) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="3" "denormal-fp-math-f32"="preserve-sign" "uniform-work-group-size"="false" }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 8, !"PIC Level", i32 0}
!4 = distinct !DICompileUnit(language: DW_LANG_C, file: !5, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!5 = !DIFile(filename: "06-fused-attention.py", directory: "/triton/python/tutorials")
!6 = !DISubprogram(name: "llvm.amdgcn.exp2.f32", linkageName: "llvm.amdgcn.exp2.f32", scope: !5, file: !5, line: 173, type: !7, scopeLine: 173, spFlags: DISPFlagOptimized)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "_attn_fwd", linkageName: "_attn_fwd", scope: !5, file: !5, line: 102, type: !7, scopeLine: 102, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4)
!10 = !DILocation(line: 115, column: 27, scope: !9)
!11 = !DILocation(line: 116, column: 22, scope: !9)
!12 = !DILocation(line: 118, column: 26, scope: !9)
!13 = !DILocation(line: 118, column: 38, scope: !9)
!14 = !DILocation(line: 117, column: 21, scope: !9)
!15 = !DILocation(line: 118, column: 59, scope: !9)
!16 = !DILocation(line: 118, column: 71, scope: !9)
!17 = !DILocation(line: 118, column: 50, scope: !9)
!18 = !DILocation(line: 122, column: 17, scope: !9)
!19 = !DILocation(line: 114, column: 28, scope: !9)
!20 = !DILocation(line: 125, column: 27, scope: !9)
!21 = !DILocation(line: 127, column: 8, scope: !9)
!22 = !DILocation(line: 155, column: 46, scope: !9)
!23 = !DILocation(line: 165, column: 16, scope: !9)
!24 = !DILocation(line: 156, column: 26, scope: !9)
!25 = !DILocation(line: 131, column: 17, scope: !9)
!26 = !DILocation(line: 136, column: 8, scope: !9)
!27 = !DILocation(line: 139, column: 17, scope: !9)
!28 = !DILocation(line: 144, column: 8, scope: !9)
!29 = !DILocation(line: 155, column: 33, scope: !9)
!30 = !DILocation(line: 163, column: 16, scope: !9)
!31 = !DILocation(line: 46, column: 33, scope: !32, inlinedAt: !33)
!32 = distinct !DILexicalBlockFile(scope: !9, file: !5, discriminator: 0)
!33 = !DILocation(line: 173, column: 74, scope: !9)
!34 = !DILocation(line: 49, column: 20, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 67, column: 20, scope: !32, inlinedAt: !33)
!36 = !DILocation(line: 50, column: 23, scope: !32, inlinedAt: !33)
!37 = !DILocation(line: 163, column: 27, scope: !38, inlinedAt: !33)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/triton/python/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !32, file: !39, discriminator: 0)
!41 = !DILocation(line: 184, column: 40, scope: !40, inlinedAt: !33)
!42 = !DILocation(line: 57, column: 51, scope: !32, inlinedAt: !33)
!43 = !DILocation(line: 57, column: 35, scope: !32, inlinedAt: !33)
!44 = !DILocation(line: 58, column: 22, scope: !32, inlinedAt: !33)
!45 = !DILocation(line: 58, column: 33, scope: !32, inlinedAt: !33)
!46 = !DILocation(line: 59, column: 25, scope: !32, inlinedAt: !33)
!47 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !33)
!48 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !33)
!49 = !DILocation(line: 62, column: 35, scope: !32, inlinedAt: !33)
!50 = !DILocation(line: 62, column: 29, scope: !32, inlinedAt: !33)
!51 = !DILocation(line: 63, column: 20, scope: !32, inlinedAt: !33)
!52 = !DILocation(line: 63, column: 28, scope: !32, inlinedAt: !33)
!53 = !DILocation(line: 65, column: 20, scope: !32, inlinedAt: !33)
!54 = !DILocation(line: 71, column: 21, scope: !32, inlinedAt: !33)
!55 = !DILocation(line: 72, column: 27, scope: !32, inlinedAt: !33)
!56 = !DILocation(line: 76, column: 46, scope: !32, inlinedAt: !33)
!57 = !DILocation(line: 38, column: 52, scope: !32, inlinedAt: !58)
!58 = !DILocation(line: 182, column: 66, scope: !9)
!59 = !DILocation(line: 46, column: 33, scope: !32, inlinedAt: !58)
!60 = !DILocation(line: 49, column: 20, scope: !32, inlinedAt: !58)
!61 = !DILocation(line: 67, column: 20, scope: !32, inlinedAt: !58)
!62 = !DILocation(line: 50, column: 23, scope: !32, inlinedAt: !58)
!63 = !DILocation(line: 52, column: 49, scope: !32, inlinedAt: !58)
!64 = !DILocation(line: 52, column: 39, scope: !32, inlinedAt: !58)
!65 = !DILocation(line: 53, column: 22, scope: !32, inlinedAt: !58)
!66 = !DILocation(line: 53, column: 51, scope: !32, inlinedAt: !58)
!67 = !DILocation(line: 53, column: 33, scope: !32, inlinedAt: !58)
!68 = !DILocation(line: 163, column: 27, scope: !38, inlinedAt: !58)
!69 = !DILocation(line: 184, column: 40, scope: !40, inlinedAt: !58)
!70 = !DILocation(line: 54, column: 35, scope: !32, inlinedAt: !58)
!71 = !DILocation(line: 55, column: 18, scope: !32, inlinedAt: !58)
!72 = !DILocation(line: 59, column: 25, scope: !32, inlinedAt: !58)
!73 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !58)
!74 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !58)
!75 = !DILocation(line: 62, column: 35, scope: !32, inlinedAt: !58)
!76 = !DILocation(line: 62, column: 29, scope: !32, inlinedAt: !58)
!77 = !DILocation(line: 63, column: 20, scope: !32, inlinedAt: !58)
!78 = !DILocation(line: 63, column: 28, scope: !32, inlinedAt: !58)
!79 = !DILocation(line: 65, column: 20, scope: !32, inlinedAt: !58)
!80 = !DILocation(line: 71, column: 21, scope: !32, inlinedAt: !58)
!81 = !DILocation(line: 72, column: 27, scope: !32, inlinedAt: !58)
!82 = !DILocation(line: 76, column: 46, scope: !32, inlinedAt: !58)
!83 = !DILocation(line: 152, column: 8, scope: !9)
!84 = !DILocation(line: 147, column: 19, scope: !9)
!85 = !DILocation(line: 185, column: 24, scope: !9)
!86 = !DILocation(line: 185, column: 11, scope: !9)
!87 = !DILocation(line: 186, column: 16, scope: !9)
!88 = !DILocation(line: 187, column: 26, scope: !9)
!89 = !DILocation(line: 187, column: 17, scope: !9)
!90 = !DILocation(line: 187, column: 34, scope: !9)
!91 = !DILocation(line: 188, column: 21, scope: !9)
!92 = !DILocation(line: 189, column: 33, scope: !9)
!93 = !DILocation(line: 189, column: 26, scope: !9)
!94 = !DILocation(line: 189, column: 4, scope: !9)
