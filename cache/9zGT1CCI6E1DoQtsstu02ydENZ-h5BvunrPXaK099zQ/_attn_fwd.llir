; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !6 float @llvm.amdgcn.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_attn_fwd(ptr addrspace(1) nocapture readonly %0, ptr addrspace(1) nocapture readonly %1, ptr addrspace(1) nocapture readonly %2, float %3, ptr addrspace(1) nocapture writeonly %4, ptr addrspace(1) nocapture writeonly %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19) local_unnamed_addr #1 !dbg !9 {
  %21 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !10
  %.frozen = freeze i32 %18, !dbg !11
  %22 = sdiv i32 %21, %.frozen, !dbg !11
  %23 = sext i32 %22 to i64, !dbg !12
  %24 = sext i32 %6 to i64, !dbg !13
  %25 = mul nsw i64 %23, %24, !dbg !13
  %26 = mul i32 %22, %.frozen, !dbg !14
  %.decomposed = sub i32 %21, %26, !dbg !14
  %27 = sext i32 %.decomposed to i64, !dbg !15
  %28 = sext i32 %7 to i64, !dbg !16
  %29 = mul nsw i64 %27, %28, !dbg !16
  %30 = add nsw i64 %29, %25, !dbg !17
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !18
  %32 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !19
  %33 = shl i32 %32, 7, !dbg !20
  %34 = sext i32 %33 to i64, !dbg !21
  %35 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !22
  %36 = and i32 %35, 63, !dbg !22
  %37 = and i32 %35, 32, !dbg !22
  %38 = lshr exact i32 %37, 3, !dbg !22
  %39 = lshr i32 %35, 3, !dbg !22
  %40 = and i32 %39, 27, !dbg !22
  %41 = or disjoint i32 %40, %38, !dbg !22
  %42 = or disjoint i32 %41, 32, !dbg !22
  %43 = or disjoint i32 %41, 64, !dbg !22
  %44 = or disjoint i32 %41, 96, !dbg !22
  %45 = zext nneg i32 %41 to i64, !dbg !23
  %46 = zext nneg i32 %42 to i64, !dbg !23
  %47 = zext nneg i32 %43 to i64, !dbg !23
  %48 = zext nneg i32 %44 to i64, !dbg !23
  %49 = or disjoint i64 %45, %34, !dbg !23
  %50 = or disjoint i64 %46, %34, !dbg !23
  %51 = or disjoint i64 %47, %34, !dbg !23
  %52 = or disjoint i64 %48, %34, !dbg !23
  %53 = sext i32 %8 to i64, !dbg !21
  %54 = mul nsw i64 %49, %53, !dbg !23
  %55 = mul nsw i64 %50, %53, !dbg !23
  %56 = mul nsw i64 %51, %53, !dbg !23
  %57 = mul nsw i64 %52, %53, !dbg !23
  %58 = shl i32 %35, 3, !dbg !23
  %59 = and i32 %58, 56, !dbg !23
  %60 = zext nneg i32 %59 to i64, !dbg !23
  %61 = getelementptr half, ptr addrspace(1) %31, i64 %54, !dbg !23
  %62 = getelementptr half, ptr addrspace(1) %61, i64 %60, !dbg !23
  %63 = getelementptr half, ptr addrspace(1) %31, i64 %55, !dbg !23
  %64 = getelementptr half, ptr addrspace(1) %63, i64 %60, !dbg !23
  %65 = getelementptr half, ptr addrspace(1) %31, i64 %56, !dbg !23
  %66 = getelementptr half, ptr addrspace(1) %65, i64 %60, !dbg !23
  %67 = getelementptr half, ptr addrspace(1) %31, i64 %57, !dbg !23
  %68 = getelementptr half, ptr addrspace(1) %67, i64 %60, !dbg !23
  %69 = load <8 x half>, ptr addrspace(1) %62, align 16, !dbg !23
  %70 = load <8 x half>, ptr addrspace(1) %64, align 16, !dbg !23
  %71 = load <8 x half>, ptr addrspace(1) %66, align 16, !dbg !23
  %72 = load <8 x half>, ptr addrspace(1) %68, align 16, !dbg !23
  %73 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !24
  %74 = sext i32 %14 to i64, !dbg !25
  %75 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !26
  %76 = sext i32 %11 to i64, !dbg !27
  %77 = and i32 %35, 31, !dbg !22
  %78 = lshr i32 %35, 1, !dbg !22
  %79 = and i32 %78, 32, !dbg !22
  %80 = and i32 %78, 96, !dbg !22
  %81 = or disjoint i32 %80, %77, !dbg !22
  %82 = and i32 %35, 127, !dbg !22
  %83 = or disjoint i32 %81, %33, !dbg !28
  %84 = or disjoint i32 %33, %82, !dbg !28
  %85 = fmul float %3, 0x3FF7154760000000, !dbg !29
  %86 = or disjoint i32 %38, 8, !dbg !23
  %87 = or disjoint i32 %38, 16, !dbg !23
  %88 = or disjoint i32 %38, 24, !dbg !23
  %89 = and i32 %78, 4, !dbg !23
  %90 = or disjoint i32 %59, %89, !dbg !23
  %91 = and i32 %78, 8, !dbg !23
  %92 = lshr exact i32 %37, 1, !dbg !23
  %93 = or disjoint i32 %92, %91, !dbg !23
  %94 = or disjoint i32 %93, %79, !dbg !23
  %95 = xor i32 %94, %90, !dbg !23
  %96 = shl nuw nsw i32 %41, 6, !dbg !23
  %97 = or disjoint i32 %95, %96, !dbg !23
  %98 = zext nneg i32 %97 to i64, !dbg !23
  %99 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %98, !dbg !23
  %100 = shufflevector <8 x half> %69, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %100, ptr addrspace(3) %99, align 8, !dbg !23
  %101 = or disjoint i32 %59, 4, !dbg !23
  %102 = or disjoint i32 %93, %89, !dbg !23
  %103 = or disjoint i32 %102, %79, !dbg !23
  %104 = xor i32 %103, %101, !dbg !23
  %105 = or disjoint i32 %104, %96, !dbg !23
  %106 = zext nneg i32 %105 to i64, !dbg !23
  %107 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %106, !dbg !23
  %108 = shufflevector <8 x half> %69, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %108, ptr addrspace(3) %107, align 8, !dbg !23
  %109 = or disjoint i32 %96, 2048, !dbg !23
  %110 = or disjoint i32 %95, %109, !dbg !23
  %111 = zext nneg i32 %110 to i64, !dbg !23
  %112 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %111, !dbg !23
  %113 = shufflevector <8 x half> %70, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %113, ptr addrspace(3) %112, align 8, !dbg !23
  %114 = or disjoint i32 %104, %109, !dbg !23
  %115 = zext nneg i32 %114 to i64, !dbg !23
  %116 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %115, !dbg !23
  %117 = shufflevector <8 x half> %70, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %117, ptr addrspace(3) %116, align 8, !dbg !23
  %118 = or disjoint i32 %96, 4096, !dbg !23
  %119 = or disjoint i32 %95, %118, !dbg !23
  %120 = zext nneg i32 %119 to i64, !dbg !23
  %121 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %120, !dbg !23
  %122 = shufflevector <8 x half> %71, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %122, ptr addrspace(3) %121, align 8, !dbg !23
  %123 = or disjoint i32 %104, %118, !dbg !23
  %124 = zext nneg i32 %123 to i64, !dbg !23
  %125 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %124, !dbg !23
  %126 = shufflevector <8 x half> %71, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %126, ptr addrspace(3) %125, align 8, !dbg !23
  %127 = or disjoint i32 %96, 6144, !dbg !23
  %128 = or disjoint i32 %95, %127, !dbg !23
  %129 = zext nneg i32 %128 to i64, !dbg !23
  %130 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %129, !dbg !23
  %131 = shufflevector <8 x half> %72, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %131, ptr addrspace(3) %130, align 8, !dbg !23
  %132 = or disjoint i32 %104, %127, !dbg !23
  %133 = zext nneg i32 %132 to i64, !dbg !23
  %134 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %133, !dbg !23
  %135 = shufflevector <8 x half> %72, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %135, ptr addrspace(3) %134, align 8, !dbg !23
  fence syncscope("workgroup") release, !dbg !23
  tail call void @llvm.amdgcn.s.barrier(), !dbg !23
  fence syncscope("workgroup") acquire, !dbg !23
  %136 = icmp ugt i32 %36, 31, !dbg !23
  %137 = zext i1 %136 to i32, !dbg !23
  %138 = and i32 %35, 15, !dbg !23
  %139 = xor i32 %138, %137, !dbg !23
  %140 = shl nuw nsw i32 %139, 2, !dbg !23
  %141 = shl nuw nsw i32 %81, 6, !dbg !23
  %142 = or disjoint i32 %140, %141, !dbg !23
  %143 = or disjoint i32 %137, 2, !dbg !23
  %144 = xor i32 %143, %138, !dbg !23
  %145 = shl nuw nsw i32 %144, 2, !dbg !23
  %146 = or disjoint i32 %145, %141, !dbg !23
  %147 = or disjoint i32 %137, 4, !dbg !23
  %148 = xor i32 %147, %138, !dbg !23
  %149 = shl nuw nsw i32 %148, 2, !dbg !23
  %150 = or disjoint i32 %149, %141, !dbg !23
  %151 = or disjoint i32 %137, 6, !dbg !23
  %152 = xor i32 %151, %138, !dbg !23
  %153 = shl nuw nsw i32 %152, 2, !dbg !23
  %154 = or disjoint i32 %153, %141, !dbg !23
  %155 = or disjoint i32 %137, 8, !dbg !23
  %156 = xor i32 %155, %138, !dbg !23
  %157 = shl nuw nsw i32 %156, 2, !dbg !23
  %158 = or disjoint i32 %157, %141, !dbg !23
  %159 = or disjoint i32 %137, 10, !dbg !23
  %160 = xor i32 %159, %138, !dbg !23
  %161 = shl nuw nsw i32 %160, 2, !dbg !23
  %162 = or disjoint i32 %161, %141, !dbg !23
  %163 = or disjoint i32 %137, 12, !dbg !23
  %164 = xor i32 %163, %138, !dbg !23
  %165 = shl nuw nsw i32 %164, 2, !dbg !23
  %166 = or disjoint i32 %165, %141, !dbg !23
  %167 = or disjoint i32 %137, 14, !dbg !23
  %168 = xor i32 %167, %138, !dbg !23
  %169 = shl nuw nsw i32 %168, 2, !dbg !23
  %170 = or disjoint i32 %169, %141, !dbg !23
  %171 = zext nneg i32 %142 to i64, !dbg !23
  %172 = getelementptr half, ptr addrspace(3) @global_smem, i64 %171, !dbg !23
  %173 = load <4 x half>, ptr addrspace(3) %172, align 8, !dbg !23
  %174 = zext nneg i32 %146 to i64, !dbg !23
  %175 = getelementptr half, ptr addrspace(3) @global_smem, i64 %174, !dbg !23
  %176 = load <4 x half>, ptr addrspace(3) %175, align 8, !dbg !23
  %177 = zext nneg i32 %150 to i64, !dbg !23
  %178 = getelementptr half, ptr addrspace(3) @global_smem, i64 %177, !dbg !23
  %179 = load <4 x half>, ptr addrspace(3) %178, align 8, !dbg !23
  %180 = zext nneg i32 %154 to i64, !dbg !23
  %181 = getelementptr half, ptr addrspace(3) @global_smem, i64 %180, !dbg !23
  %182 = load <4 x half>, ptr addrspace(3) %181, align 8, !dbg !23
  %183 = zext nneg i32 %158 to i64, !dbg !23
  %184 = getelementptr half, ptr addrspace(3) @global_smem, i64 %183, !dbg !23
  %185 = load <4 x half>, ptr addrspace(3) %184, align 8, !dbg !23
  %186 = zext nneg i32 %162 to i64, !dbg !23
  %187 = getelementptr half, ptr addrspace(3) @global_smem, i64 %186, !dbg !23
  %188 = load <4 x half>, ptr addrspace(3) %187, align 8, !dbg !23
  %189 = zext nneg i32 %166 to i64, !dbg !23
  %190 = getelementptr half, ptr addrspace(3) @global_smem, i64 %189, !dbg !23
  %191 = load <4 x half>, ptr addrspace(3) %190, align 8, !dbg !23
  %192 = zext nneg i32 %170 to i64, !dbg !23
  %193 = getelementptr half, ptr addrspace(3) @global_smem, i64 %192, !dbg !23
  %194 = load <4 x half>, ptr addrspace(3) %193, align 8, !dbg !23
  %invariant.gep = getelementptr half, ptr addrspace(1) %73, i64 %60, !dbg !30
  %invariant.gep24 = getelementptr half, ptr addrspace(1) %75, i64 %60, !dbg !30
  %195 = icmp sgt i32 %33, 0, !dbg !30
  br i1 %195, label %.lr.ph, label %._crit_edge, !dbg !30

.lr.ph:                                           ; preds = %20
  %196 = shl nuw nsw i32 %77, 6
  %197 = or disjoint i32 %140, %196
  %198 = or disjoint i32 %145, %196
  %199 = or disjoint i32 %149, %196
  %200 = or disjoint i32 %153, %196
  %201 = or disjoint i32 %157, %196
  %202 = or disjoint i32 %161, %196
  %203 = or disjoint i32 %165, %196
  %204 = or disjoint i32 %169, %196
  %205 = zext nneg i32 %197 to i64
  %206 = getelementptr half, ptr addrspace(3) @global_smem, i64 %205
  %207 = zext nneg i32 %198 to i64
  %208 = getelementptr half, ptr addrspace(3) @global_smem, i64 %207
  %209 = zext nneg i32 %199 to i64
  %210 = getelementptr half, ptr addrspace(3) @global_smem, i64 %209
  %211 = zext nneg i32 %200 to i64
  %212 = getelementptr half, ptr addrspace(3) @global_smem, i64 %211
  %213 = zext nneg i32 %201 to i64
  %214 = getelementptr half, ptr addrspace(3) @global_smem, i64 %213
  %215 = zext nneg i32 %202 to i64
  %216 = getelementptr half, ptr addrspace(3) @global_smem, i64 %215
  %217 = zext nneg i32 %203 to i64
  %218 = getelementptr half, ptr addrspace(3) @global_smem, i64 %217
  %219 = zext nneg i32 %204 to i64
  %220 = getelementptr half, ptr addrspace(3) @global_smem, i64 %219
  %221 = shl i32 %35, 2
  %222 = xor i32 %221, 128
  %223 = or disjoint i32 %96, %59
  %224 = zext nneg i32 %223 to i64
  %225 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %224
  %226 = shl nuw nsw i32 %36, 3
  %227 = and i32 %226, 256
  %228 = or disjoint i32 %227, %77
  %229 = or disjoint i32 %228, 64
  %230 = or disjoint i32 %228, 128
  %231 = or disjoint i32 %228, 192
  %232 = or disjoint i32 %228, 512
  %233 = or disjoint i32 %228, 576
  %234 = or disjoint i32 %228, 640
  %235 = or disjoint i32 %228, 704
  %236 = or disjoint i32 %228, 1024
  %237 = or disjoint i32 %228, 1088
  %238 = or disjoint i32 %228, 1152
  %239 = or disjoint i32 %228, 1216
  %240 = or disjoint i32 %228, 1536
  %241 = or disjoint i32 %228, 1600
  %242 = or disjoint i32 %228, 1664
  %243 = or disjoint i32 %228, 1728
  %244 = or disjoint i32 %228, 32
  %245 = or disjoint i32 %228, 96
  %246 = or disjoint i32 %228, 160
  %247 = or disjoint i32 %228, 224
  %248 = or disjoint i32 %228, 544
  %249 = or disjoint i32 %228, 608
  %250 = or disjoint i32 %228, 672
  %251 = or disjoint i32 %228, 736
  %252 = or disjoint i32 %228, 1056
  %253 = or disjoint i32 %228, 1120
  %254 = or disjoint i32 %228, 1184
  %255 = or disjoint i32 %228, 1248
  %256 = or disjoint i32 %228, 1568
  %257 = or disjoint i32 %228, 1632
  %258 = or disjoint i32 %228, 1696
  %259 = or disjoint i32 %228, 1760
  %260 = zext nneg i32 %228 to i64
  %261 = getelementptr half, ptr addrspace(3) @global_smem, i64 %260
  %262 = zext nneg i32 %229 to i64
  %263 = getelementptr half, ptr addrspace(3) @global_smem, i64 %262
  %264 = zext nneg i32 %230 to i64
  %265 = getelementptr half, ptr addrspace(3) @global_smem, i64 %264
  %266 = zext nneg i32 %231 to i64
  %267 = getelementptr half, ptr addrspace(3) @global_smem, i64 %266
  %268 = zext nneg i32 %232 to i64
  %269 = getelementptr half, ptr addrspace(3) @global_smem, i64 %268
  %270 = zext nneg i32 %233 to i64
  %271 = getelementptr half, ptr addrspace(3) @global_smem, i64 %270
  %272 = zext nneg i32 %234 to i64
  %273 = getelementptr half, ptr addrspace(3) @global_smem, i64 %272
  %274 = zext nneg i32 %235 to i64
  %275 = getelementptr half, ptr addrspace(3) @global_smem, i64 %274
  %276 = zext nneg i32 %236 to i64
  %277 = getelementptr half, ptr addrspace(3) @global_smem, i64 %276
  %278 = zext nneg i32 %237 to i64
  %279 = getelementptr half, ptr addrspace(3) @global_smem, i64 %278
  %280 = zext nneg i32 %238 to i64
  %281 = getelementptr half, ptr addrspace(3) @global_smem, i64 %280
  %282 = zext nneg i32 %239 to i64
  %283 = getelementptr half, ptr addrspace(3) @global_smem, i64 %282
  %284 = zext nneg i32 %240 to i64
  %285 = getelementptr half, ptr addrspace(3) @global_smem, i64 %284
  %286 = zext nneg i32 %241 to i64
  %287 = getelementptr half, ptr addrspace(3) @global_smem, i64 %286
  %288 = zext nneg i32 %242 to i64
  %289 = getelementptr half, ptr addrspace(3) @global_smem, i64 %288
  %290 = zext nneg i32 %243 to i64
  %291 = getelementptr half, ptr addrspace(3) @global_smem, i64 %290
  %292 = zext nneg i32 %244 to i64
  %293 = getelementptr half, ptr addrspace(3) @global_smem, i64 %292
  %294 = zext nneg i32 %245 to i64
  %295 = getelementptr half, ptr addrspace(3) @global_smem, i64 %294
  %296 = zext nneg i32 %246 to i64
  %297 = getelementptr half, ptr addrspace(3) @global_smem, i64 %296
  %298 = zext nneg i32 %247 to i64
  %299 = getelementptr half, ptr addrspace(3) @global_smem, i64 %298
  %300 = zext nneg i32 %248 to i64
  %301 = getelementptr half, ptr addrspace(3) @global_smem, i64 %300
  %302 = zext nneg i32 %249 to i64
  %303 = getelementptr half, ptr addrspace(3) @global_smem, i64 %302
  %304 = zext nneg i32 %250 to i64
  %305 = getelementptr half, ptr addrspace(3) @global_smem, i64 %304
  %306 = zext nneg i32 %251 to i64
  %307 = getelementptr half, ptr addrspace(3) @global_smem, i64 %306
  %308 = zext nneg i32 %252 to i64
  %309 = getelementptr half, ptr addrspace(3) @global_smem, i64 %308
  %310 = zext nneg i32 %253 to i64
  %311 = getelementptr half, ptr addrspace(3) @global_smem, i64 %310
  %312 = zext nneg i32 %254 to i64
  %313 = getelementptr half, ptr addrspace(3) @global_smem, i64 %312
  %314 = zext nneg i32 %255 to i64
  %315 = getelementptr half, ptr addrspace(3) @global_smem, i64 %314
  %316 = zext nneg i32 %256 to i64
  %317 = getelementptr half, ptr addrspace(3) @global_smem, i64 %316
  %318 = zext nneg i32 %257 to i64
  %319 = getelementptr half, ptr addrspace(3) @global_smem, i64 %318
  %320 = zext nneg i32 %258 to i64
  %321 = getelementptr half, ptr addrspace(3) @global_smem, i64 %320
  %322 = zext nneg i32 %259 to i64
  %323 = getelementptr half, ptr addrspace(3) @global_smem, i64 %322
  br label %324, !dbg !30

324:                                              ; preds = %.lr.ph, %324
  %325 = phi i64 [ 0, %.lr.ph ], [ %631, %324 ]
  %326 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %403, %324 ]
  %327 = phi float [ 1.000000e+00, %.lr.ph ], [ %474, %324 ]
  %328 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %633, %324 ]
  %329 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %634, %324 ]
  %330 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %635, %324 ]
  %331 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %636, %324 ]
  %332 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %637, %324 ]
  %333 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %638, %324 ]
  %334 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %639, %324 ]
  %335 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %640, %324 ]
  %336 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %641, %324 ]
  %337 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %642, %324 ]
  %338 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %643, %324 ]
  %339 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %644, %324 ]
  %340 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %645, %324 ]
  %341 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %646, %324 ]
  %342 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %647, %324 ]
  %343 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %648, %324 ]
  %344 = or disjoint i64 %325, %45, !dbg !33
  %345 = mul i64 %344, %74, !dbg !33
  %gep = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %345, !dbg !33
  %346 = load <8 x half>, ptr addrspace(1) %gep, align 16, !dbg !33
  %347 = mul i64 %344, %76, !dbg !34
  %gep25 = getelementptr half, ptr addrspace(1) %invariant.gep24, i64 %347, !dbg !34
  %348 = load <8 x half>, ptr addrspace(1) %gep25, align 16, !dbg !34
  fence syncscope("workgroup") release, !dbg !34
  tail call void @llvm.amdgcn.s.barrier(), !dbg !34
  fence syncscope("workgroup") acquire, !dbg !34
  %349 = shufflevector <8 x half> %348, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !34
  store <4 x half> %349, ptr addrspace(3) %99, align 8, !dbg !34
  %350 = shufflevector <8 x half> %348, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !34
  store <4 x half> %350, ptr addrspace(3) %107, align 8, !dbg !34
  fence syncscope("workgroup") release, !dbg !34
  tail call void @llvm.amdgcn.s.barrier(), !dbg !34
  fence syncscope("workgroup") acquire, !dbg !34
  %351 = load <4 x half>, ptr addrspace(3) %206, align 8, !dbg !34
  %352 = load <4 x half>, ptr addrspace(3) %208, align 8, !dbg !34
  %353 = load <4 x half>, ptr addrspace(3) %210, align 8, !dbg !34
  %354 = load <4 x half>, ptr addrspace(3) %212, align 8, !dbg !34
  %355 = load <4 x half>, ptr addrspace(3) %214, align 8, !dbg !34
  %356 = load <4 x half>, ptr addrspace(3) %216, align 8, !dbg !34
  %357 = load <4 x half>, ptr addrspace(3) %218, align 8, !dbg !34
  %358 = load <4 x half>, ptr addrspace(3) %220, align 8, !dbg !34
  %359 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %351, <4 x half> %173, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !35
  %360 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %352, <4 x half> %176, <16 x float> %359, i32 0, i32 0, i32 0), !dbg !35
  %361 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %353, <4 x half> %179, <16 x float> %360, i32 0, i32 0, i32 0), !dbg !35
  %362 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %354, <4 x half> %182, <16 x float> %361, i32 0, i32 0, i32 0), !dbg !35
  %363 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %355, <4 x half> %185, <16 x float> %362, i32 0, i32 0, i32 0), !dbg !35
  %364 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %356, <4 x half> %188, <16 x float> %363, i32 0, i32 0, i32 0), !dbg !35
  %365 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %357, <4 x half> %191, <16 x float> %364, i32 0, i32 0, i32 0), !dbg !35
  %366 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %358, <4 x half> %194, <16 x float> %365, i32 0, i32 0, i32 0), !dbg !35
  %367 = extractelement <16 x float> %366, i64 0, !dbg !35
  %368 = extractelement <16 x float> %366, i64 1, !dbg !35
  %369 = extractelement <16 x float> %366, i64 2, !dbg !35
  %370 = extractelement <16 x float> %366, i64 3, !dbg !35
  %371 = extractelement <16 x float> %366, i64 4, !dbg !35
  %372 = extractelement <16 x float> %366, i64 5, !dbg !35
  %373 = extractelement <16 x float> %366, i64 6, !dbg !35
  %374 = extractelement <16 x float> %366, i64 7, !dbg !35
  %375 = extractelement <16 x float> %366, i64 8, !dbg !35
  %376 = extractelement <16 x float> %366, i64 9, !dbg !35
  %377 = extractelement <16 x float> %366, i64 10, !dbg !35
  %378 = extractelement <16 x float> %366, i64 11, !dbg !35
  %379 = extractelement <16 x float> %366, i64 12, !dbg !35
  %380 = extractelement <16 x float> %366, i64 13, !dbg !35
  %381 = extractelement <16 x float> %366, i64 14, !dbg !35
  %382 = extractelement <16 x float> %366, i64 15, !dbg !35
  %383 = tail call float @llvm.maxnum.f32(float %367, float %368), !dbg !36
  %384 = tail call float @llvm.maxnum.f32(float %383, float %369), !dbg !36
  %385 = tail call float @llvm.maxnum.f32(float %384, float %370), !dbg !36
  %386 = tail call float @llvm.maxnum.f32(float %385, float %371), !dbg !36
  %387 = tail call float @llvm.maxnum.f32(float %386, float %372), !dbg !36
  %388 = tail call float @llvm.maxnum.f32(float %387, float %373), !dbg !36
  %389 = tail call float @llvm.maxnum.f32(float %388, float %374), !dbg !36
  %390 = tail call float @llvm.maxnum.f32(float %389, float %375), !dbg !36
  %391 = tail call float @llvm.maxnum.f32(float %390, float %376), !dbg !36
  %392 = tail call float @llvm.maxnum.f32(float %391, float %377), !dbg !36
  %393 = tail call float @llvm.maxnum.f32(float %392, float %378), !dbg !36
  %394 = tail call float @llvm.maxnum.f32(float %393, float %379), !dbg !36
  %395 = tail call float @llvm.maxnum.f32(float %394, float %380), !dbg !36
  %396 = tail call float @llvm.maxnum.f32(float %395, float %381), !dbg !36
  %397 = tail call float @llvm.maxnum.f32(float %396, float %382), !dbg !36
  %398 = bitcast float %397 to i32, !dbg !40
  %399 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %222, i32 %398), !dbg !40
  %400 = bitcast i32 %399 to float, !dbg !40
  %401 = tail call float @llvm.maxnum.f32(float %397, float %400), !dbg !36
  %402 = fmul float %85, %401, !dbg !41
  %403 = tail call float @llvm.maxnum.f32(float %326, float %402), !dbg !42
  %404 = fmul float %85, %367, !dbg !43
  %405 = fmul float %85, %368, !dbg !43
  %406 = fmul float %85, %369, !dbg !43
  %407 = fmul float %85, %370, !dbg !43
  %408 = fmul float %85, %371, !dbg !43
  %409 = fmul float %85, %372, !dbg !43
  %410 = fmul float %85, %373, !dbg !43
  %411 = fmul float %85, %374, !dbg !43
  %412 = fmul float %85, %375, !dbg !43
  %413 = fmul float %85, %376, !dbg !43
  %414 = fmul float %85, %377, !dbg !43
  %415 = fmul float %85, %378, !dbg !43
  %416 = fmul float %85, %379, !dbg !43
  %417 = fmul float %85, %380, !dbg !43
  %418 = fmul float %85, %381, !dbg !43
  %419 = fmul float %85, %382, !dbg !43
  %420 = fsub float %404, %403, !dbg !44
  %421 = fsub float %405, %403, !dbg !44
  %422 = fsub float %406, %403, !dbg !44
  %423 = fsub float %407, %403, !dbg !44
  %424 = fsub float %408, %403, !dbg !44
  %425 = fsub float %409, %403, !dbg !44
  %426 = fsub float %410, %403, !dbg !44
  %427 = fsub float %411, %403, !dbg !44
  %428 = fsub float %412, %403, !dbg !44
  %429 = fsub float %413, %403, !dbg !44
  %430 = fsub float %414, %403, !dbg !44
  %431 = fsub float %415, %403, !dbg !44
  %432 = fsub float %416, %403, !dbg !44
  %433 = fsub float %417, %403, !dbg !44
  %434 = fsub float %418, %403, !dbg !44
  %435 = fsub float %419, %403, !dbg !44
  %436 = tail call float @llvm.amdgcn.exp2.f32(float %420), !dbg !45
  %437 = tail call float @llvm.amdgcn.exp2.f32(float %421), !dbg !45
  %438 = tail call float @llvm.amdgcn.exp2.f32(float %422), !dbg !45
  %439 = tail call float @llvm.amdgcn.exp2.f32(float %423), !dbg !45
  %440 = tail call float @llvm.amdgcn.exp2.f32(float %424), !dbg !45
  %441 = tail call float @llvm.amdgcn.exp2.f32(float %425), !dbg !45
  %442 = tail call float @llvm.amdgcn.exp2.f32(float %426), !dbg !45
  %443 = tail call float @llvm.amdgcn.exp2.f32(float %427), !dbg !45
  %444 = tail call float @llvm.amdgcn.exp2.f32(float %428), !dbg !45
  %445 = tail call float @llvm.amdgcn.exp2.f32(float %429), !dbg !45
  %446 = tail call float @llvm.amdgcn.exp2.f32(float %430), !dbg !45
  %447 = tail call float @llvm.amdgcn.exp2.f32(float %431), !dbg !45
  %448 = tail call float @llvm.amdgcn.exp2.f32(float %432), !dbg !45
  %449 = tail call float @llvm.amdgcn.exp2.f32(float %433), !dbg !45
  %450 = tail call float @llvm.amdgcn.exp2.f32(float %434), !dbg !45
  %451 = tail call float @llvm.amdgcn.exp2.f32(float %435), !dbg !45
  %452 = fadd float %436, %437, !dbg !46
  %453 = fadd float %438, %452, !dbg !46
  %454 = fadd float %439, %453, !dbg !46
  %455 = fadd float %440, %454, !dbg !46
  %456 = fadd float %441, %455, !dbg !46
  %457 = fadd float %442, %456, !dbg !46
  %458 = fadd float %443, %457, !dbg !46
  %459 = fadd float %444, %458, !dbg !46
  %460 = fadd float %445, %459, !dbg !46
  %461 = fadd float %446, %460, !dbg !46
  %462 = fadd float %447, %461, !dbg !46
  %463 = fadd float %448, %462, !dbg !46
  %464 = fadd float %449, %463, !dbg !46
  %465 = fadd float %450, %464, !dbg !46
  %466 = fadd float %451, %465, !dbg !46
  %467 = bitcast float %466 to i32, !dbg !47
  %468 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %222, i32 %467), !dbg !47
  %469 = bitcast i32 %468 to float, !dbg !47
  %470 = fadd float %466, %469, !dbg !46
  %471 = fsub float %326, %403, !dbg !48
  %472 = tail call float @llvm.amdgcn.exp2.f32(float %471), !dbg !49
  %473 = fmul float %327, %472, !dbg !50
  %474 = fadd float %473, %470, !dbg !51
  %475 = insertelement <2 x float> poison, float %472, i64 0, !dbg !52
  %476 = shufflevector <2 x float> %475, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %477 = fmul <2 x float> %336, %476, !dbg !52
  %478 = fmul <2 x float> %337, %476, !dbg !52
  %479 = fmul <2 x float> %338, %476, !dbg !52
  %480 = fmul <2 x float> %339, %476, !dbg !52
  %481 = fmul <2 x float> %340, %476, !dbg !52
  %482 = fmul <2 x float> %341, %476, !dbg !52
  %483 = fmul <2 x float> %342, %476, !dbg !52
  %484 = fmul <2 x float> %343, %476, !dbg !52
  %485 = fmul <2 x float> %328, %476, !dbg !52
  %486 = fmul <2 x float> %329, %476, !dbg !52
  %487 = fmul <2 x float> %330, %476, !dbg !52
  %488 = fmul <2 x float> %331, %476, !dbg !52
  %489 = fmul <2 x float> %332, %476, !dbg !52
  %490 = fmul <2 x float> %333, %476, !dbg !52
  %491 = fmul <2 x float> %334, %476, !dbg !52
  %492 = fmul <2 x float> %335, %476, !dbg !52
  fence syncscope("workgroup") release, !dbg !33
  tail call void @llvm.amdgcn.s.barrier(), !dbg !33
  fence syncscope("workgroup") acquire, !dbg !33
  store <8 x half> %346, ptr addrspace(3) %225, align 16, !dbg !33
  fence syncscope("workgroup") release, !dbg !33
  tail call void @llvm.amdgcn.s.barrier(), !dbg !33
  fence syncscope("workgroup") acquire, !dbg !33
  %493 = load <1 x half>, ptr addrspace(3) %261, align 2, !dbg !33
  %494 = load <1 x half>, ptr addrspace(3) %263, align 2, !dbg !33
  %495 = load <1 x half>, ptr addrspace(3) %265, align 2, !dbg !33
  %496 = shufflevector <1 x half> %495, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %497 = load <1 x half>, ptr addrspace(3) %267, align 2, !dbg !33
  %498 = shufflevector <1 x half> %497, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %499 = load <1 x half>, ptr addrspace(3) %269, align 2, !dbg !33
  %500 = load <1 x half>, ptr addrspace(3) %271, align 2, !dbg !33
  %501 = load <1 x half>, ptr addrspace(3) %273, align 2, !dbg !33
  %502 = shufflevector <1 x half> %501, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %503 = load <1 x half>, ptr addrspace(3) %275, align 2, !dbg !33
  %504 = shufflevector <1 x half> %503, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %505 = load <1 x half>, ptr addrspace(3) %277, align 2, !dbg !33
  %506 = load <1 x half>, ptr addrspace(3) %279, align 2, !dbg !33
  %507 = load <1 x half>, ptr addrspace(3) %281, align 2, !dbg !33
  %508 = shufflevector <1 x half> %507, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %509 = load <1 x half>, ptr addrspace(3) %283, align 2, !dbg !33
  %510 = shufflevector <1 x half> %509, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %511 = load <1 x half>, ptr addrspace(3) %285, align 2, !dbg !33
  %512 = load <1 x half>, ptr addrspace(3) %287, align 2, !dbg !33
  %513 = load <1 x half>, ptr addrspace(3) %289, align 2, !dbg !33
  %514 = shufflevector <1 x half> %513, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %515 = load <1 x half>, ptr addrspace(3) %291, align 2, !dbg !33
  %516 = shufflevector <1 x half> %515, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %517 = load <1 x half>, ptr addrspace(3) %293, align 2, !dbg !33
  %518 = load <1 x half>, ptr addrspace(3) %295, align 2, !dbg !33
  %519 = load <1 x half>, ptr addrspace(3) %297, align 2, !dbg !33
  %520 = shufflevector <1 x half> %519, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %521 = load <1 x half>, ptr addrspace(3) %299, align 2, !dbg !33
  %522 = shufflevector <1 x half> %521, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %523 = load <1 x half>, ptr addrspace(3) %301, align 2, !dbg !33
  %524 = load <1 x half>, ptr addrspace(3) %303, align 2, !dbg !33
  %525 = load <1 x half>, ptr addrspace(3) %305, align 2, !dbg !33
  %526 = shufflevector <1 x half> %525, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %527 = load <1 x half>, ptr addrspace(3) %307, align 2, !dbg !33
  %528 = shufflevector <1 x half> %527, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %529 = load <1 x half>, ptr addrspace(3) %309, align 2, !dbg !33
  %530 = load <1 x half>, ptr addrspace(3) %311, align 2, !dbg !33
  %531 = load <1 x half>, ptr addrspace(3) %313, align 2, !dbg !33
  %532 = shufflevector <1 x half> %531, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %533 = load <1 x half>, ptr addrspace(3) %315, align 2, !dbg !33
  %534 = shufflevector <1 x half> %533, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %535 = load <1 x half>, ptr addrspace(3) %317, align 2, !dbg !33
  %536 = load <1 x half>, ptr addrspace(3) %319, align 2, !dbg !33
  %537 = load <1 x half>, ptr addrspace(3) %321, align 2, !dbg !33
  %538 = shufflevector <1 x half> %537, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %539 = load <1 x half>, ptr addrspace(3) %323, align 2, !dbg !33
  %540 = shufflevector <1 x half> %539, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %541 = fptrunc float %436 to half, !dbg !53
  %542 = fptrunc float %437 to half, !dbg !53
  %543 = fptrunc float %438 to half, !dbg !53
  %544 = fptrunc float %439 to half, !dbg !53
  %545 = fptrunc float %440 to half, !dbg !53
  %546 = fptrunc float %441 to half, !dbg !53
  %547 = fptrunc float %442 to half, !dbg !53
  %548 = fptrunc float %443 to half, !dbg !53
  %549 = fptrunc float %444 to half, !dbg !53
  %550 = fptrunc float %445 to half, !dbg !53
  %551 = fptrunc float %446 to half, !dbg !53
  %552 = fptrunc float %447 to half, !dbg !53
  %553 = fptrunc float %448 to half, !dbg !53
  %554 = fptrunc float %449 to half, !dbg !53
  %555 = fptrunc float %450 to half, !dbg !53
  %556 = fptrunc float %451 to half, !dbg !53
  %557 = insertelement <4 x half> poison, half %541, i64 0, !dbg !54
  %558 = insertelement <4 x half> %557, half %542, i64 1, !dbg !54
  %559 = insertelement <4 x half> %558, half %543, i64 2, !dbg !54
  %560 = insertelement <4 x half> %559, half %544, i64 3, !dbg !54
  %561 = insertelement <4 x half> poison, half %545, i64 0, !dbg !54
  %562 = insertelement <4 x half> %561, half %546, i64 1, !dbg !54
  %563 = insertelement <4 x half> %562, half %547, i64 2, !dbg !54
  %564 = insertelement <4 x half> %563, half %548, i64 3, !dbg !54
  %565 = insertelement <4 x half> poison, half %549, i64 0, !dbg !54
  %566 = insertelement <4 x half> %565, half %550, i64 1, !dbg !54
  %567 = insertelement <4 x half> %566, half %551, i64 2, !dbg !54
  %568 = insertelement <4 x half> %567, half %552, i64 3, !dbg !54
  %569 = insertelement <4 x half> poison, half %553, i64 0, !dbg !54
  %570 = insertelement <4 x half> %569, half %554, i64 1, !dbg !54
  %571 = insertelement <4 x half> %570, half %555, i64 2, !dbg !54
  %572 = insertelement <4 x half> %571, half %556, i64 3, !dbg !54
  %573 = shufflevector <1 x half> %493, <1 x half> %494, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %574 = shufflevector <4 x half> %573, <4 x half> %496, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %575 = shufflevector <4 x half> %574, <4 x half> %498, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %576 = shufflevector <1 x half> %499, <1 x half> %500, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %577 = shufflevector <4 x half> %576, <4 x half> %502, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %578 = shufflevector <4 x half> %577, <4 x half> %504, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %579 = shufflevector <1 x half> %505, <1 x half> %506, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %580 = shufflevector <4 x half> %579, <4 x half> %508, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %581 = shufflevector <4 x half> %580, <4 x half> %510, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %582 = shufflevector <1 x half> %511, <1 x half> %512, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %583 = shufflevector <4 x half> %582, <4 x half> %514, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %584 = shufflevector <4 x half> %583, <4 x half> %516, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %585 = shufflevector <1 x half> %517, <1 x half> %518, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %586 = shufflevector <4 x half> %585, <4 x half> %520, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %587 = shufflevector <4 x half> %586, <4 x half> %522, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %588 = shufflevector <1 x half> %523, <1 x half> %524, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %589 = shufflevector <4 x half> %588, <4 x half> %526, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %590 = shufflevector <4 x half> %589, <4 x half> %528, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %591 = shufflevector <1 x half> %529, <1 x half> %530, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %592 = shufflevector <4 x half> %591, <4 x half> %532, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %593 = shufflevector <4 x half> %592, <4 x half> %534, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %594 = shufflevector <1 x half> %535, <1 x half> %536, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %595 = shufflevector <4 x half> %594, <4 x half> %538, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %596 = shufflevector <4 x half> %595, <4 x half> %540, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %597 = shufflevector <2 x float> %477, <2 x float> %478, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %598 = shufflevector <2 x float> %479, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %599 = shufflevector <16 x float> %597, <16 x float> %598, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %600 = shufflevector <2 x float> %480, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %601 = shufflevector <16 x float> %599, <16 x float> %600, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %602 = shufflevector <2 x float> %481, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %603 = shufflevector <16 x float> %601, <16 x float> %602, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %604 = shufflevector <2 x float> %482, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %605 = shufflevector <16 x float> %603, <16 x float> %604, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %606 = shufflevector <2 x float> %483, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %607 = shufflevector <16 x float> %605, <16 x float> %606, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !54
  %608 = shufflevector <2 x float> %484, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %609 = shufflevector <16 x float> %607, <16 x float> %608, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !54
  %610 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %575, <4 x half> %560, <16 x float> %609, i32 0, i32 0, i32 0), !dbg !54
  %611 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %578, <4 x half> %564, <16 x float> %610, i32 0, i32 0, i32 0), !dbg !54
  %612 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %581, <4 x half> %568, <16 x float> %611, i32 0, i32 0, i32 0), !dbg !54
  %613 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %584, <4 x half> %572, <16 x float> %612, i32 0, i32 0, i32 0), !dbg !54
  %614 = shufflevector <2 x float> %485, <2 x float> %486, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %615 = shufflevector <2 x float> %487, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %616 = shufflevector <16 x float> %614, <16 x float> %615, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %617 = shufflevector <2 x float> %488, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %618 = shufflevector <16 x float> %616, <16 x float> %617, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %619 = shufflevector <2 x float> %489, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %620 = shufflevector <16 x float> %618, <16 x float> %619, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %621 = shufflevector <2 x float> %490, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %622 = shufflevector <16 x float> %620, <16 x float> %621, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %623 = shufflevector <2 x float> %491, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %624 = shufflevector <16 x float> %622, <16 x float> %623, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !54
  %625 = shufflevector <2 x float> %492, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %626 = shufflevector <16 x float> %624, <16 x float> %625, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !54
  %627 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %587, <4 x half> %560, <16 x float> %626, i32 0, i32 0, i32 0), !dbg !54
  %628 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %590, <4 x half> %564, <16 x float> %627, i32 0, i32 0, i32 0), !dbg !54
  %629 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %593, <4 x half> %568, <16 x float> %628, i32 0, i32 0, i32 0), !dbg !54
  %630 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %596, <4 x half> %572, <16 x float> %629, i32 0, i32 0, i32 0), !dbg !54
  %631 = add nuw nsw i64 %325, 32, !dbg !55
  %indvars = trunc i64 %631 to i32, !dbg !30
  %632 = icmp sgt i32 %33, %indvars, !dbg !30
  %633 = shufflevector <16 x float> %630, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %634 = shufflevector <16 x float> %630, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %635 = shufflevector <16 x float> %630, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %636 = shufflevector <16 x float> %630, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %637 = shufflevector <16 x float> %630, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %638 = shufflevector <16 x float> %630, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %639 = shufflevector <16 x float> %630, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %640 = shufflevector <16 x float> %630, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %641 = shufflevector <16 x float> %613, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %642 = shufflevector <16 x float> %613, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %643 = shufflevector <16 x float> %613, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %644 = shufflevector <16 x float> %613, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %645 = shufflevector <16 x float> %613, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %646 = shufflevector <16 x float> %613, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %647 = shufflevector <16 x float> %613, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %648 = shufflevector <16 x float> %613, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %632, label %324, label %._crit_edge.loopexit, !dbg !30

._crit_edge.loopexit:                             ; preds = %324
  %649 = shufflevector <16 x float> %630, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %650 = shufflevector <16 x float> %630, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %651 = shufflevector <16 x float> %630, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %652 = shufflevector <16 x float> %630, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %653 = shufflevector <16 x float> %613, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %654 = shufflevector <16 x float> %613, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %655 = shufflevector <16 x float> %613, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %656 = shufflevector <16 x float> %613, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br label %._crit_edge, !dbg !56

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %20
  %.lcssa23 = phi float [ 1.000000e+00, %20 ], [ %474, %._crit_edge.loopexit ]
  %.lcssa21 = phi float [ 0xFFF0000000000000, %20 ], [ %403, %._crit_edge.loopexit ]
  %657 = phi <4 x float> [ zeroinitializer, %20 ], [ %656, %._crit_edge.loopexit ]
  %658 = phi <4 x float> [ zeroinitializer, %20 ], [ %655, %._crit_edge.loopexit ]
  %659 = phi <4 x float> [ zeroinitializer, %20 ], [ %654, %._crit_edge.loopexit ]
  %660 = phi <4 x float> [ zeroinitializer, %20 ], [ %653, %._crit_edge.loopexit ]
  %661 = phi <4 x float> [ zeroinitializer, %20 ], [ %652, %._crit_edge.loopexit ]
  %662 = phi <4 x float> [ zeroinitializer, %20 ], [ %651, %._crit_edge.loopexit ]
  %663 = phi <4 x float> [ zeroinitializer, %20 ], [ %650, %._crit_edge.loopexit ]
  %664 = phi <4 x float> [ zeroinitializer, %20 ], [ %649, %._crit_edge.loopexit ]
  %665 = add i32 %33, 128, !dbg !56
  %.not38 = icmp eq i32 %33, 2147483520, !dbg !58
  br i1 %.not38, label %._crit_edge34, label %.lr.ph33, !dbg !58

.lr.ph33:                                         ; preds = %._crit_edge
  %666 = shl nuw nsw i32 %77, 6
  %667 = or disjoint i32 %140, %666
  %668 = or disjoint i32 %145, %666
  %669 = or disjoint i32 %149, %666
  %670 = or disjoint i32 %153, %666
  %671 = or disjoint i32 %157, %666
  %672 = or disjoint i32 %161, %666
  %673 = or disjoint i32 %165, %666
  %674 = or disjoint i32 %169, %666
  %675 = zext nneg i32 %667 to i64
  %676 = getelementptr half, ptr addrspace(3) @global_smem, i64 %675
  %677 = zext nneg i32 %668 to i64
  %678 = getelementptr half, ptr addrspace(3) @global_smem, i64 %677
  %679 = zext nneg i32 %669 to i64
  %680 = getelementptr half, ptr addrspace(3) @global_smem, i64 %679
  %681 = zext nneg i32 %670 to i64
  %682 = getelementptr half, ptr addrspace(3) @global_smem, i64 %681
  %683 = zext nneg i32 %671 to i64
  %684 = getelementptr half, ptr addrspace(3) @global_smem, i64 %683
  %685 = zext nneg i32 %672 to i64
  %686 = getelementptr half, ptr addrspace(3) @global_smem, i64 %685
  %687 = zext nneg i32 %673 to i64
  %688 = getelementptr half, ptr addrspace(3) @global_smem, i64 %687
  %689 = zext nneg i32 %674 to i64
  %690 = getelementptr half, ptr addrspace(3) @global_smem, i64 %689
  %691 = shl i32 %35, 2
  %692 = xor i32 %691, 128
  %693 = or disjoint i32 %96, %59
  %694 = zext nneg i32 %693 to i64
  %695 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %694
  %696 = shl nuw nsw i32 %36, 3
  %697 = and i32 %696, 256
  %698 = or disjoint i32 %697, %77
  %699 = or disjoint i32 %698, 64
  %700 = or disjoint i32 %698, 128
  %701 = or disjoint i32 %698, 192
  %702 = or disjoint i32 %698, 512
  %703 = or disjoint i32 %698, 576
  %704 = or disjoint i32 %698, 640
  %705 = or disjoint i32 %698, 704
  %706 = or disjoint i32 %698, 1024
  %707 = or disjoint i32 %698, 1088
  %708 = or disjoint i32 %698, 1152
  %709 = or disjoint i32 %698, 1216
  %710 = or disjoint i32 %698, 1536
  %711 = or disjoint i32 %698, 1600
  %712 = or disjoint i32 %698, 1664
  %713 = or disjoint i32 %698, 1728
  %714 = or disjoint i32 %698, 32
  %715 = or disjoint i32 %698, 96
  %716 = or disjoint i32 %698, 160
  %717 = or disjoint i32 %698, 224
  %718 = or disjoint i32 %698, 544
  %719 = or disjoint i32 %698, 608
  %720 = or disjoint i32 %698, 672
  %721 = or disjoint i32 %698, 736
  %722 = or disjoint i32 %698, 1056
  %723 = or disjoint i32 %698, 1120
  %724 = or disjoint i32 %698, 1184
  %725 = or disjoint i32 %698, 1248
  %726 = or disjoint i32 %698, 1568
  %727 = or disjoint i32 %698, 1632
  %728 = or disjoint i32 %698, 1696
  %729 = or disjoint i32 %698, 1760
  %730 = zext nneg i32 %698 to i64
  %731 = getelementptr half, ptr addrspace(3) @global_smem, i64 %730
  %732 = zext nneg i32 %699 to i64
  %733 = getelementptr half, ptr addrspace(3) @global_smem, i64 %732
  %734 = zext nneg i32 %700 to i64
  %735 = getelementptr half, ptr addrspace(3) @global_smem, i64 %734
  %736 = zext nneg i32 %701 to i64
  %737 = getelementptr half, ptr addrspace(3) @global_smem, i64 %736
  %738 = zext nneg i32 %702 to i64
  %739 = getelementptr half, ptr addrspace(3) @global_smem, i64 %738
  %740 = zext nneg i32 %703 to i64
  %741 = getelementptr half, ptr addrspace(3) @global_smem, i64 %740
  %742 = zext nneg i32 %704 to i64
  %743 = getelementptr half, ptr addrspace(3) @global_smem, i64 %742
  %744 = zext nneg i32 %705 to i64
  %745 = getelementptr half, ptr addrspace(3) @global_smem, i64 %744
  %746 = zext nneg i32 %706 to i64
  %747 = getelementptr half, ptr addrspace(3) @global_smem, i64 %746
  %748 = zext nneg i32 %707 to i64
  %749 = getelementptr half, ptr addrspace(3) @global_smem, i64 %748
  %750 = zext nneg i32 %708 to i64
  %751 = getelementptr half, ptr addrspace(3) @global_smem, i64 %750
  %752 = zext nneg i32 %709 to i64
  %753 = getelementptr half, ptr addrspace(3) @global_smem, i64 %752
  %754 = zext nneg i32 %710 to i64
  %755 = getelementptr half, ptr addrspace(3) @global_smem, i64 %754
  %756 = zext nneg i32 %711 to i64
  %757 = getelementptr half, ptr addrspace(3) @global_smem, i64 %756
  %758 = zext nneg i32 %712 to i64
  %759 = getelementptr half, ptr addrspace(3) @global_smem, i64 %758
  %760 = zext nneg i32 %713 to i64
  %761 = getelementptr half, ptr addrspace(3) @global_smem, i64 %760
  %762 = zext nneg i32 %714 to i64
  %763 = getelementptr half, ptr addrspace(3) @global_smem, i64 %762
  %764 = zext nneg i32 %715 to i64
  %765 = getelementptr half, ptr addrspace(3) @global_smem, i64 %764
  %766 = zext nneg i32 %716 to i64
  %767 = getelementptr half, ptr addrspace(3) @global_smem, i64 %766
  %768 = zext nneg i32 %717 to i64
  %769 = getelementptr half, ptr addrspace(3) @global_smem, i64 %768
  %770 = zext nneg i32 %718 to i64
  %771 = getelementptr half, ptr addrspace(3) @global_smem, i64 %770
  %772 = zext nneg i32 %719 to i64
  %773 = getelementptr half, ptr addrspace(3) @global_smem, i64 %772
  %774 = zext nneg i32 %720 to i64
  %775 = getelementptr half, ptr addrspace(3) @global_smem, i64 %774
  %776 = zext nneg i32 %721 to i64
  %777 = getelementptr half, ptr addrspace(3) @global_smem, i64 %776
  %778 = zext nneg i32 %722 to i64
  %779 = getelementptr half, ptr addrspace(3) @global_smem, i64 %778
  %780 = zext nneg i32 %723 to i64
  %781 = getelementptr half, ptr addrspace(3) @global_smem, i64 %780
  %782 = zext nneg i32 %724 to i64
  %783 = getelementptr half, ptr addrspace(3) @global_smem, i64 %782
  %784 = zext nneg i32 %725 to i64
  %785 = getelementptr half, ptr addrspace(3) @global_smem, i64 %784
  %786 = zext nneg i32 %726 to i64
  %787 = getelementptr half, ptr addrspace(3) @global_smem, i64 %786
  %788 = zext nneg i32 %727 to i64
  %789 = getelementptr half, ptr addrspace(3) @global_smem, i64 %788
  %790 = zext nneg i32 %728 to i64
  %791 = getelementptr half, ptr addrspace(3) @global_smem, i64 %790
  %792 = zext nneg i32 %729 to i64
  %793 = getelementptr half, ptr addrspace(3) @global_smem, i64 %792
  %794 = shufflevector <4 x float> %661, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %795 = shufflevector <4 x float> %661, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %796 = shufflevector <4 x float> %662, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %797 = shufflevector <4 x float> %662, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %798 = shufflevector <4 x float> %663, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %799 = shufflevector <4 x float> %663, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %800 = shufflevector <4 x float> %664, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %801 = shufflevector <4 x float> %664, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %802 = shufflevector <4 x float> %657, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %803 = shufflevector <4 x float> %657, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %804 = shufflevector <4 x float> %658, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %805 = shufflevector <4 x float> %658, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %806 = shufflevector <4 x float> %659, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %807 = shufflevector <4 x float> %659, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %808 = shufflevector <4 x float> %660, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %809 = shufflevector <4 x float> %660, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  br label %810, !dbg !58

810:                                              ; preds = %.lr.ph33, %810
  %811 = phi i64 [ %34, %.lr.ph33 ], [ %1175, %810 ]
  %812 = phi float [ %.lcssa21, %.lr.ph33 ], [ %963, %810 ]
  %813 = phi float [ %.lcssa23, %.lr.ph33 ], [ %1018, %810 ]
  %814 = phi <2 x float> [ %794, %.lr.ph33 ], [ %1177, %810 ]
  %815 = phi <2 x float> [ %795, %.lr.ph33 ], [ %1178, %810 ]
  %816 = phi <2 x float> [ %796, %.lr.ph33 ], [ %1179, %810 ]
  %817 = phi <2 x float> [ %797, %.lr.ph33 ], [ %1180, %810 ]
  %818 = phi <2 x float> [ %798, %.lr.ph33 ], [ %1181, %810 ]
  %819 = phi <2 x float> [ %799, %.lr.ph33 ], [ %1182, %810 ]
  %820 = phi <2 x float> [ %800, %.lr.ph33 ], [ %1183, %810 ]
  %821 = phi <2 x float> [ %801, %.lr.ph33 ], [ %1184, %810 ]
  %822 = phi <2 x float> [ %802, %.lr.ph33 ], [ %1185, %810 ]
  %823 = phi <2 x float> [ %803, %.lr.ph33 ], [ %1186, %810 ]
  %824 = phi <2 x float> [ %804, %.lr.ph33 ], [ %1187, %810 ]
  %825 = phi <2 x float> [ %805, %.lr.ph33 ], [ %1188, %810 ]
  %826 = phi <2 x float> [ %806, %.lr.ph33 ], [ %1189, %810 ]
  %827 = phi <2 x float> [ %807, %.lr.ph33 ], [ %1190, %810 ]
  %828 = phi <2 x float> [ %808, %.lr.ph33 ], [ %1191, %810 ]
  %829 = phi <2 x float> [ %809, %.lr.ph33 ], [ %1192, %810 ]
  %indvars47 = trunc i64 %811 to i32
  %830 = or disjoint i64 %811, %45, !dbg !59
  %831 = mul i64 %830, %74, !dbg !59
  %gep29 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %831, !dbg !59
  %832 = load <8 x half>, ptr addrspace(1) %gep29, align 16, !dbg !59
  %833 = mul i64 %830, %76, !dbg !60
  %gep31 = getelementptr half, ptr addrspace(1) %invariant.gep24, i64 %833, !dbg !60
  %834 = load <8 x half>, ptr addrspace(1) %gep31, align 16, !dbg !60
  fence syncscope("workgroup") release, !dbg !60
  tail call void @llvm.amdgcn.s.barrier(), !dbg !60
  fence syncscope("workgroup") acquire, !dbg !60
  %835 = shufflevector <8 x half> %834, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !60
  store <4 x half> %835, ptr addrspace(3) %99, align 8, !dbg !60
  %836 = shufflevector <8 x half> %834, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !60
  store <4 x half> %836, ptr addrspace(3) %107, align 8, !dbg !60
  fence syncscope("workgroup") release, !dbg !60
  tail call void @llvm.amdgcn.s.barrier(), !dbg !60
  fence syncscope("workgroup") acquire, !dbg !60
  %837 = load <4 x half>, ptr addrspace(3) %676, align 8, !dbg !60
  %838 = load <4 x half>, ptr addrspace(3) %678, align 8, !dbg !60
  %839 = load <4 x half>, ptr addrspace(3) %680, align 8, !dbg !60
  %840 = load <4 x half>, ptr addrspace(3) %682, align 8, !dbg !60
  %841 = load <4 x half>, ptr addrspace(3) %684, align 8, !dbg !60
  %842 = load <4 x half>, ptr addrspace(3) %686, align 8, !dbg !60
  %843 = load <4 x half>, ptr addrspace(3) %688, align 8, !dbg !60
  %844 = load <4 x half>, ptr addrspace(3) %690, align 8, !dbg !60
  %845 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %837, <4 x half> %173, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !61
  %846 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %838, <4 x half> %176, <16 x float> %845, i32 0, i32 0, i32 0), !dbg !61
  %847 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %839, <4 x half> %179, <16 x float> %846, i32 0, i32 0, i32 0), !dbg !61
  %848 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %840, <4 x half> %182, <16 x float> %847, i32 0, i32 0, i32 0), !dbg !61
  %849 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %841, <4 x half> %185, <16 x float> %848, i32 0, i32 0, i32 0), !dbg !61
  %850 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %842, <4 x half> %188, <16 x float> %849, i32 0, i32 0, i32 0), !dbg !61
  %851 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %843, <4 x half> %191, <16 x float> %850, i32 0, i32 0, i32 0), !dbg !61
  %852 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %844, <4 x half> %194, <16 x float> %851, i32 0, i32 0, i32 0), !dbg !61
  %853 = extractelement <16 x float> %852, i64 0, !dbg !61
  %854 = extractelement <16 x float> %852, i64 1, !dbg !61
  %855 = extractelement <16 x float> %852, i64 2, !dbg !61
  %856 = extractelement <16 x float> %852, i64 3, !dbg !61
  %857 = extractelement <16 x float> %852, i64 4, !dbg !61
  %858 = extractelement <16 x float> %852, i64 5, !dbg !61
  %859 = extractelement <16 x float> %852, i64 6, !dbg !61
  %860 = extractelement <16 x float> %852, i64 7, !dbg !61
  %861 = extractelement <16 x float> %852, i64 8, !dbg !61
  %862 = extractelement <16 x float> %852, i64 9, !dbg !61
  %863 = extractelement <16 x float> %852, i64 10, !dbg !61
  %864 = extractelement <16 x float> %852, i64 11, !dbg !61
  %865 = extractelement <16 x float> %852, i64 12, !dbg !61
  %866 = extractelement <16 x float> %852, i64 13, !dbg !61
  %867 = extractelement <16 x float> %852, i64 14, !dbg !61
  %868 = extractelement <16 x float> %852, i64 15, !dbg !61
  %869 = or disjoint i32 %38, %indvars47, !dbg !62
  %870 = or disjoint i32 %38, %indvars47, !dbg !62
  %871 = or disjoint i32 %38, %indvars47, !dbg !62
  %872 = or disjoint i32 %871, 2, !dbg !62
  %873 = or disjoint i32 %38, %indvars47, !dbg !62
  %874 = or disjoint i32 %873, 3, !dbg !62
  %875 = or disjoint i32 %86, %indvars47, !dbg !62
  %876 = or disjoint i32 %38, %indvars47, !dbg !62
  %877 = or disjoint i32 %876, 9, !dbg !62
  %878 = or disjoint i32 %38, %indvars47, !dbg !62
  %879 = or disjoint i32 %878, 10, !dbg !62
  %880 = or disjoint i32 %38, %indvars47, !dbg !62
  %881 = or disjoint i32 %880, 11, !dbg !62
  %882 = or disjoint i32 %87, %indvars47, !dbg !62
  %883 = or disjoint i32 %38, %indvars47, !dbg !62
  %884 = or disjoint i32 %883, 17, !dbg !62
  %885 = or disjoint i32 %38, %indvars47, !dbg !62
  %886 = or disjoint i32 %885, 18, !dbg !62
  %887 = or disjoint i32 %38, %indvars47, !dbg !62
  %888 = or disjoint i32 %887, 19, !dbg !62
  %889 = or disjoint i32 %88, %indvars47, !dbg !62
  %890 = or disjoint i32 %38, %indvars47, !dbg !62
  %891 = or disjoint i32 %890, 25, !dbg !62
  %892 = or disjoint i32 %38, %indvars47, !dbg !62
  %893 = or disjoint i32 %892, 26, !dbg !62
  %894 = or disjoint i32 %38, %indvars47, !dbg !62
  %895 = or disjoint i32 %894, 27, !dbg !62
  %.not = icmp slt i32 %83, %869, !dbg !63
  %.not3.not = icmp sgt i32 %83, %870, !dbg !63
  %.not4 = icmp slt i32 %83, %872, !dbg !63
  %.not5 = icmp slt i32 %83, %874, !dbg !63
  %.not6 = icmp slt i32 %83, %875, !dbg !63
  %.not7 = icmp slt i32 %83, %877, !dbg !63
  %.not8 = icmp slt i32 %83, %879, !dbg !63
  %.not9 = icmp slt i32 %83, %881, !dbg !63
  %.not10 = icmp slt i32 %83, %882, !dbg !63
  %.not11 = icmp slt i32 %83, %884, !dbg !63
  %.not12 = icmp slt i32 %83, %886, !dbg !63
  %.not13 = icmp slt i32 %83, %888, !dbg !63
  %.not14 = icmp slt i32 %83, %889, !dbg !63
  %.not15 = icmp slt i32 %83, %891, !dbg !63
  %.not16 = icmp slt i32 %83, %893, !dbg !63
  %.not17 = icmp slt i32 %83, %895, !dbg !63
  %896 = fmul float %85, %853, !dbg !64
  %897 = fmul float %85, %854, !dbg !64
  %898 = fmul float %85, %855, !dbg !64
  %899 = fmul float %85, %856, !dbg !64
  %900 = fmul float %85, %857, !dbg !64
  %901 = fmul float %85, %858, !dbg !64
  %902 = fmul float %85, %859, !dbg !64
  %903 = fmul float %85, %860, !dbg !64
  %904 = fmul float %85, %861, !dbg !64
  %905 = fmul float %85, %862, !dbg !64
  %906 = fmul float %85, %863, !dbg !64
  %907 = fmul float %85, %864, !dbg !64
  %908 = fmul float %85, %865, !dbg !64
  %909 = fmul float %85, %866, !dbg !64
  %910 = fmul float %85, %867, !dbg !64
  %911 = fmul float %85, %868, !dbg !64
  %912 = select i1 %.not, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %913 = select i1 %.not3.not, float 0.000000e+00, float -1.000000e+06, !dbg !65
  %914 = select i1 %.not4, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %915 = select i1 %.not5, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %916 = select i1 %.not6, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %917 = select i1 %.not7, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %918 = select i1 %.not8, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %919 = select i1 %.not9, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %920 = select i1 %.not10, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %921 = select i1 %.not11, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %922 = select i1 %.not12, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %923 = select i1 %.not13, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %924 = select i1 %.not14, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %925 = select i1 %.not15, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %926 = select i1 %.not16, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %927 = select i1 %.not17, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %928 = fadd float %912, %896, !dbg !66
  %929 = fadd float %913, %897, !dbg !66
  %930 = fadd float %914, %898, !dbg !66
  %931 = fadd float %915, %899, !dbg !66
  %932 = fadd float %916, %900, !dbg !66
  %933 = fadd float %917, %901, !dbg !66
  %934 = fadd float %918, %902, !dbg !66
  %935 = fadd float %919, %903, !dbg !66
  %936 = fadd float %920, %904, !dbg !66
  %937 = fadd float %921, %905, !dbg !66
  %938 = fadd float %922, %906, !dbg !66
  %939 = fadd float %923, %907, !dbg !66
  %940 = fadd float %924, %908, !dbg !66
  %941 = fadd float %925, %909, !dbg !66
  %942 = fadd float %926, %910, !dbg !66
  %943 = fadd float %927, %911, !dbg !66
  %944 = tail call float @llvm.maxnum.f32(float %928, float %929), !dbg !67
  %945 = tail call float @llvm.maxnum.f32(float %944, float %930), !dbg !67
  %946 = tail call float @llvm.maxnum.f32(float %945, float %931), !dbg !67
  %947 = tail call float @llvm.maxnum.f32(float %946, float %932), !dbg !67
  %948 = tail call float @llvm.maxnum.f32(float %947, float %933), !dbg !67
  %949 = tail call float @llvm.maxnum.f32(float %948, float %934), !dbg !67
  %950 = tail call float @llvm.maxnum.f32(float %949, float %935), !dbg !67
  %951 = tail call float @llvm.maxnum.f32(float %950, float %936), !dbg !67
  %952 = tail call float @llvm.maxnum.f32(float %951, float %937), !dbg !67
  %953 = tail call float @llvm.maxnum.f32(float %952, float %938), !dbg !67
  %954 = tail call float @llvm.maxnum.f32(float %953, float %939), !dbg !67
  %955 = tail call float @llvm.maxnum.f32(float %954, float %940), !dbg !67
  %956 = tail call float @llvm.maxnum.f32(float %955, float %941), !dbg !67
  %957 = tail call float @llvm.maxnum.f32(float %956, float %942), !dbg !67
  %958 = tail call float @llvm.maxnum.f32(float %957, float %943), !dbg !67
  %959 = bitcast float %958 to i32, !dbg !68
  %960 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %692, i32 %959), !dbg !68
  %961 = bitcast i32 %960 to float, !dbg !68
  %962 = tail call float @llvm.maxnum.f32(float %958, float %961), !dbg !67
  %963 = tail call float @llvm.maxnum.f32(float %812, float %962), !dbg !69
  %964 = fsub float %928, %963, !dbg !70
  %965 = fsub float %929, %963, !dbg !70
  %966 = fsub float %930, %963, !dbg !70
  %967 = fsub float %931, %963, !dbg !70
  %968 = fsub float %932, %963, !dbg !70
  %969 = fsub float %933, %963, !dbg !70
  %970 = fsub float %934, %963, !dbg !70
  %971 = fsub float %935, %963, !dbg !70
  %972 = fsub float %936, %963, !dbg !70
  %973 = fsub float %937, %963, !dbg !70
  %974 = fsub float %938, %963, !dbg !70
  %975 = fsub float %939, %963, !dbg !70
  %976 = fsub float %940, %963, !dbg !70
  %977 = fsub float %941, %963, !dbg !70
  %978 = fsub float %942, %963, !dbg !70
  %979 = fsub float %943, %963, !dbg !70
  %980 = tail call float @llvm.amdgcn.exp2.f32(float %964), !dbg !71
  %981 = tail call float @llvm.amdgcn.exp2.f32(float %965), !dbg !71
  %982 = tail call float @llvm.amdgcn.exp2.f32(float %966), !dbg !71
  %983 = tail call float @llvm.amdgcn.exp2.f32(float %967), !dbg !71
  %984 = tail call float @llvm.amdgcn.exp2.f32(float %968), !dbg !71
  %985 = tail call float @llvm.amdgcn.exp2.f32(float %969), !dbg !71
  %986 = tail call float @llvm.amdgcn.exp2.f32(float %970), !dbg !71
  %987 = tail call float @llvm.amdgcn.exp2.f32(float %971), !dbg !71
  %988 = tail call float @llvm.amdgcn.exp2.f32(float %972), !dbg !71
  %989 = tail call float @llvm.amdgcn.exp2.f32(float %973), !dbg !71
  %990 = tail call float @llvm.amdgcn.exp2.f32(float %974), !dbg !71
  %991 = tail call float @llvm.amdgcn.exp2.f32(float %975), !dbg !71
  %992 = tail call float @llvm.amdgcn.exp2.f32(float %976), !dbg !71
  %993 = tail call float @llvm.amdgcn.exp2.f32(float %977), !dbg !71
  %994 = tail call float @llvm.amdgcn.exp2.f32(float %978), !dbg !71
  %995 = tail call float @llvm.amdgcn.exp2.f32(float %979), !dbg !71
  %996 = fadd float %980, %981, !dbg !72
  %997 = fadd float %982, %996, !dbg !72
  %998 = fadd float %983, %997, !dbg !72
  %999 = fadd float %984, %998, !dbg !72
  %1000 = fadd float %985, %999, !dbg !72
  %1001 = fadd float %986, %1000, !dbg !72
  %1002 = fadd float %987, %1001, !dbg !72
  %1003 = fadd float %988, %1002, !dbg !72
  %1004 = fadd float %989, %1003, !dbg !72
  %1005 = fadd float %990, %1004, !dbg !72
  %1006 = fadd float %991, %1005, !dbg !72
  %1007 = fadd float %992, %1006, !dbg !72
  %1008 = fadd float %993, %1007, !dbg !72
  %1009 = fadd float %994, %1008, !dbg !72
  %1010 = fadd float %995, %1009, !dbg !72
  %1011 = bitcast float %1010 to i32, !dbg !73
  %1012 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %692, i32 %1011), !dbg !73
  %1013 = bitcast i32 %1012 to float, !dbg !73
  %1014 = fadd float %1010, %1013, !dbg !72
  %1015 = fsub float %812, %963, !dbg !74
  %1016 = tail call float @llvm.amdgcn.exp2.f32(float %1015), !dbg !75
  %1017 = fmul float %813, %1016, !dbg !76
  %1018 = fadd float %1017, %1014, !dbg !77
  %1019 = insertelement <2 x float> poison, float %1016, i64 0, !dbg !78
  %1020 = shufflevector <2 x float> %1019, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !78
  %1021 = fmul <2 x float> %822, %1020, !dbg !78
  %1022 = fmul <2 x float> %823, %1020, !dbg !78
  %1023 = fmul <2 x float> %824, %1020, !dbg !78
  %1024 = fmul <2 x float> %825, %1020, !dbg !78
  %1025 = fmul <2 x float> %826, %1020, !dbg !78
  %1026 = fmul <2 x float> %827, %1020, !dbg !78
  %1027 = fmul <2 x float> %828, %1020, !dbg !78
  %1028 = fmul <2 x float> %829, %1020, !dbg !78
  %1029 = fmul <2 x float> %814, %1020, !dbg !78
  %1030 = fmul <2 x float> %815, %1020, !dbg !78
  %1031 = fmul <2 x float> %816, %1020, !dbg !78
  %1032 = fmul <2 x float> %817, %1020, !dbg !78
  %1033 = fmul <2 x float> %818, %1020, !dbg !78
  %1034 = fmul <2 x float> %819, %1020, !dbg !78
  %1035 = fmul <2 x float> %820, %1020, !dbg !78
  %1036 = fmul <2 x float> %821, %1020, !dbg !78
  fence syncscope("workgroup") release, !dbg !59
  tail call void @llvm.amdgcn.s.barrier(), !dbg !59
  fence syncscope("workgroup") acquire, !dbg !59
  store <8 x half> %832, ptr addrspace(3) %695, align 16, !dbg !59
  fence syncscope("workgroup") release, !dbg !59
  tail call void @llvm.amdgcn.s.barrier(), !dbg !59
  fence syncscope("workgroup") acquire, !dbg !59
  %1037 = load <1 x half>, ptr addrspace(3) %731, align 2, !dbg !59
  %1038 = load <1 x half>, ptr addrspace(3) %733, align 2, !dbg !59
  %1039 = load <1 x half>, ptr addrspace(3) %735, align 2, !dbg !59
  %1040 = shufflevector <1 x half> %1039, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1041 = load <1 x half>, ptr addrspace(3) %737, align 2, !dbg !59
  %1042 = shufflevector <1 x half> %1041, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1043 = load <1 x half>, ptr addrspace(3) %739, align 2, !dbg !59
  %1044 = load <1 x half>, ptr addrspace(3) %741, align 2, !dbg !59
  %1045 = load <1 x half>, ptr addrspace(3) %743, align 2, !dbg !59
  %1046 = shufflevector <1 x half> %1045, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1047 = load <1 x half>, ptr addrspace(3) %745, align 2, !dbg !59
  %1048 = shufflevector <1 x half> %1047, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1049 = load <1 x half>, ptr addrspace(3) %747, align 2, !dbg !59
  %1050 = load <1 x half>, ptr addrspace(3) %749, align 2, !dbg !59
  %1051 = load <1 x half>, ptr addrspace(3) %751, align 2, !dbg !59
  %1052 = shufflevector <1 x half> %1051, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1053 = load <1 x half>, ptr addrspace(3) %753, align 2, !dbg !59
  %1054 = shufflevector <1 x half> %1053, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1055 = load <1 x half>, ptr addrspace(3) %755, align 2, !dbg !59
  %1056 = load <1 x half>, ptr addrspace(3) %757, align 2, !dbg !59
  %1057 = load <1 x half>, ptr addrspace(3) %759, align 2, !dbg !59
  %1058 = shufflevector <1 x half> %1057, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1059 = load <1 x half>, ptr addrspace(3) %761, align 2, !dbg !59
  %1060 = shufflevector <1 x half> %1059, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1061 = load <1 x half>, ptr addrspace(3) %763, align 2, !dbg !59
  %1062 = load <1 x half>, ptr addrspace(3) %765, align 2, !dbg !59
  %1063 = load <1 x half>, ptr addrspace(3) %767, align 2, !dbg !59
  %1064 = shufflevector <1 x half> %1063, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1065 = load <1 x half>, ptr addrspace(3) %769, align 2, !dbg !59
  %1066 = shufflevector <1 x half> %1065, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1067 = load <1 x half>, ptr addrspace(3) %771, align 2, !dbg !59
  %1068 = load <1 x half>, ptr addrspace(3) %773, align 2, !dbg !59
  %1069 = load <1 x half>, ptr addrspace(3) %775, align 2, !dbg !59
  %1070 = shufflevector <1 x half> %1069, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1071 = load <1 x half>, ptr addrspace(3) %777, align 2, !dbg !59
  %1072 = shufflevector <1 x half> %1071, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1073 = load <1 x half>, ptr addrspace(3) %779, align 2, !dbg !59
  %1074 = load <1 x half>, ptr addrspace(3) %781, align 2, !dbg !59
  %1075 = load <1 x half>, ptr addrspace(3) %783, align 2, !dbg !59
  %1076 = shufflevector <1 x half> %1075, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1077 = load <1 x half>, ptr addrspace(3) %785, align 2, !dbg !59
  %1078 = shufflevector <1 x half> %1077, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1079 = load <1 x half>, ptr addrspace(3) %787, align 2, !dbg !59
  %1080 = load <1 x half>, ptr addrspace(3) %789, align 2, !dbg !59
  %1081 = load <1 x half>, ptr addrspace(3) %791, align 2, !dbg !59
  %1082 = shufflevector <1 x half> %1081, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1083 = load <1 x half>, ptr addrspace(3) %793, align 2, !dbg !59
  %1084 = shufflevector <1 x half> %1083, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1085 = fptrunc float %980 to half, !dbg !79
  %1086 = fptrunc float %981 to half, !dbg !79
  %1087 = fptrunc float %982 to half, !dbg !79
  %1088 = fptrunc float %983 to half, !dbg !79
  %1089 = fptrunc float %984 to half, !dbg !79
  %1090 = fptrunc float %985 to half, !dbg !79
  %1091 = fptrunc float %986 to half, !dbg !79
  %1092 = fptrunc float %987 to half, !dbg !79
  %1093 = fptrunc float %988 to half, !dbg !79
  %1094 = fptrunc float %989 to half, !dbg !79
  %1095 = fptrunc float %990 to half, !dbg !79
  %1096 = fptrunc float %991 to half, !dbg !79
  %1097 = fptrunc float %992 to half, !dbg !79
  %1098 = fptrunc float %993 to half, !dbg !79
  %1099 = fptrunc float %994 to half, !dbg !79
  %1100 = fptrunc float %995 to half, !dbg !79
  %1101 = insertelement <4 x half> poison, half %1085, i64 0, !dbg !80
  %1102 = insertelement <4 x half> %1101, half %1086, i64 1, !dbg !80
  %1103 = insertelement <4 x half> %1102, half %1087, i64 2, !dbg !80
  %1104 = insertelement <4 x half> %1103, half %1088, i64 3, !dbg !80
  %1105 = insertelement <4 x half> poison, half %1089, i64 0, !dbg !80
  %1106 = insertelement <4 x half> %1105, half %1090, i64 1, !dbg !80
  %1107 = insertelement <4 x half> %1106, half %1091, i64 2, !dbg !80
  %1108 = insertelement <4 x half> %1107, half %1092, i64 3, !dbg !80
  %1109 = insertelement <4 x half> poison, half %1093, i64 0, !dbg !80
  %1110 = insertelement <4 x half> %1109, half %1094, i64 1, !dbg !80
  %1111 = insertelement <4 x half> %1110, half %1095, i64 2, !dbg !80
  %1112 = insertelement <4 x half> %1111, half %1096, i64 3, !dbg !80
  %1113 = insertelement <4 x half> poison, half %1097, i64 0, !dbg !80
  %1114 = insertelement <4 x half> %1113, half %1098, i64 1, !dbg !80
  %1115 = insertelement <4 x half> %1114, half %1099, i64 2, !dbg !80
  %1116 = insertelement <4 x half> %1115, half %1100, i64 3, !dbg !80
  %1117 = shufflevector <1 x half> %1037, <1 x half> %1038, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1118 = shufflevector <4 x half> %1117, <4 x half> %1040, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1119 = shufflevector <4 x half> %1118, <4 x half> %1042, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1120 = shufflevector <1 x half> %1043, <1 x half> %1044, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1121 = shufflevector <4 x half> %1120, <4 x half> %1046, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1122 = shufflevector <4 x half> %1121, <4 x half> %1048, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1123 = shufflevector <1 x half> %1049, <1 x half> %1050, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1124 = shufflevector <4 x half> %1123, <4 x half> %1052, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1125 = shufflevector <4 x half> %1124, <4 x half> %1054, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1126 = shufflevector <1 x half> %1055, <1 x half> %1056, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1127 = shufflevector <4 x half> %1126, <4 x half> %1058, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1128 = shufflevector <4 x half> %1127, <4 x half> %1060, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1129 = shufflevector <1 x half> %1061, <1 x half> %1062, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1130 = shufflevector <4 x half> %1129, <4 x half> %1064, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1131 = shufflevector <4 x half> %1130, <4 x half> %1066, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1132 = shufflevector <1 x half> %1067, <1 x half> %1068, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1133 = shufflevector <4 x half> %1132, <4 x half> %1070, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1134 = shufflevector <4 x half> %1133, <4 x half> %1072, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1135 = shufflevector <1 x half> %1073, <1 x half> %1074, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1136 = shufflevector <4 x half> %1135, <4 x half> %1076, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1137 = shufflevector <4 x half> %1136, <4 x half> %1078, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1138 = shufflevector <1 x half> %1079, <1 x half> %1080, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1139 = shufflevector <4 x half> %1138, <4 x half> %1082, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1140 = shufflevector <4 x half> %1139, <4 x half> %1084, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1141 = shufflevector <2 x float> %1021, <2 x float> %1022, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1142 = shufflevector <2 x float> %1023, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1143 = shufflevector <16 x float> %1141, <16 x float> %1142, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1144 = shufflevector <2 x float> %1024, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1145 = shufflevector <16 x float> %1143, <16 x float> %1144, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1146 = shufflevector <2 x float> %1025, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1147 = shufflevector <16 x float> %1145, <16 x float> %1146, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1148 = shufflevector <2 x float> %1026, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1149 = shufflevector <16 x float> %1147, <16 x float> %1148, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1150 = shufflevector <2 x float> %1027, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1151 = shufflevector <16 x float> %1149, <16 x float> %1150, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !80
  %1152 = shufflevector <2 x float> %1028, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1153 = shufflevector <16 x float> %1151, <16 x float> %1152, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !80
  %1154 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1119, <4 x half> %1104, <16 x float> %1153, i32 0, i32 0, i32 0), !dbg !80
  %1155 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1122, <4 x half> %1108, <16 x float> %1154, i32 0, i32 0, i32 0), !dbg !80
  %1156 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1125, <4 x half> %1112, <16 x float> %1155, i32 0, i32 0, i32 0), !dbg !80
  %1157 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1128, <4 x half> %1116, <16 x float> %1156, i32 0, i32 0, i32 0), !dbg !80
  %1158 = shufflevector <2 x float> %1029, <2 x float> %1030, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1159 = shufflevector <2 x float> %1031, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1160 = shufflevector <16 x float> %1158, <16 x float> %1159, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1161 = shufflevector <2 x float> %1032, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1162 = shufflevector <16 x float> %1160, <16 x float> %1161, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1163 = shufflevector <2 x float> %1033, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1164 = shufflevector <16 x float> %1162, <16 x float> %1163, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1165 = shufflevector <2 x float> %1034, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1166 = shufflevector <16 x float> %1164, <16 x float> %1165, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1167 = shufflevector <2 x float> %1035, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1168 = shufflevector <16 x float> %1166, <16 x float> %1167, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !80
  %1169 = shufflevector <2 x float> %1036, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1170 = shufflevector <16 x float> %1168, <16 x float> %1169, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !80
  %1171 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1131, <4 x half> %1104, <16 x float> %1170, i32 0, i32 0, i32 0), !dbg !80
  %1172 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1134, <4 x half> %1108, <16 x float> %1171, i32 0, i32 0, i32 0), !dbg !80
  %1173 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1137, <4 x half> %1112, <16 x float> %1172, i32 0, i32 0, i32 0), !dbg !80
  %1174 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1140, <4 x half> %1116, <16 x float> %1173, i32 0, i32 0, i32 0), !dbg !80
  %1175 = add nsw i64 %811, 32, !dbg !81
  %indvars46 = trunc i64 %1175 to i32, !dbg !58
  %1176 = icmp sgt i32 %665, %indvars46, !dbg !58
  %1177 = shufflevector <16 x float> %1174, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1178 = shufflevector <16 x float> %1174, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1179 = shufflevector <16 x float> %1174, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1180 = shufflevector <16 x float> %1174, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1181 = shufflevector <16 x float> %1174, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1182 = shufflevector <16 x float> %1174, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1183 = shufflevector <16 x float> %1174, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1184 = shufflevector <16 x float> %1174, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1185 = shufflevector <16 x float> %1157, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1186 = shufflevector <16 x float> %1157, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1187 = shufflevector <16 x float> %1157, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1188 = shufflevector <16 x float> %1157, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1189 = shufflevector <16 x float> %1157, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1190 = shufflevector <16 x float> %1157, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1191 = shufflevector <16 x float> %1157, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1192 = shufflevector <16 x float> %1157, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %1176, label %810, label %._crit_edge34.loopexit, !dbg !58

._crit_edge34.loopexit:                           ; preds = %810
  %1193 = shufflevector <16 x float> %1174, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !32
  %1194 = shufflevector <16 x float> %1174, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !32
  %1195 = shufflevector <16 x float> %1174, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !32
  %1196 = shufflevector <16 x float> %1174, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %1197 = shufflevector <16 x float> %1157, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !32
  %1198 = shufflevector <16 x float> %1157, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !32
  %1199 = shufflevector <16 x float> %1157, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !32
  %1200 = shufflevector <16 x float> %1157, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !32
  br label %._crit_edge34, !dbg !82

._crit_edge34:                                    ; preds = %._crit_edge34.loopexit, %._crit_edge
  %.lcssa20 = phi float [ %.lcssa23, %._crit_edge ], [ %1018, %._crit_edge34.loopexit ], !dbg !32
  %.lcssa = phi float [ %.lcssa21, %._crit_edge ], [ %963, %._crit_edge34.loopexit ], !dbg !32
  %1201 = phi <4 x float> [ %657, %._crit_edge ], [ %1200, %._crit_edge34.loopexit ], !dbg !32
  %1202 = phi <4 x float> [ %658, %._crit_edge ], [ %1199, %._crit_edge34.loopexit ], !dbg !32
  %1203 = phi <4 x float> [ %659, %._crit_edge ], [ %1198, %._crit_edge34.loopexit ], !dbg !32
  %1204 = phi <4 x float> [ %660, %._crit_edge ], [ %1197, %._crit_edge34.loopexit ], !dbg !32
  %1205 = phi <4 x float> [ %661, %._crit_edge ], [ %1196, %._crit_edge34.loopexit ], !dbg !32
  %1206 = phi <4 x float> [ %662, %._crit_edge ], [ %1195, %._crit_edge34.loopexit ], !dbg !32
  %1207 = phi <4 x float> [ %663, %._crit_edge ], [ %1194, %._crit_edge34.loopexit ], !dbg !32
  %1208 = phi <4 x float> [ %664, %._crit_edge ], [ %1193, %._crit_edge34.loopexit ], !dbg !32
  %1209 = tail call noundef float @llvm.log2.f32(float %.lcssa20), !dbg !82
  %1210 = fadd float %1209, %.lcssa, !dbg !83
  fence syncscope("workgroup") release, !dbg !84
  tail call void @llvm.amdgcn.s.barrier(), !dbg !84
  fence syncscope("workgroup") acquire, !dbg !84
  %1211 = zext nneg i32 %81 to i64, !dbg !84
  %1212 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1211, !dbg !84
  %1213 = insertelement <1 x float> poison, float %1210, i64 0, !dbg !84
  store <1 x float> %1213, ptr addrspace(3) %1212, align 4, !dbg !84
  fence syncscope("workgroup") release, !dbg !84
  tail call void @llvm.amdgcn.s.barrier(), !dbg !84
  fence syncscope("workgroup") acquire, !dbg !84
  %urem = and i32 %35, 128, !dbg !84
  %.not.not = icmp eq i32 %urem, 0, !dbg !84
  br i1 %.not.not, label %1214, label %1223, !dbg !84

1214:                                             ; preds = %._crit_edge34
  %1215 = zext nneg i32 %82 to i64, !dbg !84
  %1216 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1215, !dbg !84
  %1217 = load i32, ptr addrspace(3) %1216, align 4, !dbg !84
  %1218 = mul i32 %19, %21, !dbg !85
  %1219 = sext i32 %1218 to i64, !dbg !86
  %1220 = getelementptr float, ptr addrspace(1) %4, i64 %1219, !dbg !86
  %1221 = sext i32 %84 to i64, !dbg !87
  %1222 = getelementptr float, ptr addrspace(1) %1220, i64 %1221, !dbg !87
  store i32 %1217, ptr addrspace(1) %1222, align 4, !dbg !84
  br label %1223, !dbg !84

1223:                                             ; preds = %1214, %._crit_edge34
  %1224 = insertelement <4 x float> poison, float %.lcssa20, i64 0, !dbg !88
  %1225 = shufflevector <4 x float> %1224, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !88
  %1226 = fdiv <4 x float> %1208, %1225, !dbg !88
  %1227 = fdiv <4 x float> %1207, %1225, !dbg !88
  %1228 = fdiv <4 x float> %1206, %1225, !dbg !88
  %1229 = fdiv <4 x float> %1205, %1225, !dbg !88
  %1230 = fdiv <4 x float> %1204, %1225, !dbg !88
  %1231 = fdiv <4 x float> %1203, %1225, !dbg !88
  %1232 = fdiv <4 x float> %1202, %1225, !dbg !88
  %1233 = fdiv <4 x float> %1201, %1225, !dbg !88
  %1234 = or disjoint i32 %38, 56, !dbg !23
  %1235 = zext nneg i32 %1234 to i64, !dbg !23
  %1236 = or disjoint i32 %38, 48, !dbg !23
  %1237 = zext nneg i32 %1236 to i64, !dbg !23
  %1238 = or disjoint i32 %38, 40, !dbg !23
  %1239 = zext nneg i32 %1238 to i64, !dbg !23
  %1240 = or disjoint i32 %38, 32, !dbg !23
  %1241 = zext nneg i32 %1240 to i64, !dbg !23
  %1242 = zext nneg i32 %88 to i64, !dbg !23
  %1243 = zext nneg i32 %87 to i64, !dbg !23
  %1244 = zext nneg i32 %86 to i64, !dbg !23
  %1245 = zext nneg i32 %38 to i64, !dbg !23
  %1246 = or disjoint i64 %1211, %34, !dbg !23
  %1247 = sext i32 %17 to i64, !dbg !89
  %1248 = getelementptr half, ptr addrspace(1) %5, i64 %30, !dbg !90
  %1249 = mul nsw i64 %1246, %1247, !dbg !91
  %1250 = getelementptr half, ptr addrspace(1) %1248, i64 %1249, !dbg !91
  %1251 = getelementptr half, ptr addrspace(1) %1250, i64 %1245, !dbg !91
  %1252 = getelementptr half, ptr addrspace(1) %1250, i64 %1244, !dbg !91
  %1253 = getelementptr half, ptr addrspace(1) %1250, i64 %1243, !dbg !91
  %1254 = getelementptr half, ptr addrspace(1) %1250, i64 %1242, !dbg !91
  %1255 = getelementptr half, ptr addrspace(1) %1250, i64 %1241, !dbg !91
  %1256 = getelementptr half, ptr addrspace(1) %1250, i64 %1239, !dbg !91
  %1257 = getelementptr half, ptr addrspace(1) %1250, i64 %1237, !dbg !91
  %1258 = getelementptr half, ptr addrspace(1) %1250, i64 %1235, !dbg !91
  %1259 = fptrunc <4 x float> %1233 to <4 x half>, !dbg !92
  store <4 x half> %1259, ptr addrspace(1) %1251, align 2, !dbg !91
  %1260 = fptrunc <4 x float> %1232 to <4 x half>, !dbg !92
  store <4 x half> %1260, ptr addrspace(1) %1252, align 2, !dbg !91
  %1261 = fptrunc <4 x float> %1231 to <4 x half>, !dbg !92
  store <4 x half> %1261, ptr addrspace(1) %1253, align 2, !dbg !91
  %1262 = fptrunc <4 x float> %1230 to <4 x half>, !dbg !92
  store <4 x half> %1262, ptr addrspace(1) %1254, align 2, !dbg !91
  %1263 = fptrunc <4 x float> %1229 to <4 x half>, !dbg !92
  store <4 x half> %1263, ptr addrspace(1) %1255, align 2, !dbg !91
  %1264 = fptrunc <4 x float> %1228 to <4 x half>, !dbg !92
  store <4 x half> %1264, ptr addrspace(1) %1256, align 2, !dbg !91
  %1265 = fptrunc <4 x float> %1227 to <4 x half>, !dbg !92
  store <4 x half> %1265, ptr addrspace(1) %1257, align 2, !dbg !91
  %1266 = fptrunc <4 x float> %1226 to <4 x half>, !dbg !92
  store <4 x half> %1266, ptr addrspace(1) %1258, align 2, !dbg !91
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half>, <4 x half>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.log2.f32(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="3" "denormal-fp-math-f32"="preserve-sign" "uniform-work-group-size"="false" }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 8, !"PIC Level", i32 0}
!4 = distinct !DICompileUnit(language: DW_LANG_C, file: !5, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!5 = !DIFile(filename: "06-fused-attention.py", directory: "/triton/python/tutorials")
!6 = !DISubprogram(name: "llvm.amdgcn.exp2.f32", linkageName: "llvm.amdgcn.exp2.f32", scope: !5, file: !5, line: 171, type: !7, scopeLine: 171, spFlags: DISPFlagOptimized)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "_attn_fwd", linkageName: "_attn_fwd", scope: !5, file: !5, line: 100, type: !7, scopeLine: 100, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4)
!10 = !DILocation(line: 113, column: 27, scope: !9)
!11 = !DILocation(line: 114, column: 22, scope: !9)
!12 = !DILocation(line: 116, column: 26, scope: !9)
!13 = !DILocation(line: 116, column: 38, scope: !9)
!14 = !DILocation(line: 115, column: 21, scope: !9)
!15 = !DILocation(line: 116, column: 59, scope: !9)
!16 = !DILocation(line: 116, column: 71, scope: !9)
!17 = !DILocation(line: 116, column: 50, scope: !9)
!18 = !DILocation(line: 120, column: 17, scope: !9)
!19 = !DILocation(line: 112, column: 28, scope: !9)
!20 = !DILocation(line: 123, column: 27, scope: !9)
!21 = !DILocation(line: 125, column: 8, scope: !9)
!22 = !DILocation(line: 153, column: 46, scope: !9)
!23 = !DILocation(line: 163, column: 16, scope: !9)
!24 = !DILocation(line: 129, column: 17, scope: !9)
!25 = !DILocation(line: 134, column: 8, scope: !9)
!26 = !DILocation(line: 137, column: 17, scope: !9)
!27 = !DILocation(line: 142, column: 8, scope: !9)
!28 = !DILocation(line: 153, column: 33, scope: !9)
!29 = !DILocation(line: 161, column: 16, scope: !9)
!30 = !DILocation(line: 44, column: 33, scope: !31, inlinedAt: !32)
!31 = distinct !DILexicalBlockFile(scope: !9, file: !5, discriminator: 0)
!32 = !DILocation(line: 171, column: 74, scope: !9)
!33 = !DILocation(line: 65, column: 20, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !32)
!35 = !DILocation(line: 48, column: 23, scope: !31, inlinedAt: !32)
!36 = !DILocation(line: 163, column: 27, scope: !37, inlinedAt: !32)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/triton/python/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !31, file: !38, discriminator: 0)
!40 = !DILocation(line: 184, column: 40, scope: !39, inlinedAt: !32)
!41 = !DILocation(line: 55, column: 51, scope: !31, inlinedAt: !32)
!42 = !DILocation(line: 55, column: 35, scope: !31, inlinedAt: !32)
!43 = !DILocation(line: 56, column: 22, scope: !31, inlinedAt: !32)
!44 = !DILocation(line: 56, column: 33, scope: !31, inlinedAt: !32)
!45 = !DILocation(line: 57, column: 25, scope: !31, inlinedAt: !32)
!46 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !32)
!47 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !32)
!48 = !DILocation(line: 60, column: 35, scope: !31, inlinedAt: !32)
!49 = !DILocation(line: 60, column: 29, scope: !31, inlinedAt: !32)
!50 = !DILocation(line: 61, column: 20, scope: !31, inlinedAt: !32)
!51 = !DILocation(line: 61, column: 28, scope: !31, inlinedAt: !32)
!52 = !DILocation(line: 63, column: 20, scope: !31, inlinedAt: !32)
!53 = !DILocation(line: 69, column: 21, scope: !31, inlinedAt: !32)
!54 = !DILocation(line: 70, column: 27, scope: !31, inlinedAt: !32)
!55 = !DILocation(line: 74, column: 46, scope: !31, inlinedAt: !32)
!56 = !DILocation(line: 36, column: 52, scope: !31, inlinedAt: !57)
!57 = !DILocation(line: 180, column: 66, scope: !9)
!58 = !DILocation(line: 44, column: 33, scope: !31, inlinedAt: !57)
!59 = !DILocation(line: 65, column: 20, scope: !31, inlinedAt: !57)
!60 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !57)
!61 = !DILocation(line: 48, column: 23, scope: !31, inlinedAt: !57)
!62 = !DILocation(line: 50, column: 49, scope: !31, inlinedAt: !57)
!63 = !DILocation(line: 50, column: 39, scope: !31, inlinedAt: !57)
!64 = !DILocation(line: 51, column: 22, scope: !31, inlinedAt: !57)
!65 = !DILocation(line: 51, column: 51, scope: !31, inlinedAt: !57)
!66 = !DILocation(line: 51, column: 33, scope: !31, inlinedAt: !57)
!67 = !DILocation(line: 163, column: 27, scope: !37, inlinedAt: !57)
!68 = !DILocation(line: 184, column: 40, scope: !39, inlinedAt: !57)
!69 = !DILocation(line: 52, column: 35, scope: !31, inlinedAt: !57)
!70 = !DILocation(line: 53, column: 18, scope: !31, inlinedAt: !57)
!71 = !DILocation(line: 57, column: 25, scope: !31, inlinedAt: !57)
!72 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !57)
!73 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !57)
!74 = !DILocation(line: 60, column: 35, scope: !31, inlinedAt: !57)
!75 = !DILocation(line: 60, column: 29, scope: !31, inlinedAt: !57)
!76 = !DILocation(line: 61, column: 20, scope: !31, inlinedAt: !57)
!77 = !DILocation(line: 61, column: 28, scope: !31, inlinedAt: !57)
!78 = !DILocation(line: 63, column: 20, scope: !31, inlinedAt: !57)
!79 = !DILocation(line: 69, column: 21, scope: !31, inlinedAt: !57)
!80 = !DILocation(line: 70, column: 27, scope: !31, inlinedAt: !57)
!81 = !DILocation(line: 74, column: 46, scope: !31, inlinedAt: !57)
!82 = !DILocation(line: 183, column: 24, scope: !9)
!83 = !DILocation(line: 183, column: 11, scope: !9)
!84 = !DILocation(line: 186, column: 21, scope: !9)
!85 = !DILocation(line: 185, column: 26, scope: !9)
!86 = !DILocation(line: 185, column: 17, scope: !9)
!87 = !DILocation(line: 185, column: 34, scope: !9)
!88 = !DILocation(line: 184, column: 16, scope: !9)
!89 = !DILocation(line: 150, column: 8, scope: !9)
!90 = !DILocation(line: 145, column: 19, scope: !9)
!91 = !DILocation(line: 187, column: 26, scope: !9)
!92 = !DILocation(line: 187, column: 33, scope: !9)
!93 = !DILocation(line: 187, column: 4, scope: !9)
