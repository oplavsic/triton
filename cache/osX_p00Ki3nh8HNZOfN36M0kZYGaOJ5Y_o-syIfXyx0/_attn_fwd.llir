; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !6 float @llvm.amdgcn.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_attn_fwd(ptr addrspace(1) inreg nocapture readonly %0, ptr addrspace(1) inreg nocapture readonly %1, ptr addrspace(1) inreg nocapture readonly %2, float inreg %3, ptr addrspace(1) inreg nocapture writeonly %4, ptr addrspace(1) inreg nocapture writeonly %5, i32 inreg %6, i32 inreg %7, i32 inreg %8, i32 inreg %9, i32 inreg %10, i32 inreg %11, i32 inreg %12, i32 inreg %13, i32 inreg %14, i32 inreg %15, i32 inreg %16, i32 inreg %17, i32 inreg %18, i32 inreg %19) local_unnamed_addr #1 !dbg !9 {
  %21 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !10
  %.frozen = freeze i32 %18, !dbg !11
  %22 = sdiv i32 %21, %.frozen, !dbg !11
  %23 = sext i32 %22 to i64, !dbg !12
  %24 = sext i32 %6 to i64, !dbg !13
  %25 = mul nsw i64 %23, %24, !dbg !13
  %26 = mul i32 %22, %.frozen, !dbg !14
  %.decomposed = sub i32 %21, %26, !dbg !14
  %27 = sext i32 %.decomposed to i64, !dbg !15
  %28 = sext i32 %7 to i64, !dbg !16
  %29 = mul nsw i64 %27, %28, !dbg !16
  %30 = add nsw i64 %29, %25, !dbg !17
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !18
  %32 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !19
  %33 = shl i32 %32, 7, !dbg !20
  %34 = sext i32 %33 to i64, !dbg !21
  %35 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !22
  %36 = and i32 %35, 63, !dbg !22
  %37 = and i32 %35, 32, !dbg !22
  %38 = lshr exact i32 %37, 3, !dbg !22
  %39 = lshr i32 %35, 3, !dbg !22
  %40 = and i32 %39, 27, !dbg !22
  %41 = or disjoint i32 %40, %38, !dbg !22
  %42 = or disjoint i32 %41, 32, !dbg !22
  %43 = or disjoint i32 %41, 64, !dbg !22
  %44 = or disjoint i32 %41, 96, !dbg !22
  %45 = zext nneg i32 %41 to i64, !dbg !23
  %46 = zext nneg i32 %42 to i64, !dbg !23
  %47 = zext nneg i32 %43 to i64, !dbg !23
  %48 = zext nneg i32 %44 to i64, !dbg !23
  %49 = sext i32 %8 to i64, !dbg !21
  %50 = mul nsw i64 %49, %34, !dbg !23
  %51 = mul nsw i64 %49, %45, !dbg !23
  %52 = mul nsw i64 %49, %46, !dbg !23
  %53 = mul nsw i64 %49, %47, !dbg !23
  %54 = mul nsw i64 %49, %48, !dbg !23
  %55 = shl i32 %35, 3, !dbg !23
  %56 = and i32 %55, 56, !dbg !23
  %57 = zext nneg i32 %56 to i64, !dbg !23
  %58 = getelementptr half, ptr addrspace(1) %31, i64 %50, !dbg !23
  %59 = getelementptr half, ptr addrspace(1) %58, i64 %51, !dbg !23
  %60 = getelementptr half, ptr addrspace(1) %59, i64 %57, !dbg !23
  %61 = getelementptr half, ptr addrspace(1) %58, i64 %52, !dbg !23
  %62 = getelementptr half, ptr addrspace(1) %61, i64 %57, !dbg !23
  %63 = getelementptr half, ptr addrspace(1) %58, i64 %53, !dbg !23
  %64 = getelementptr half, ptr addrspace(1) %63, i64 %57, !dbg !23
  %65 = getelementptr half, ptr addrspace(1) %58, i64 %54, !dbg !23
  %66 = getelementptr half, ptr addrspace(1) %65, i64 %57, !dbg !23
  %unmaskedload = load <8 x half>, ptr addrspace(1) %60, align 16, !dbg !23
  %unmaskedload3 = load <8 x half>, ptr addrspace(1) %62, align 16, !dbg !23
  %unmaskedload4 = load <8 x half>, ptr addrspace(1) %64, align 16, !dbg !23
  %unmaskedload5 = load <8 x half>, ptr addrspace(1) %66, align 16, !dbg !23
  %67 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !24
  %68 = sext i32 %14 to i64, !dbg !25
  %69 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !26
  %70 = sext i32 %11 to i64, !dbg !27
  %71 = and i32 %35, 31, !dbg !22
  %72 = lshr i32 %35, 1, !dbg !22
  %73 = and i32 %72, 32, !dbg !22
  %74 = and i32 %72, 96, !dbg !22
  %75 = or disjoint i32 %74, %71, !dbg !22
  %76 = or disjoint i32 %75, %33, !dbg !28
  %77 = fmul float %3, 0x3FF7154760000000, !dbg !29
  %78 = or disjoint i32 %38, 8, !dbg !23
  %79 = or disjoint i32 %38, 16, !dbg !23
  %80 = or disjoint i32 %38, 24, !dbg !23
  %81 = and i32 %72, 4, !dbg !23
  %82 = or disjoint i32 %56, %81, !dbg !23
  %83 = and i32 %72, 8, !dbg !23
  %84 = lshr exact i32 %37, 1, !dbg !23
  %85 = or disjoint i32 %84, %83, !dbg !23
  %86 = or disjoint i32 %85, %73, !dbg !23
  %87 = xor i32 %86, %82, !dbg !23
  %88 = shl nuw nsw i32 %41, 6, !dbg !23
  %89 = getelementptr half, ptr addrspace(3) @global_smem, i32 %87, !dbg !23
  %90 = getelementptr half, ptr addrspace(3) %89, i32 %88, !dbg !23
  %91 = shufflevector <8 x half> %unmaskedload, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %91, ptr addrspace(3) %90, align 8, !dbg !23
  %92 = or disjoint i32 %56, 4, !dbg !23
  %93 = or disjoint i32 %85, %81, !dbg !23
  %94 = or disjoint i32 %93, %73, !dbg !23
  %95 = xor i32 %94, %92, !dbg !23
  %96 = getelementptr half, ptr addrspace(3) @global_smem, i32 %95, !dbg !23
  %97 = getelementptr half, ptr addrspace(3) %96, i32 %88, !dbg !23
  %98 = shufflevector <8 x half> %unmaskedload, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %98, ptr addrspace(3) %97, align 8, !dbg !23
  %99 = or disjoint i32 %88, 2048, !dbg !23
  %100 = getelementptr half, ptr addrspace(3) %89, i32 %99, !dbg !23
  %101 = shufflevector <8 x half> %unmaskedload3, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %101, ptr addrspace(3) %100, align 8, !dbg !23
  %102 = getelementptr half, ptr addrspace(3) %96, i32 %99, !dbg !23
  %103 = shufflevector <8 x half> %unmaskedload3, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %103, ptr addrspace(3) %102, align 8, !dbg !23
  %104 = or disjoint i32 %88, 4096, !dbg !23
  %105 = getelementptr half, ptr addrspace(3) %89, i32 %104, !dbg !23
  %106 = shufflevector <8 x half> %unmaskedload4, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %106, ptr addrspace(3) %105, align 8, !dbg !23
  %107 = getelementptr half, ptr addrspace(3) %96, i32 %104, !dbg !23
  %108 = shufflevector <8 x half> %unmaskedload4, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %108, ptr addrspace(3) %107, align 8, !dbg !23
  %109 = or disjoint i32 %88, 6144, !dbg !23
  %110 = getelementptr half, ptr addrspace(3) %89, i32 %109, !dbg !23
  %111 = shufflevector <8 x half> %unmaskedload5, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %111, ptr addrspace(3) %110, align 8, !dbg !23
  %112 = getelementptr half, ptr addrspace(3) %96, i32 %109, !dbg !23
  %113 = shufflevector <8 x half> %unmaskedload5, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %113, ptr addrspace(3) %112, align 8, !dbg !23
  fence syncscope("workgroup") release, !dbg !23
  tail call void @llvm.amdgcn.s.barrier(), !dbg !23
  fence syncscope("workgroup") acquire, !dbg !23
  %114 = icmp ugt i32 %36, 31, !dbg !23
  %115 = zext i1 %114 to i32, !dbg !23
  %116 = and i32 %35, 15, !dbg !23
  %117 = xor i32 %116, %115, !dbg !23
  %118 = shl nuw nsw i32 %117, 2, !dbg !23
  %119 = shl nuw nsw i32 %75, 6, !dbg !23
  %120 = or disjoint i32 %118, %119, !dbg !23
  %121 = or disjoint i32 %115, 2, !dbg !23
  %122 = xor i32 %121, %116, !dbg !23
  %123 = shl nuw nsw i32 %122, 2, !dbg !23
  %124 = or disjoint i32 %123, %119, !dbg !23
  %125 = or disjoint i32 %115, 4, !dbg !23
  %126 = xor i32 %125, %116, !dbg !23
  %127 = shl nuw nsw i32 %126, 2, !dbg !23
  %128 = or disjoint i32 %127, %119, !dbg !23
  %129 = or disjoint i32 %115, 6, !dbg !23
  %130 = xor i32 %129, %116, !dbg !23
  %131 = shl nuw nsw i32 %130, 2, !dbg !23
  %132 = or disjoint i32 %131, %119, !dbg !23
  %133 = or disjoint i32 %115, 8, !dbg !23
  %134 = xor i32 %133, %116, !dbg !23
  %135 = shl nuw nsw i32 %134, 2, !dbg !23
  %136 = or disjoint i32 %135, %119, !dbg !23
  %137 = or disjoint i32 %115, 10, !dbg !23
  %138 = xor i32 %137, %116, !dbg !23
  %139 = shl nuw nsw i32 %138, 2, !dbg !23
  %140 = or disjoint i32 %139, %119, !dbg !23
  %141 = or disjoint i32 %115, 12, !dbg !23
  %142 = xor i32 %141, %116, !dbg !23
  %143 = shl nuw nsw i32 %142, 2, !dbg !23
  %144 = or disjoint i32 %143, %119, !dbg !23
  %145 = or disjoint i32 %115, 14, !dbg !23
  %146 = xor i32 %145, %116, !dbg !23
  %147 = shl nuw nsw i32 %146, 2, !dbg !23
  %148 = or disjoint i32 %147, %119, !dbg !23
  %149 = getelementptr half, ptr addrspace(3) @global_smem, i32 %120, !dbg !23
  %150 = load <4 x half>, ptr addrspace(3) %149, align 8, !dbg !23
  %151 = getelementptr half, ptr addrspace(3) @global_smem, i32 %124, !dbg !23
  %152 = load <4 x half>, ptr addrspace(3) %151, align 8, !dbg !23
  %153 = getelementptr half, ptr addrspace(3) @global_smem, i32 %128, !dbg !23
  %154 = load <4 x half>, ptr addrspace(3) %153, align 8, !dbg !23
  %155 = getelementptr half, ptr addrspace(3) @global_smem, i32 %132, !dbg !23
  %156 = load <4 x half>, ptr addrspace(3) %155, align 8, !dbg !23
  %157 = getelementptr half, ptr addrspace(3) @global_smem, i32 %136, !dbg !23
  %158 = load <4 x half>, ptr addrspace(3) %157, align 8, !dbg !23
  %159 = getelementptr half, ptr addrspace(3) @global_smem, i32 %140, !dbg !23
  %160 = load <4 x half>, ptr addrspace(3) %159, align 8, !dbg !23
  %161 = getelementptr half, ptr addrspace(3) @global_smem, i32 %144, !dbg !23
  %162 = load <4 x half>, ptr addrspace(3) %161, align 8, !dbg !23
  %163 = getelementptr half, ptr addrspace(3) @global_smem, i32 %148, !dbg !23
  %164 = load <4 x half>, ptr addrspace(3) %163, align 8, !dbg !23
  %165 = icmp sgt i32 %33, 0, !dbg !30
  br i1 %165, label %.lr.ph, label %._crit_edge, !dbg !30

.lr.ph:                                           ; preds = %20
  %166 = mul nsw i64 %70, %45
  %invariant.gep = getelementptr half, ptr addrspace(1) %69, i64 %166, !dbg !30
  %invariant.gep33 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %57, !dbg !30
  %167 = mul nsw i64 %68, %45
  %invariant.gep35 = getelementptr half, ptr addrspace(1) %67, i64 %167, !dbg !30
  %invariant.gep36 = getelementptr half, ptr addrspace(1) %invariant.gep35, i64 %57, !dbg !30
  %168 = shl nuw nsw i32 %71, 6
  %169 = or disjoint i32 %118, %168
  %170 = or disjoint i32 %123, %168
  %171 = or disjoint i32 %127, %168
  %172 = or disjoint i32 %131, %168
  %173 = or disjoint i32 %135, %168
  %174 = or disjoint i32 %139, %168
  %175 = or disjoint i32 %143, %168
  %176 = or disjoint i32 %147, %168
  %177 = getelementptr half, ptr addrspace(3) @global_smem, i32 %169
  %178 = getelementptr half, ptr addrspace(3) @global_smem, i32 %170
  %179 = getelementptr half, ptr addrspace(3) @global_smem, i32 %171
  %180 = getelementptr half, ptr addrspace(3) @global_smem, i32 %172
  %181 = getelementptr half, ptr addrspace(3) @global_smem, i32 %173
  %182 = getelementptr half, ptr addrspace(3) @global_smem, i32 %174
  %183 = getelementptr half, ptr addrspace(3) @global_smem, i32 %175
  %184 = getelementptr half, ptr addrspace(3) @global_smem, i32 %176
  %185 = shl i32 %35, 2
  %186 = xor i32 %185, 128
  %187 = or disjoint i32 %88, %56
  %188 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %187
  %189 = shl nuw nsw i32 %36, 3
  %190 = and i32 %189, 256
  %191 = or disjoint i32 %190, %71
  %192 = or disjoint i32 %191, 64
  %193 = or disjoint i32 %191, 128
  %194 = or disjoint i32 %191, 192
  %195 = or disjoint i32 %191, 512
  %196 = or disjoint i32 %191, 576
  %197 = or disjoint i32 %191, 640
  %198 = or disjoint i32 %191, 704
  %199 = or disjoint i32 %191, 1024
  %200 = or disjoint i32 %191, 1088
  %201 = or disjoint i32 %191, 1152
  %202 = or disjoint i32 %191, 1216
  %203 = or disjoint i32 %191, 1536
  %204 = or disjoint i32 %191, 1600
  %205 = or disjoint i32 %191, 1664
  %206 = or disjoint i32 %191, 1728
  %207 = or disjoint i32 %191, 32
  %208 = or disjoint i32 %191, 96
  %209 = or disjoint i32 %191, 160
  %210 = or disjoint i32 %191, 224
  %211 = or disjoint i32 %191, 544
  %212 = or disjoint i32 %191, 608
  %213 = or disjoint i32 %191, 672
  %214 = or disjoint i32 %191, 736
  %215 = or disjoint i32 %191, 1056
  %216 = or disjoint i32 %191, 1120
  %217 = or disjoint i32 %191, 1184
  %218 = or disjoint i32 %191, 1248
  %219 = or disjoint i32 %191, 1568
  %220 = or disjoint i32 %191, 1632
  %221 = or disjoint i32 %191, 1696
  %222 = or disjoint i32 %191, 1760
  %223 = getelementptr half, ptr addrspace(3) @global_smem, i32 %191
  %224 = getelementptr half, ptr addrspace(3) @global_smem, i32 %192
  %225 = getelementptr half, ptr addrspace(3) @global_smem, i32 %193
  %226 = getelementptr half, ptr addrspace(3) @global_smem, i32 %194
  %227 = getelementptr half, ptr addrspace(3) @global_smem, i32 %195
  %228 = getelementptr half, ptr addrspace(3) @global_smem, i32 %196
  %229 = getelementptr half, ptr addrspace(3) @global_smem, i32 %197
  %230 = getelementptr half, ptr addrspace(3) @global_smem, i32 %198
  %231 = getelementptr half, ptr addrspace(3) @global_smem, i32 %199
  %232 = getelementptr half, ptr addrspace(3) @global_smem, i32 %200
  %233 = getelementptr half, ptr addrspace(3) @global_smem, i32 %201
  %234 = getelementptr half, ptr addrspace(3) @global_smem, i32 %202
  %235 = getelementptr half, ptr addrspace(3) @global_smem, i32 %203
  %236 = getelementptr half, ptr addrspace(3) @global_smem, i32 %204
  %237 = getelementptr half, ptr addrspace(3) @global_smem, i32 %205
  %238 = getelementptr half, ptr addrspace(3) @global_smem, i32 %206
  %239 = getelementptr half, ptr addrspace(3) @global_smem, i32 %207
  %240 = getelementptr half, ptr addrspace(3) @global_smem, i32 %208
  %241 = getelementptr half, ptr addrspace(3) @global_smem, i32 %209
  %242 = getelementptr half, ptr addrspace(3) @global_smem, i32 %210
  %243 = getelementptr half, ptr addrspace(3) @global_smem, i32 %211
  %244 = getelementptr half, ptr addrspace(3) @global_smem, i32 %212
  %245 = getelementptr half, ptr addrspace(3) @global_smem, i32 %213
  %246 = getelementptr half, ptr addrspace(3) @global_smem, i32 %214
  %247 = getelementptr half, ptr addrspace(3) @global_smem, i32 %215
  %248 = getelementptr half, ptr addrspace(3) @global_smem, i32 %216
  %249 = getelementptr half, ptr addrspace(3) @global_smem, i32 %217
  %250 = getelementptr half, ptr addrspace(3) @global_smem, i32 %218
  %251 = getelementptr half, ptr addrspace(3) @global_smem, i32 %219
  %252 = getelementptr half, ptr addrspace(3) @global_smem, i32 %220
  %253 = getelementptr half, ptr addrspace(3) @global_smem, i32 %221
  %254 = getelementptr half, ptr addrspace(3) @global_smem, i32 %222
  br label %255, !dbg !30

255:                                              ; preds = %.lr.ph, %255
  %256 = phi i64 [ 0, %.lr.ph ], [ %559, %255 ]
  %257 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %331, %255 ]
  %258 = phi float [ 1.000000e+00, %.lr.ph ], [ %402, %255 ]
  %259 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %561, %255 ]
  %260 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %562, %255 ]
  %261 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %563, %255 ]
  %262 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %564, %255 ]
  %263 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %565, %255 ]
  %264 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %566, %255 ]
  %265 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %567, %255 ]
  %266 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %568, %255 ]
  %267 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %569, %255 ]
  %268 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %570, %255 ]
  %269 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %571, %255 ]
  %270 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %572, %255 ]
  %271 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %573, %255 ]
  %272 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %574, %255 ]
  %273 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %575, %255 ]
  %274 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %576, %255 ]
  %275 = mul i64 %256, %70, !dbg !33
  %gep34 = getelementptr half, ptr addrspace(1) %invariant.gep33, i64 %275, !dbg !33
  %unmaskedload23 = load <8 x half>, ptr addrspace(1) %gep34, align 16, !dbg !33
  %276 = mul i64 %256, %68, !dbg !34
  %gep37 = getelementptr half, ptr addrspace(1) %invariant.gep36, i64 %276, !dbg !34
  %unmaskedload24 = load <8 x half>, ptr addrspace(1) %gep37, align 16, !dbg !34
  fence syncscope("workgroup") release, !dbg !33
  tail call void @llvm.amdgcn.s.barrier(), !dbg !33
  fence syncscope("workgroup") acquire, !dbg !33
  %277 = shufflevector <8 x half> %unmaskedload23, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !33
  store <4 x half> %277, ptr addrspace(3) %90, align 8, !dbg !33
  %278 = shufflevector <8 x half> %unmaskedload23, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !33
  store <4 x half> %278, ptr addrspace(3) %97, align 8, !dbg !33
  fence syncscope("workgroup") release, !dbg !33
  tail call void @llvm.amdgcn.s.barrier(), !dbg !33
  fence syncscope("workgroup") acquire, !dbg !33
  %279 = load <4 x half>, ptr addrspace(3) %177, align 8, !dbg !33
  %280 = load <4 x half>, ptr addrspace(3) %178, align 8, !dbg !33
  %281 = load <4 x half>, ptr addrspace(3) %179, align 8, !dbg !33
  %282 = load <4 x half>, ptr addrspace(3) %180, align 8, !dbg !33
  %283 = load <4 x half>, ptr addrspace(3) %181, align 8, !dbg !33
  %284 = load <4 x half>, ptr addrspace(3) %182, align 8, !dbg !33
  %285 = load <4 x half>, ptr addrspace(3) %183, align 8, !dbg !33
  %286 = load <4 x half>, ptr addrspace(3) %184, align 8, !dbg !33
  %287 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %279, <4 x half> %150, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !35
  %288 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %280, <4 x half> %152, <16 x float> %287, i32 0, i32 0, i32 0), !dbg !35
  %289 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %281, <4 x half> %154, <16 x float> %288, i32 0, i32 0, i32 0), !dbg !35
  %290 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %282, <4 x half> %156, <16 x float> %289, i32 0, i32 0, i32 0), !dbg !35
  %291 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %283, <4 x half> %158, <16 x float> %290, i32 0, i32 0, i32 0), !dbg !35
  %292 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %284, <4 x half> %160, <16 x float> %291, i32 0, i32 0, i32 0), !dbg !35
  %293 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %285, <4 x half> %162, <16 x float> %292, i32 0, i32 0, i32 0), !dbg !35
  %294 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %286, <4 x half> %164, <16 x float> %293, i32 0, i32 0, i32 0), !dbg !35
  %295 = extractelement <16 x float> %294, i64 0, !dbg !35
  %296 = extractelement <16 x float> %294, i64 1, !dbg !35
  %297 = extractelement <16 x float> %294, i64 2, !dbg !35
  %298 = extractelement <16 x float> %294, i64 3, !dbg !35
  %299 = extractelement <16 x float> %294, i64 4, !dbg !35
  %300 = extractelement <16 x float> %294, i64 5, !dbg !35
  %301 = extractelement <16 x float> %294, i64 6, !dbg !35
  %302 = extractelement <16 x float> %294, i64 7, !dbg !35
  %303 = extractelement <16 x float> %294, i64 8, !dbg !35
  %304 = extractelement <16 x float> %294, i64 9, !dbg !35
  %305 = extractelement <16 x float> %294, i64 10, !dbg !35
  %306 = extractelement <16 x float> %294, i64 11, !dbg !35
  %307 = extractelement <16 x float> %294, i64 12, !dbg !35
  %308 = extractelement <16 x float> %294, i64 13, !dbg !35
  %309 = extractelement <16 x float> %294, i64 14, !dbg !35
  %310 = extractelement <16 x float> %294, i64 15, !dbg !35
  %311 = tail call float @llvm.maxnum.f32(float %295, float %296), !dbg !36
  %312 = tail call float @llvm.maxnum.f32(float %311, float %297), !dbg !36
  %313 = tail call float @llvm.maxnum.f32(float %312, float %298), !dbg !36
  %314 = tail call float @llvm.maxnum.f32(float %313, float %299), !dbg !36
  %315 = tail call float @llvm.maxnum.f32(float %314, float %300), !dbg !36
  %316 = tail call float @llvm.maxnum.f32(float %315, float %301), !dbg !36
  %317 = tail call float @llvm.maxnum.f32(float %316, float %302), !dbg !36
  %318 = tail call float @llvm.maxnum.f32(float %317, float %303), !dbg !36
  %319 = tail call float @llvm.maxnum.f32(float %318, float %304), !dbg !36
  %320 = tail call float @llvm.maxnum.f32(float %319, float %305), !dbg !36
  %321 = tail call float @llvm.maxnum.f32(float %320, float %306), !dbg !36
  %322 = tail call float @llvm.maxnum.f32(float %321, float %307), !dbg !36
  %323 = tail call float @llvm.maxnum.f32(float %322, float %308), !dbg !36
  %324 = tail call float @llvm.maxnum.f32(float %323, float %309), !dbg !36
  %325 = tail call float @llvm.maxnum.f32(float %324, float %310), !dbg !36
  %326 = bitcast float %325 to i32, !dbg !40
  %327 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %186, i32 %326), !dbg !40
  %328 = bitcast i32 %327 to float, !dbg !40
  %329 = tail call float @llvm.maxnum.f32(float %325, float %328), !dbg !36
  %330 = fmul float %77, %329, !dbg !41
  %331 = tail call float @llvm.maxnum.f32(float %257, float %330), !dbg !42
  %332 = fmul float %77, %295, !dbg !43
  %333 = fmul float %77, %296, !dbg !43
  %334 = fmul float %77, %297, !dbg !43
  %335 = fmul float %77, %298, !dbg !43
  %336 = fmul float %77, %299, !dbg !43
  %337 = fmul float %77, %300, !dbg !43
  %338 = fmul float %77, %301, !dbg !43
  %339 = fmul float %77, %302, !dbg !43
  %340 = fmul float %77, %303, !dbg !43
  %341 = fmul float %77, %304, !dbg !43
  %342 = fmul float %77, %305, !dbg !43
  %343 = fmul float %77, %306, !dbg !43
  %344 = fmul float %77, %307, !dbg !43
  %345 = fmul float %77, %308, !dbg !43
  %346 = fmul float %77, %309, !dbg !43
  %347 = fmul float %77, %310, !dbg !43
  %348 = fsub float %332, %331, !dbg !44
  %349 = fsub float %333, %331, !dbg !44
  %350 = fsub float %334, %331, !dbg !44
  %351 = fsub float %335, %331, !dbg !44
  %352 = fsub float %336, %331, !dbg !44
  %353 = fsub float %337, %331, !dbg !44
  %354 = fsub float %338, %331, !dbg !44
  %355 = fsub float %339, %331, !dbg !44
  %356 = fsub float %340, %331, !dbg !44
  %357 = fsub float %341, %331, !dbg !44
  %358 = fsub float %342, %331, !dbg !44
  %359 = fsub float %343, %331, !dbg !44
  %360 = fsub float %344, %331, !dbg !44
  %361 = fsub float %345, %331, !dbg !44
  %362 = fsub float %346, %331, !dbg !44
  %363 = fsub float %347, %331, !dbg !44
  %364 = tail call float @llvm.amdgcn.exp2.f32(float %348), !dbg !45
  %365 = tail call float @llvm.amdgcn.exp2.f32(float %349), !dbg !45
  %366 = tail call float @llvm.amdgcn.exp2.f32(float %350), !dbg !45
  %367 = tail call float @llvm.amdgcn.exp2.f32(float %351), !dbg !45
  %368 = tail call float @llvm.amdgcn.exp2.f32(float %352), !dbg !45
  %369 = tail call float @llvm.amdgcn.exp2.f32(float %353), !dbg !45
  %370 = tail call float @llvm.amdgcn.exp2.f32(float %354), !dbg !45
  %371 = tail call float @llvm.amdgcn.exp2.f32(float %355), !dbg !45
  %372 = tail call float @llvm.amdgcn.exp2.f32(float %356), !dbg !45
  %373 = tail call float @llvm.amdgcn.exp2.f32(float %357), !dbg !45
  %374 = tail call float @llvm.amdgcn.exp2.f32(float %358), !dbg !45
  %375 = tail call float @llvm.amdgcn.exp2.f32(float %359), !dbg !45
  %376 = tail call float @llvm.amdgcn.exp2.f32(float %360), !dbg !45
  %377 = tail call float @llvm.amdgcn.exp2.f32(float %361), !dbg !45
  %378 = tail call float @llvm.amdgcn.exp2.f32(float %362), !dbg !45
  %379 = tail call float @llvm.amdgcn.exp2.f32(float %363), !dbg !45
  %380 = fadd float %364, %365, !dbg !46
  %381 = fadd float %366, %380, !dbg !46
  %382 = fadd float %367, %381, !dbg !46
  %383 = fadd float %368, %382, !dbg !46
  %384 = fadd float %369, %383, !dbg !46
  %385 = fadd float %370, %384, !dbg !46
  %386 = fadd float %371, %385, !dbg !46
  %387 = fadd float %372, %386, !dbg !46
  %388 = fadd float %373, %387, !dbg !46
  %389 = fadd float %374, %388, !dbg !46
  %390 = fadd float %375, %389, !dbg !46
  %391 = fadd float %376, %390, !dbg !46
  %392 = fadd float %377, %391, !dbg !46
  %393 = fadd float %378, %392, !dbg !46
  %394 = fadd float %379, %393, !dbg !46
  %395 = bitcast float %394 to i32, !dbg !47
  %396 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %186, i32 %395), !dbg !47
  %397 = bitcast i32 %396 to float, !dbg !47
  %398 = fadd float %394, %397, !dbg !46
  %399 = fsub float %257, %331, !dbg !48
  %400 = tail call float @llvm.amdgcn.exp2.f32(float %399), !dbg !49
  %401 = fmul float %258, %400, !dbg !50
  %402 = fadd float %401, %398, !dbg !51
  %403 = insertelement <2 x float> poison, float %400, i64 0, !dbg !52
  %404 = shufflevector <2 x float> %403, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %405 = fmul <2 x float> %267, %404, !dbg !52
  %406 = fmul <2 x float> %268, %404, !dbg !52
  %407 = fmul <2 x float> %269, %404, !dbg !52
  %408 = fmul <2 x float> %270, %404, !dbg !52
  %409 = fmul <2 x float> %271, %404, !dbg !52
  %410 = fmul <2 x float> %272, %404, !dbg !52
  %411 = fmul <2 x float> %273, %404, !dbg !52
  %412 = fmul <2 x float> %274, %404, !dbg !52
  %413 = fmul <2 x float> %259, %404, !dbg !52
  %414 = fmul <2 x float> %260, %404, !dbg !52
  %415 = fmul <2 x float> %261, %404, !dbg !52
  %416 = fmul <2 x float> %262, %404, !dbg !52
  %417 = fmul <2 x float> %263, %404, !dbg !52
  %418 = fmul <2 x float> %264, %404, !dbg !52
  %419 = fmul <2 x float> %265, %404, !dbg !52
  %420 = fmul <2 x float> %266, %404, !dbg !52
  %421 = fptrunc float %364 to half, !dbg !53
  %422 = fptrunc float %365 to half, !dbg !53
  %423 = fptrunc float %366 to half, !dbg !53
  %424 = fptrunc float %367 to half, !dbg !53
  %425 = fptrunc float %368 to half, !dbg !53
  %426 = fptrunc float %369 to half, !dbg !53
  %427 = fptrunc float %370 to half, !dbg !53
  %428 = fptrunc float %371 to half, !dbg !53
  %429 = fptrunc float %372 to half, !dbg !53
  %430 = fptrunc float %373 to half, !dbg !53
  %431 = fptrunc float %374 to half, !dbg !53
  %432 = fptrunc float %375 to half, !dbg !53
  %433 = fptrunc float %376 to half, !dbg !53
  %434 = fptrunc float %377 to half, !dbg !53
  %435 = fptrunc float %378 to half, !dbg !53
  %436 = fptrunc float %379 to half, !dbg !53
  fence syncscope("workgroup") release, !dbg !34
  tail call void @llvm.amdgcn.s.barrier(), !dbg !34
  fence syncscope("workgroup") acquire, !dbg !34
  store <8 x half> %unmaskedload24, ptr addrspace(3) %188, align 16, !dbg !34
  fence syncscope("workgroup") release, !dbg !34
  tail call void @llvm.amdgcn.s.barrier(), !dbg !34
  fence syncscope("workgroup") acquire, !dbg !34
  %437 = load <1 x half>, ptr addrspace(3) %223, align 2, !dbg !34
  %438 = load <1 x half>, ptr addrspace(3) %224, align 2, !dbg !34
  %439 = load <1 x half>, ptr addrspace(3) %225, align 2, !dbg !34
  %440 = shufflevector <1 x half> %439, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %441 = load <1 x half>, ptr addrspace(3) %226, align 2, !dbg !34
  %442 = shufflevector <1 x half> %441, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %443 = load <1 x half>, ptr addrspace(3) %227, align 2, !dbg !34
  %444 = load <1 x half>, ptr addrspace(3) %228, align 2, !dbg !34
  %445 = load <1 x half>, ptr addrspace(3) %229, align 2, !dbg !34
  %446 = shufflevector <1 x half> %445, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %447 = load <1 x half>, ptr addrspace(3) %230, align 2, !dbg !34
  %448 = shufflevector <1 x half> %447, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %449 = load <1 x half>, ptr addrspace(3) %231, align 2, !dbg !34
  %450 = load <1 x half>, ptr addrspace(3) %232, align 2, !dbg !34
  %451 = load <1 x half>, ptr addrspace(3) %233, align 2, !dbg !34
  %452 = shufflevector <1 x half> %451, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %453 = load <1 x half>, ptr addrspace(3) %234, align 2, !dbg !34
  %454 = shufflevector <1 x half> %453, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %455 = load <1 x half>, ptr addrspace(3) %235, align 2, !dbg !34
  %456 = load <1 x half>, ptr addrspace(3) %236, align 2, !dbg !34
  %457 = load <1 x half>, ptr addrspace(3) %237, align 2, !dbg !34
  %458 = shufflevector <1 x half> %457, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %459 = load <1 x half>, ptr addrspace(3) %238, align 2, !dbg !34
  %460 = shufflevector <1 x half> %459, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %461 = load <1 x half>, ptr addrspace(3) %239, align 2, !dbg !34
  %462 = load <1 x half>, ptr addrspace(3) %240, align 2, !dbg !34
  %463 = load <1 x half>, ptr addrspace(3) %241, align 2, !dbg !34
  %464 = shufflevector <1 x half> %463, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %465 = load <1 x half>, ptr addrspace(3) %242, align 2, !dbg !34
  %466 = shufflevector <1 x half> %465, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %467 = load <1 x half>, ptr addrspace(3) %243, align 2, !dbg !34
  %468 = load <1 x half>, ptr addrspace(3) %244, align 2, !dbg !34
  %469 = load <1 x half>, ptr addrspace(3) %245, align 2, !dbg !34
  %470 = shufflevector <1 x half> %469, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %471 = load <1 x half>, ptr addrspace(3) %246, align 2, !dbg !34
  %472 = shufflevector <1 x half> %471, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %473 = load <1 x half>, ptr addrspace(3) %247, align 2, !dbg !34
  %474 = load <1 x half>, ptr addrspace(3) %248, align 2, !dbg !34
  %475 = load <1 x half>, ptr addrspace(3) %249, align 2, !dbg !34
  %476 = shufflevector <1 x half> %475, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %477 = load <1 x half>, ptr addrspace(3) %250, align 2, !dbg !34
  %478 = shufflevector <1 x half> %477, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %479 = load <1 x half>, ptr addrspace(3) %251, align 2, !dbg !34
  %480 = load <1 x half>, ptr addrspace(3) %252, align 2, !dbg !34
  %481 = load <1 x half>, ptr addrspace(3) %253, align 2, !dbg !34
  %482 = shufflevector <1 x half> %481, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %483 = load <1 x half>, ptr addrspace(3) %254, align 2, !dbg !34
  %484 = shufflevector <1 x half> %483, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %485 = insertelement <4 x half> poison, half %421, i64 0, !dbg !54
  %486 = insertelement <4 x half> %485, half %422, i64 1, !dbg !54
  %487 = insertelement <4 x half> %486, half %423, i64 2, !dbg !54
  %488 = insertelement <4 x half> %487, half %424, i64 3, !dbg !54
  %489 = insertelement <4 x half> poison, half %425, i64 0, !dbg !54
  %490 = insertelement <4 x half> %489, half %426, i64 1, !dbg !54
  %491 = insertelement <4 x half> %490, half %427, i64 2, !dbg !54
  %492 = insertelement <4 x half> %491, half %428, i64 3, !dbg !54
  %493 = insertelement <4 x half> poison, half %429, i64 0, !dbg !54
  %494 = insertelement <4 x half> %493, half %430, i64 1, !dbg !54
  %495 = insertelement <4 x half> %494, half %431, i64 2, !dbg !54
  %496 = insertelement <4 x half> %495, half %432, i64 3, !dbg !54
  %497 = insertelement <4 x half> poison, half %433, i64 0, !dbg !54
  %498 = insertelement <4 x half> %497, half %434, i64 1, !dbg !54
  %499 = insertelement <4 x half> %498, half %435, i64 2, !dbg !54
  %500 = insertelement <4 x half> %499, half %436, i64 3, !dbg !54
  %501 = shufflevector <1 x half> %437, <1 x half> %438, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %502 = shufflevector <4 x half> %501, <4 x half> %440, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %503 = shufflevector <4 x half> %502, <4 x half> %442, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %504 = shufflevector <1 x half> %443, <1 x half> %444, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %505 = shufflevector <4 x half> %504, <4 x half> %446, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %506 = shufflevector <4 x half> %505, <4 x half> %448, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %507 = shufflevector <1 x half> %449, <1 x half> %450, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %508 = shufflevector <4 x half> %507, <4 x half> %452, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %509 = shufflevector <4 x half> %508, <4 x half> %454, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %510 = shufflevector <1 x half> %455, <1 x half> %456, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %511 = shufflevector <4 x half> %510, <4 x half> %458, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %512 = shufflevector <4 x half> %511, <4 x half> %460, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %513 = shufflevector <1 x half> %461, <1 x half> %462, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %514 = shufflevector <4 x half> %513, <4 x half> %464, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %515 = shufflevector <4 x half> %514, <4 x half> %466, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %516 = shufflevector <1 x half> %467, <1 x half> %468, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %517 = shufflevector <4 x half> %516, <4 x half> %470, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %518 = shufflevector <4 x half> %517, <4 x half> %472, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %519 = shufflevector <1 x half> %473, <1 x half> %474, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %520 = shufflevector <4 x half> %519, <4 x half> %476, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %521 = shufflevector <4 x half> %520, <4 x half> %478, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %522 = shufflevector <1 x half> %479, <1 x half> %480, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %523 = shufflevector <4 x half> %522, <4 x half> %482, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %524 = shufflevector <4 x half> %523, <4 x half> %484, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %525 = shufflevector <2 x float> %405, <2 x float> %406, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %526 = shufflevector <2 x float> %407, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %527 = shufflevector <16 x float> %525, <16 x float> %526, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %528 = shufflevector <2 x float> %408, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %529 = shufflevector <16 x float> %527, <16 x float> %528, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %530 = shufflevector <2 x float> %409, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %531 = shufflevector <16 x float> %529, <16 x float> %530, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %532 = shufflevector <2 x float> %410, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %533 = shufflevector <16 x float> %531, <16 x float> %532, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %534 = shufflevector <2 x float> %411, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %535 = shufflevector <16 x float> %533, <16 x float> %534, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !54
  %536 = shufflevector <2 x float> %412, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %537 = shufflevector <16 x float> %535, <16 x float> %536, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !54
  %538 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %503, <4 x half> %488, <16 x float> %537, i32 0, i32 0, i32 0), !dbg !54
  %539 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %506, <4 x half> %492, <16 x float> %538, i32 0, i32 0, i32 0), !dbg !54
  %540 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %509, <4 x half> %496, <16 x float> %539, i32 0, i32 0, i32 0), !dbg !54
  %541 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %512, <4 x half> %500, <16 x float> %540, i32 0, i32 0, i32 0), !dbg !54
  %542 = shufflevector <2 x float> %413, <2 x float> %414, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %543 = shufflevector <2 x float> %415, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %544 = shufflevector <16 x float> %542, <16 x float> %543, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %545 = shufflevector <2 x float> %416, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %546 = shufflevector <16 x float> %544, <16 x float> %545, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %547 = shufflevector <2 x float> %417, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %548 = shufflevector <16 x float> %546, <16 x float> %547, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %549 = shufflevector <2 x float> %418, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %550 = shufflevector <16 x float> %548, <16 x float> %549, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %551 = shufflevector <2 x float> %419, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %552 = shufflevector <16 x float> %550, <16 x float> %551, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !54
  %553 = shufflevector <2 x float> %420, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %554 = shufflevector <16 x float> %552, <16 x float> %553, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !54
  %555 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %515, <4 x half> %488, <16 x float> %554, i32 0, i32 0, i32 0), !dbg !54
  %556 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %518, <4 x half> %492, <16 x float> %555, i32 0, i32 0, i32 0), !dbg !54
  %557 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %521, <4 x half> %496, <16 x float> %556, i32 0, i32 0, i32 0), !dbg !54
  %558 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %524, <4 x half> %500, <16 x float> %557, i32 0, i32 0, i32 0), !dbg !54
  %559 = add nuw nsw i64 %256, 32, !dbg !55
  %indvars = trunc i64 %559 to i32, !dbg !30
  %560 = icmp sgt i32 %33, %indvars, !dbg !30
  %561 = shufflevector <16 x float> %558, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %562 = shufflevector <16 x float> %558, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %563 = shufflevector <16 x float> %558, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %564 = shufflevector <16 x float> %558, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %565 = shufflevector <16 x float> %558, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %566 = shufflevector <16 x float> %558, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %567 = shufflevector <16 x float> %558, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %568 = shufflevector <16 x float> %558, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %569 = shufflevector <16 x float> %541, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %570 = shufflevector <16 x float> %541, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %571 = shufflevector <16 x float> %541, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %572 = shufflevector <16 x float> %541, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %573 = shufflevector <16 x float> %541, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %574 = shufflevector <16 x float> %541, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %575 = shufflevector <16 x float> %541, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %576 = shufflevector <16 x float> %541, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %560, label %255, label %._crit_edge, !dbg !30

._crit_edge:                                      ; preds = %255, %20
  %.lcssa30 = phi float [ 1.000000e+00, %20 ], [ %402, %255 ]
  %.lcssa28 = phi float [ 0xFFF0000000000000, %20 ], [ %331, %255 ]
  %577 = phi <2 x float> [ zeroinitializer, %20 ], [ %561, %255 ]
  %578 = phi <2 x float> [ zeroinitializer, %20 ], [ %562, %255 ]
  %579 = phi <2 x float> [ zeroinitializer, %20 ], [ %563, %255 ]
  %580 = phi <2 x float> [ zeroinitializer, %20 ], [ %564, %255 ]
  %581 = phi <2 x float> [ zeroinitializer, %20 ], [ %565, %255 ]
  %582 = phi <2 x float> [ zeroinitializer, %20 ], [ %566, %255 ]
  %583 = phi <2 x float> [ zeroinitializer, %20 ], [ %567, %255 ]
  %584 = phi <2 x float> [ zeroinitializer, %20 ], [ %568, %255 ]
  %585 = phi <2 x float> [ zeroinitializer, %20 ], [ %569, %255 ]
  %586 = phi <2 x float> [ zeroinitializer, %20 ], [ %570, %255 ]
  %587 = phi <2 x float> [ zeroinitializer, %20 ], [ %571, %255 ]
  %588 = phi <2 x float> [ zeroinitializer, %20 ], [ %572, %255 ]
  %589 = phi <2 x float> [ zeroinitializer, %20 ], [ %573, %255 ]
  %590 = phi <2 x float> [ zeroinitializer, %20 ], [ %574, %255 ]
  %591 = phi <2 x float> [ zeroinitializer, %20 ], [ %575, %255 ]
  %592 = phi <2 x float> [ zeroinitializer, %20 ], [ %576, %255 ]
  %593 = add i32 %33, 128, !dbg !56
  %.not50 = icmp eq i32 %33, 2147483520, !dbg !58
  %594 = extractelement <2 x float> %577, i64 0, !dbg !58
  %595 = extractelement <2 x float> %577, i64 1, !dbg !58
  %596 = extractelement <2 x float> %578, i64 0, !dbg !58
  %597 = extractelement <2 x float> %578, i64 1, !dbg !58
  %598 = extractelement <2 x float> %579, i64 0, !dbg !58
  %599 = extractelement <2 x float> %579, i64 1, !dbg !58
  %600 = extractelement <2 x float> %580, i64 0, !dbg !58
  %601 = extractelement <2 x float> %580, i64 1, !dbg !58
  %602 = extractelement <2 x float> %581, i64 0, !dbg !58
  %603 = extractelement <2 x float> %581, i64 1, !dbg !58
  %604 = extractelement <2 x float> %582, i64 0, !dbg !58
  %605 = extractelement <2 x float> %582, i64 1, !dbg !58
  %606 = extractelement <2 x float> %583, i64 0, !dbg !58
  %607 = extractelement <2 x float> %583, i64 1, !dbg !58
  %608 = extractelement <2 x float> %584, i64 0, !dbg !58
  %609 = extractelement <2 x float> %584, i64 1, !dbg !58
  %610 = extractelement <2 x float> %585, i64 0, !dbg !58
  %611 = extractelement <2 x float> %585, i64 1, !dbg !58
  %612 = extractelement <2 x float> %586, i64 0, !dbg !58
  %613 = extractelement <2 x float> %586, i64 1, !dbg !58
  %614 = extractelement <2 x float> %587, i64 0, !dbg !58
  %615 = extractelement <2 x float> %587, i64 1, !dbg !58
  %616 = extractelement <2 x float> %588, i64 0, !dbg !58
  %617 = extractelement <2 x float> %588, i64 1, !dbg !58
  %618 = extractelement <2 x float> %589, i64 0, !dbg !58
  %619 = extractelement <2 x float> %589, i64 1, !dbg !58
  %620 = extractelement <2 x float> %590, i64 0, !dbg !58
  %621 = extractelement <2 x float> %590, i64 1, !dbg !58
  %622 = extractelement <2 x float> %591, i64 0, !dbg !58
  %623 = extractelement <2 x float> %591, i64 1, !dbg !58
  %624 = extractelement <2 x float> %592, i64 0, !dbg !58
  %625 = extractelement <2 x float> %592, i64 1, !dbg !58
  br i1 %.not50, label %._crit_edge40, label %.lr.ph39, !dbg !58

.lr.ph39:                                         ; preds = %._crit_edge
  %626 = mul nsw i64 %70, %45
  %invariant.gep44 = getelementptr half, ptr addrspace(1) %69, i64 %626, !dbg !58
  %invariant.gep45 = getelementptr half, ptr addrspace(1) %invariant.gep44, i64 %57, !dbg !58
  %627 = mul nsw i64 %68, %45
  %invariant.gep47 = getelementptr half, ptr addrspace(1) %67, i64 %627, !dbg !58
  %invariant.gep48 = getelementptr half, ptr addrspace(1) %invariant.gep47, i64 %57, !dbg !58
  %628 = shl nuw nsw i32 %71, 6
  %629 = or disjoint i32 %118, %628
  %630 = or disjoint i32 %123, %628
  %631 = or disjoint i32 %127, %628
  %632 = or disjoint i32 %131, %628
  %633 = or disjoint i32 %135, %628
  %634 = or disjoint i32 %139, %628
  %635 = or disjoint i32 %143, %628
  %636 = or disjoint i32 %147, %628
  %637 = getelementptr half, ptr addrspace(3) @global_smem, i32 %629
  %638 = getelementptr half, ptr addrspace(3) @global_smem, i32 %630
  %639 = getelementptr half, ptr addrspace(3) @global_smem, i32 %631
  %640 = getelementptr half, ptr addrspace(3) @global_smem, i32 %632
  %641 = getelementptr half, ptr addrspace(3) @global_smem, i32 %633
  %642 = getelementptr half, ptr addrspace(3) @global_smem, i32 %634
  %643 = getelementptr half, ptr addrspace(3) @global_smem, i32 %635
  %644 = getelementptr half, ptr addrspace(3) @global_smem, i32 %636
  %645 = shl i32 %35, 2
  %646 = xor i32 %645, 128
  %647 = or disjoint i32 %88, %56
  %648 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %647
  %649 = shl nuw nsw i32 %36, 3
  %650 = and i32 %649, 256
  %651 = or disjoint i32 %650, %71
  %652 = or disjoint i32 %651, 64
  %653 = or disjoint i32 %651, 128
  %654 = or disjoint i32 %651, 192
  %655 = or disjoint i32 %651, 512
  %656 = or disjoint i32 %651, 576
  %657 = or disjoint i32 %651, 640
  %658 = or disjoint i32 %651, 704
  %659 = or disjoint i32 %651, 1024
  %660 = or disjoint i32 %651, 1088
  %661 = or disjoint i32 %651, 1152
  %662 = or disjoint i32 %651, 1216
  %663 = or disjoint i32 %651, 1536
  %664 = or disjoint i32 %651, 1600
  %665 = or disjoint i32 %651, 1664
  %666 = or disjoint i32 %651, 1728
  %667 = or disjoint i32 %651, 32
  %668 = or disjoint i32 %651, 96
  %669 = or disjoint i32 %651, 160
  %670 = or disjoint i32 %651, 224
  %671 = or disjoint i32 %651, 544
  %672 = or disjoint i32 %651, 608
  %673 = or disjoint i32 %651, 672
  %674 = or disjoint i32 %651, 736
  %675 = or disjoint i32 %651, 1056
  %676 = or disjoint i32 %651, 1120
  %677 = or disjoint i32 %651, 1184
  %678 = or disjoint i32 %651, 1248
  %679 = or disjoint i32 %651, 1568
  %680 = or disjoint i32 %651, 1632
  %681 = or disjoint i32 %651, 1696
  %682 = or disjoint i32 %651, 1760
  %683 = getelementptr half, ptr addrspace(3) @global_smem, i32 %651
  %684 = getelementptr half, ptr addrspace(3) @global_smem, i32 %652
  %685 = getelementptr half, ptr addrspace(3) @global_smem, i32 %653
  %686 = getelementptr half, ptr addrspace(3) @global_smem, i32 %654
  %687 = getelementptr half, ptr addrspace(3) @global_smem, i32 %655
  %688 = getelementptr half, ptr addrspace(3) @global_smem, i32 %656
  %689 = getelementptr half, ptr addrspace(3) @global_smem, i32 %657
  %690 = getelementptr half, ptr addrspace(3) @global_smem, i32 %658
  %691 = getelementptr half, ptr addrspace(3) @global_smem, i32 %659
  %692 = getelementptr half, ptr addrspace(3) @global_smem, i32 %660
  %693 = getelementptr half, ptr addrspace(3) @global_smem, i32 %661
  %694 = getelementptr half, ptr addrspace(3) @global_smem, i32 %662
  %695 = getelementptr half, ptr addrspace(3) @global_smem, i32 %663
  %696 = getelementptr half, ptr addrspace(3) @global_smem, i32 %664
  %697 = getelementptr half, ptr addrspace(3) @global_smem, i32 %665
  %698 = getelementptr half, ptr addrspace(3) @global_smem, i32 %666
  %699 = getelementptr half, ptr addrspace(3) @global_smem, i32 %667
  %700 = getelementptr half, ptr addrspace(3) @global_smem, i32 %668
  %701 = getelementptr half, ptr addrspace(3) @global_smem, i32 %669
  %702 = getelementptr half, ptr addrspace(3) @global_smem, i32 %670
  %703 = getelementptr half, ptr addrspace(3) @global_smem, i32 %671
  %704 = getelementptr half, ptr addrspace(3) @global_smem, i32 %672
  %705 = getelementptr half, ptr addrspace(3) @global_smem, i32 %673
  %706 = getelementptr half, ptr addrspace(3) @global_smem, i32 %674
  %707 = getelementptr half, ptr addrspace(3) @global_smem, i32 %675
  %708 = getelementptr half, ptr addrspace(3) @global_smem, i32 %676
  %709 = getelementptr half, ptr addrspace(3) @global_smem, i32 %677
  %710 = getelementptr half, ptr addrspace(3) @global_smem, i32 %678
  %711 = getelementptr half, ptr addrspace(3) @global_smem, i32 %679
  %712 = getelementptr half, ptr addrspace(3) @global_smem, i32 %680
  %713 = getelementptr half, ptr addrspace(3) @global_smem, i32 %681
  %714 = getelementptr half, ptr addrspace(3) @global_smem, i32 %682
  br label %715, !dbg !58

715:                                              ; preds = %.lr.ph39, %715
  %716 = phi i64 [ %34, %.lr.ph39 ], [ %1065, %715 ]
  %717 = phi float [ %.lcssa28, %.lr.ph39 ], [ %853, %715 ]
  %718 = phi float [ %.lcssa30, %.lr.ph39 ], [ %908, %715 ]
  %719 = phi <2 x float> [ %577, %.lr.ph39 ], [ %1067, %715 ]
  %720 = phi <2 x float> [ %578, %.lr.ph39 ], [ %1068, %715 ]
  %721 = phi <2 x float> [ %579, %.lr.ph39 ], [ %1069, %715 ]
  %722 = phi <2 x float> [ %580, %.lr.ph39 ], [ %1070, %715 ]
  %723 = phi <2 x float> [ %581, %.lr.ph39 ], [ %1071, %715 ]
  %724 = phi <2 x float> [ %582, %.lr.ph39 ], [ %1072, %715 ]
  %725 = phi <2 x float> [ %583, %.lr.ph39 ], [ %1073, %715 ]
  %726 = phi <2 x float> [ %584, %.lr.ph39 ], [ %1074, %715 ]
  %727 = phi <2 x float> [ %585, %.lr.ph39 ], [ %1075, %715 ]
  %728 = phi <2 x float> [ %586, %.lr.ph39 ], [ %1076, %715 ]
  %729 = phi <2 x float> [ %587, %.lr.ph39 ], [ %1077, %715 ]
  %730 = phi <2 x float> [ %588, %.lr.ph39 ], [ %1078, %715 ]
  %731 = phi <2 x float> [ %589, %.lr.ph39 ], [ %1079, %715 ]
  %732 = phi <2 x float> [ %590, %.lr.ph39 ], [ %1080, %715 ]
  %733 = phi <2 x float> [ %591, %.lr.ph39 ], [ %1081, %715 ]
  %734 = phi <2 x float> [ %592, %.lr.ph39 ], [ %1082, %715 ]
  %indvars59 = trunc i64 %716 to i32
  %735 = mul i64 %716, %70, !dbg !59
  %gep46 = getelementptr half, ptr addrspace(1) %invariant.gep45, i64 %735, !dbg !59
  %unmaskedload6 = load <8 x half>, ptr addrspace(1) %gep46, align 16, !dbg !59
  %736 = mul i64 %716, %68, !dbg !60
  %gep49 = getelementptr half, ptr addrspace(1) %invariant.gep48, i64 %736, !dbg !60
  %unmaskedload7 = load <8 x half>, ptr addrspace(1) %gep49, align 16, !dbg !60
  fence syncscope("workgroup") release, !dbg !59
  tail call void @llvm.amdgcn.s.barrier(), !dbg !59
  fence syncscope("workgroup") acquire, !dbg !59
  %737 = shufflevector <8 x half> %unmaskedload6, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  store <4 x half> %737, ptr addrspace(3) %90, align 8, !dbg !59
  %738 = shufflevector <8 x half> %unmaskedload6, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  store <4 x half> %738, ptr addrspace(3) %97, align 8, !dbg !59
  fence syncscope("workgroup") release, !dbg !59
  tail call void @llvm.amdgcn.s.barrier(), !dbg !59
  fence syncscope("workgroup") acquire, !dbg !59
  %739 = load <4 x half>, ptr addrspace(3) %637, align 8, !dbg !59
  %740 = load <4 x half>, ptr addrspace(3) %638, align 8, !dbg !59
  %741 = load <4 x half>, ptr addrspace(3) %639, align 8, !dbg !59
  %742 = load <4 x half>, ptr addrspace(3) %640, align 8, !dbg !59
  %743 = load <4 x half>, ptr addrspace(3) %641, align 8, !dbg !59
  %744 = load <4 x half>, ptr addrspace(3) %642, align 8, !dbg !59
  %745 = load <4 x half>, ptr addrspace(3) %643, align 8, !dbg !59
  %746 = load <4 x half>, ptr addrspace(3) %644, align 8, !dbg !59
  %747 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %739, <4 x half> %150, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !61
  %748 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %740, <4 x half> %152, <16 x float> %747, i32 0, i32 0, i32 0), !dbg !61
  %749 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %741, <4 x half> %154, <16 x float> %748, i32 0, i32 0, i32 0), !dbg !61
  %750 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %742, <4 x half> %156, <16 x float> %749, i32 0, i32 0, i32 0), !dbg !61
  %751 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %743, <4 x half> %158, <16 x float> %750, i32 0, i32 0, i32 0), !dbg !61
  %752 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %744, <4 x half> %160, <16 x float> %751, i32 0, i32 0, i32 0), !dbg !61
  %753 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %745, <4 x half> %162, <16 x float> %752, i32 0, i32 0, i32 0), !dbg !61
  %754 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %746, <4 x half> %164, <16 x float> %753, i32 0, i32 0, i32 0), !dbg !61
  %755 = extractelement <16 x float> %754, i64 0, !dbg !61
  %756 = extractelement <16 x float> %754, i64 1, !dbg !61
  %757 = extractelement <16 x float> %754, i64 2, !dbg !61
  %758 = extractelement <16 x float> %754, i64 3, !dbg !61
  %759 = extractelement <16 x float> %754, i64 4, !dbg !61
  %760 = extractelement <16 x float> %754, i64 5, !dbg !61
  %761 = extractelement <16 x float> %754, i64 6, !dbg !61
  %762 = extractelement <16 x float> %754, i64 7, !dbg !61
  %763 = extractelement <16 x float> %754, i64 8, !dbg !61
  %764 = extractelement <16 x float> %754, i64 9, !dbg !61
  %765 = extractelement <16 x float> %754, i64 10, !dbg !61
  %766 = extractelement <16 x float> %754, i64 11, !dbg !61
  %767 = extractelement <16 x float> %754, i64 12, !dbg !61
  %768 = extractelement <16 x float> %754, i64 13, !dbg !61
  %769 = extractelement <16 x float> %754, i64 14, !dbg !61
  %770 = extractelement <16 x float> %754, i64 15, !dbg !61
  %771 = or disjoint i32 %38, %indvars59, !dbg !62
  %772 = or disjoint i32 %771, 2, !dbg !62
  %773 = or disjoint i32 %771, 3, !dbg !62
  %774 = or disjoint i32 %78, %indvars59, !dbg !62
  %775 = or disjoint i32 %771, 9, !dbg !62
  %776 = or disjoint i32 %771, 10, !dbg !62
  %777 = or disjoint i32 %771, 11, !dbg !62
  %778 = or disjoint i32 %79, %indvars59, !dbg !62
  %779 = or disjoint i32 %771, 17, !dbg !62
  %780 = or disjoint i32 %771, 18, !dbg !62
  %781 = or disjoint i32 %771, 19, !dbg !62
  %782 = or disjoint i32 %80, %indvars59, !dbg !62
  %783 = or disjoint i32 %771, 25, !dbg !62
  %784 = or disjoint i32 %771, 26, !dbg !62
  %785 = or disjoint i32 %771, 27, !dbg !62
  %.not = icmp slt i32 %76, %771, !dbg !63
  %.not8.not = icmp sgt i32 %76, %771, !dbg !63
  %.not9 = icmp slt i32 %76, %772, !dbg !63
  %.not10 = icmp slt i32 %76, %773, !dbg !63
  %.not11 = icmp slt i32 %76, %774, !dbg !63
  %.not12 = icmp slt i32 %76, %775, !dbg !63
  %.not13 = icmp slt i32 %76, %776, !dbg !63
  %.not14 = icmp slt i32 %76, %777, !dbg !63
  %.not15 = icmp slt i32 %76, %778, !dbg !63
  %.not16 = icmp slt i32 %76, %779, !dbg !63
  %.not17 = icmp slt i32 %76, %780, !dbg !63
  %.not18 = icmp slt i32 %76, %781, !dbg !63
  %.not19 = icmp slt i32 %76, %782, !dbg !63
  %.not20 = icmp slt i32 %76, %783, !dbg !63
  %.not21 = icmp slt i32 %76, %784, !dbg !63
  %.not22 = icmp slt i32 %76, %785, !dbg !63
  %786 = fmul float %77, %755, !dbg !64
  %787 = fmul float %77, %756, !dbg !64
  %788 = fmul float %77, %757, !dbg !64
  %789 = fmul float %77, %758, !dbg !64
  %790 = fmul float %77, %759, !dbg !64
  %791 = fmul float %77, %760, !dbg !64
  %792 = fmul float %77, %761, !dbg !64
  %793 = fmul float %77, %762, !dbg !64
  %794 = fmul float %77, %763, !dbg !64
  %795 = fmul float %77, %764, !dbg !64
  %796 = fmul float %77, %765, !dbg !64
  %797 = fmul float %77, %766, !dbg !64
  %798 = fmul float %77, %767, !dbg !64
  %799 = fmul float %77, %768, !dbg !64
  %800 = fmul float %77, %769, !dbg !64
  %801 = fmul float %77, %770, !dbg !64
  %802 = select i1 %.not, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %803 = select i1 %.not8.not, float 0.000000e+00, float -1.000000e+06, !dbg !65
  %804 = select i1 %.not9, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %805 = select i1 %.not10, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %806 = select i1 %.not11, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %807 = select i1 %.not12, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %808 = select i1 %.not13, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %809 = select i1 %.not14, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %810 = select i1 %.not15, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %811 = select i1 %.not16, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %812 = select i1 %.not17, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %813 = select i1 %.not18, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %814 = select i1 %.not19, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %815 = select i1 %.not20, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %816 = select i1 %.not21, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %817 = select i1 %.not22, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %818 = fadd float %802, %786, !dbg !66
  %819 = fadd float %803, %787, !dbg !66
  %820 = fadd float %804, %788, !dbg !66
  %821 = fadd float %805, %789, !dbg !66
  %822 = fadd float %806, %790, !dbg !66
  %823 = fadd float %807, %791, !dbg !66
  %824 = fadd float %808, %792, !dbg !66
  %825 = fadd float %809, %793, !dbg !66
  %826 = fadd float %810, %794, !dbg !66
  %827 = fadd float %811, %795, !dbg !66
  %828 = fadd float %812, %796, !dbg !66
  %829 = fadd float %813, %797, !dbg !66
  %830 = fadd float %814, %798, !dbg !66
  %831 = fadd float %815, %799, !dbg !66
  %832 = fadd float %816, %800, !dbg !66
  %833 = fadd float %817, %801, !dbg !66
  %834 = tail call float @llvm.maxnum.f32(float %818, float %819), !dbg !67
  %835 = tail call float @llvm.maxnum.f32(float %834, float %820), !dbg !67
  %836 = tail call float @llvm.maxnum.f32(float %835, float %821), !dbg !67
  %837 = tail call float @llvm.maxnum.f32(float %836, float %822), !dbg !67
  %838 = tail call float @llvm.maxnum.f32(float %837, float %823), !dbg !67
  %839 = tail call float @llvm.maxnum.f32(float %838, float %824), !dbg !67
  %840 = tail call float @llvm.maxnum.f32(float %839, float %825), !dbg !67
  %841 = tail call float @llvm.maxnum.f32(float %840, float %826), !dbg !67
  %842 = tail call float @llvm.maxnum.f32(float %841, float %827), !dbg !67
  %843 = tail call float @llvm.maxnum.f32(float %842, float %828), !dbg !67
  %844 = tail call float @llvm.maxnum.f32(float %843, float %829), !dbg !67
  %845 = tail call float @llvm.maxnum.f32(float %844, float %830), !dbg !67
  %846 = tail call float @llvm.maxnum.f32(float %845, float %831), !dbg !67
  %847 = tail call float @llvm.maxnum.f32(float %846, float %832), !dbg !67
  %848 = tail call float @llvm.maxnum.f32(float %847, float %833), !dbg !67
  %849 = bitcast float %848 to i32, !dbg !68
  %850 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %646, i32 %849), !dbg !68
  %851 = bitcast i32 %850 to float, !dbg !68
  %852 = tail call float @llvm.maxnum.f32(float %848, float %851), !dbg !67
  %853 = tail call float @llvm.maxnum.f32(float %717, float %852), !dbg !69
  %854 = fsub float %818, %853, !dbg !70
  %855 = fsub float %819, %853, !dbg !70
  %856 = fsub float %820, %853, !dbg !70
  %857 = fsub float %821, %853, !dbg !70
  %858 = fsub float %822, %853, !dbg !70
  %859 = fsub float %823, %853, !dbg !70
  %860 = fsub float %824, %853, !dbg !70
  %861 = fsub float %825, %853, !dbg !70
  %862 = fsub float %826, %853, !dbg !70
  %863 = fsub float %827, %853, !dbg !70
  %864 = fsub float %828, %853, !dbg !70
  %865 = fsub float %829, %853, !dbg !70
  %866 = fsub float %830, %853, !dbg !70
  %867 = fsub float %831, %853, !dbg !70
  %868 = fsub float %832, %853, !dbg !70
  %869 = fsub float %833, %853, !dbg !70
  %870 = tail call float @llvm.amdgcn.exp2.f32(float %854), !dbg !71
  %871 = tail call float @llvm.amdgcn.exp2.f32(float %855), !dbg !71
  %872 = tail call float @llvm.amdgcn.exp2.f32(float %856), !dbg !71
  %873 = tail call float @llvm.amdgcn.exp2.f32(float %857), !dbg !71
  %874 = tail call float @llvm.amdgcn.exp2.f32(float %858), !dbg !71
  %875 = tail call float @llvm.amdgcn.exp2.f32(float %859), !dbg !71
  %876 = tail call float @llvm.amdgcn.exp2.f32(float %860), !dbg !71
  %877 = tail call float @llvm.amdgcn.exp2.f32(float %861), !dbg !71
  %878 = tail call float @llvm.amdgcn.exp2.f32(float %862), !dbg !71
  %879 = tail call float @llvm.amdgcn.exp2.f32(float %863), !dbg !71
  %880 = tail call float @llvm.amdgcn.exp2.f32(float %864), !dbg !71
  %881 = tail call float @llvm.amdgcn.exp2.f32(float %865), !dbg !71
  %882 = tail call float @llvm.amdgcn.exp2.f32(float %866), !dbg !71
  %883 = tail call float @llvm.amdgcn.exp2.f32(float %867), !dbg !71
  %884 = tail call float @llvm.amdgcn.exp2.f32(float %868), !dbg !71
  %885 = tail call float @llvm.amdgcn.exp2.f32(float %869), !dbg !71
  %886 = fadd float %870, %871, !dbg !72
  %887 = fadd float %872, %886, !dbg !72
  %888 = fadd float %873, %887, !dbg !72
  %889 = fadd float %874, %888, !dbg !72
  %890 = fadd float %875, %889, !dbg !72
  %891 = fadd float %876, %890, !dbg !72
  %892 = fadd float %877, %891, !dbg !72
  %893 = fadd float %878, %892, !dbg !72
  %894 = fadd float %879, %893, !dbg !72
  %895 = fadd float %880, %894, !dbg !72
  %896 = fadd float %881, %895, !dbg !72
  %897 = fadd float %882, %896, !dbg !72
  %898 = fadd float %883, %897, !dbg !72
  %899 = fadd float %884, %898, !dbg !72
  %900 = fadd float %885, %899, !dbg !72
  %901 = bitcast float %900 to i32, !dbg !73
  %902 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %646, i32 %901), !dbg !73
  %903 = bitcast i32 %902 to float, !dbg !73
  %904 = fadd float %900, %903, !dbg !72
  %905 = fsub float %717, %853, !dbg !74
  %906 = tail call float @llvm.amdgcn.exp2.f32(float %905), !dbg !75
  %907 = fmul float %718, %906, !dbg !76
  %908 = fadd float %907, %904, !dbg !77
  %909 = insertelement <2 x float> poison, float %906, i64 0, !dbg !78
  %910 = shufflevector <2 x float> %909, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !78
  %911 = fmul <2 x float> %727, %910, !dbg !78
  %912 = fmul <2 x float> %728, %910, !dbg !78
  %913 = fmul <2 x float> %729, %910, !dbg !78
  %914 = fmul <2 x float> %730, %910, !dbg !78
  %915 = fmul <2 x float> %731, %910, !dbg !78
  %916 = fmul <2 x float> %732, %910, !dbg !78
  %917 = fmul <2 x float> %733, %910, !dbg !78
  %918 = fmul <2 x float> %734, %910, !dbg !78
  %919 = fmul <2 x float> %719, %910, !dbg !78
  %920 = fmul <2 x float> %720, %910, !dbg !78
  %921 = fmul <2 x float> %721, %910, !dbg !78
  %922 = fmul <2 x float> %722, %910, !dbg !78
  %923 = fmul <2 x float> %723, %910, !dbg !78
  %924 = fmul <2 x float> %724, %910, !dbg !78
  %925 = fmul <2 x float> %725, %910, !dbg !78
  %926 = fmul <2 x float> %726, %910, !dbg !78
  %927 = fptrunc float %870 to half, !dbg !79
  %928 = fptrunc float %871 to half, !dbg !79
  %929 = fptrunc float %872 to half, !dbg !79
  %930 = fptrunc float %873 to half, !dbg !79
  %931 = fptrunc float %874 to half, !dbg !79
  %932 = fptrunc float %875 to half, !dbg !79
  %933 = fptrunc float %876 to half, !dbg !79
  %934 = fptrunc float %877 to half, !dbg !79
  %935 = fptrunc float %878 to half, !dbg !79
  %936 = fptrunc float %879 to half, !dbg !79
  %937 = fptrunc float %880 to half, !dbg !79
  %938 = fptrunc float %881 to half, !dbg !79
  %939 = fptrunc float %882 to half, !dbg !79
  %940 = fptrunc float %883 to half, !dbg !79
  %941 = fptrunc float %884 to half, !dbg !79
  %942 = fptrunc float %885 to half, !dbg !79
  fence syncscope("workgroup") release, !dbg !60
  tail call void @llvm.amdgcn.s.barrier(), !dbg !60
  fence syncscope("workgroup") acquire, !dbg !60
  store <8 x half> %unmaskedload7, ptr addrspace(3) %648, align 16, !dbg !60
  fence syncscope("workgroup") release, !dbg !60
  tail call void @llvm.amdgcn.s.barrier(), !dbg !60
  fence syncscope("workgroup") acquire, !dbg !60
  %943 = load <1 x half>, ptr addrspace(3) %683, align 2, !dbg !60
  %944 = load <1 x half>, ptr addrspace(3) %684, align 2, !dbg !60
  %945 = load <1 x half>, ptr addrspace(3) %685, align 2, !dbg !60
  %946 = shufflevector <1 x half> %945, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %947 = load <1 x half>, ptr addrspace(3) %686, align 2, !dbg !60
  %948 = shufflevector <1 x half> %947, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %949 = load <1 x half>, ptr addrspace(3) %687, align 2, !dbg !60
  %950 = load <1 x half>, ptr addrspace(3) %688, align 2, !dbg !60
  %951 = load <1 x half>, ptr addrspace(3) %689, align 2, !dbg !60
  %952 = shufflevector <1 x half> %951, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %953 = load <1 x half>, ptr addrspace(3) %690, align 2, !dbg !60
  %954 = shufflevector <1 x half> %953, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %955 = load <1 x half>, ptr addrspace(3) %691, align 2, !dbg !60
  %956 = load <1 x half>, ptr addrspace(3) %692, align 2, !dbg !60
  %957 = load <1 x half>, ptr addrspace(3) %693, align 2, !dbg !60
  %958 = shufflevector <1 x half> %957, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %959 = load <1 x half>, ptr addrspace(3) %694, align 2, !dbg !60
  %960 = shufflevector <1 x half> %959, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %961 = load <1 x half>, ptr addrspace(3) %695, align 2, !dbg !60
  %962 = load <1 x half>, ptr addrspace(3) %696, align 2, !dbg !60
  %963 = load <1 x half>, ptr addrspace(3) %697, align 2, !dbg !60
  %964 = shufflevector <1 x half> %963, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %965 = load <1 x half>, ptr addrspace(3) %698, align 2, !dbg !60
  %966 = shufflevector <1 x half> %965, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %967 = load <1 x half>, ptr addrspace(3) %699, align 2, !dbg !60
  %968 = load <1 x half>, ptr addrspace(3) %700, align 2, !dbg !60
  %969 = load <1 x half>, ptr addrspace(3) %701, align 2, !dbg !60
  %970 = shufflevector <1 x half> %969, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %971 = load <1 x half>, ptr addrspace(3) %702, align 2, !dbg !60
  %972 = shufflevector <1 x half> %971, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %973 = load <1 x half>, ptr addrspace(3) %703, align 2, !dbg !60
  %974 = load <1 x half>, ptr addrspace(3) %704, align 2, !dbg !60
  %975 = load <1 x half>, ptr addrspace(3) %705, align 2, !dbg !60
  %976 = shufflevector <1 x half> %975, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %977 = load <1 x half>, ptr addrspace(3) %706, align 2, !dbg !60
  %978 = shufflevector <1 x half> %977, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %979 = load <1 x half>, ptr addrspace(3) %707, align 2, !dbg !60
  %980 = load <1 x half>, ptr addrspace(3) %708, align 2, !dbg !60
  %981 = load <1 x half>, ptr addrspace(3) %709, align 2, !dbg !60
  %982 = shufflevector <1 x half> %981, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %983 = load <1 x half>, ptr addrspace(3) %710, align 2, !dbg !60
  %984 = shufflevector <1 x half> %983, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %985 = load <1 x half>, ptr addrspace(3) %711, align 2, !dbg !60
  %986 = load <1 x half>, ptr addrspace(3) %712, align 2, !dbg !60
  %987 = load <1 x half>, ptr addrspace(3) %713, align 2, !dbg !60
  %988 = shufflevector <1 x half> %987, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %989 = load <1 x half>, ptr addrspace(3) %714, align 2, !dbg !60
  %990 = shufflevector <1 x half> %989, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %991 = insertelement <4 x half> poison, half %927, i64 0, !dbg !80
  %992 = insertelement <4 x half> %991, half %928, i64 1, !dbg !80
  %993 = insertelement <4 x half> %992, half %929, i64 2, !dbg !80
  %994 = insertelement <4 x half> %993, half %930, i64 3, !dbg !80
  %995 = insertelement <4 x half> poison, half %931, i64 0, !dbg !80
  %996 = insertelement <4 x half> %995, half %932, i64 1, !dbg !80
  %997 = insertelement <4 x half> %996, half %933, i64 2, !dbg !80
  %998 = insertelement <4 x half> %997, half %934, i64 3, !dbg !80
  %999 = insertelement <4 x half> poison, half %935, i64 0, !dbg !80
  %1000 = insertelement <4 x half> %999, half %936, i64 1, !dbg !80
  %1001 = insertelement <4 x half> %1000, half %937, i64 2, !dbg !80
  %1002 = insertelement <4 x half> %1001, half %938, i64 3, !dbg !80
  %1003 = insertelement <4 x half> poison, half %939, i64 0, !dbg !80
  %1004 = insertelement <4 x half> %1003, half %940, i64 1, !dbg !80
  %1005 = insertelement <4 x half> %1004, half %941, i64 2, !dbg !80
  %1006 = insertelement <4 x half> %1005, half %942, i64 3, !dbg !80
  %1007 = shufflevector <1 x half> %943, <1 x half> %944, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1008 = shufflevector <4 x half> %1007, <4 x half> %946, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1009 = shufflevector <4 x half> %1008, <4 x half> %948, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1010 = shufflevector <1 x half> %949, <1 x half> %950, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1011 = shufflevector <4 x half> %1010, <4 x half> %952, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1012 = shufflevector <4 x half> %1011, <4 x half> %954, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1013 = shufflevector <1 x half> %955, <1 x half> %956, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1014 = shufflevector <4 x half> %1013, <4 x half> %958, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1015 = shufflevector <4 x half> %1014, <4 x half> %960, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1016 = shufflevector <1 x half> %961, <1 x half> %962, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1017 = shufflevector <4 x half> %1016, <4 x half> %964, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1018 = shufflevector <4 x half> %1017, <4 x half> %966, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1019 = shufflevector <1 x half> %967, <1 x half> %968, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1020 = shufflevector <4 x half> %1019, <4 x half> %970, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1021 = shufflevector <4 x half> %1020, <4 x half> %972, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1022 = shufflevector <1 x half> %973, <1 x half> %974, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1023 = shufflevector <4 x half> %1022, <4 x half> %976, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1024 = shufflevector <4 x half> %1023, <4 x half> %978, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1025 = shufflevector <1 x half> %979, <1 x half> %980, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1026 = shufflevector <4 x half> %1025, <4 x half> %982, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1027 = shufflevector <4 x half> %1026, <4 x half> %984, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1028 = shufflevector <1 x half> %985, <1 x half> %986, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1029 = shufflevector <4 x half> %1028, <4 x half> %988, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1030 = shufflevector <4 x half> %1029, <4 x half> %990, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1031 = shufflevector <2 x float> %911, <2 x float> %912, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1032 = shufflevector <2 x float> %913, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1033 = shufflevector <16 x float> %1031, <16 x float> %1032, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1034 = shufflevector <2 x float> %914, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1035 = shufflevector <16 x float> %1033, <16 x float> %1034, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1036 = shufflevector <2 x float> %915, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1037 = shufflevector <16 x float> %1035, <16 x float> %1036, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1038 = shufflevector <2 x float> %916, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1039 = shufflevector <16 x float> %1037, <16 x float> %1038, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1040 = shufflevector <2 x float> %917, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1041 = shufflevector <16 x float> %1039, <16 x float> %1040, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !80
  %1042 = shufflevector <2 x float> %918, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1043 = shufflevector <16 x float> %1041, <16 x float> %1042, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !80
  %1044 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1009, <4 x half> %994, <16 x float> %1043, i32 0, i32 0, i32 0), !dbg !80
  %1045 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1012, <4 x half> %998, <16 x float> %1044, i32 0, i32 0, i32 0), !dbg !80
  %1046 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1015, <4 x half> %1002, <16 x float> %1045, i32 0, i32 0, i32 0), !dbg !80
  %1047 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1018, <4 x half> %1006, <16 x float> %1046, i32 0, i32 0, i32 0), !dbg !80
  %1048 = shufflevector <2 x float> %919, <2 x float> %920, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1049 = shufflevector <2 x float> %921, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1050 = shufflevector <16 x float> %1048, <16 x float> %1049, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1051 = shufflevector <2 x float> %922, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1052 = shufflevector <16 x float> %1050, <16 x float> %1051, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1053 = shufflevector <2 x float> %923, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1054 = shufflevector <16 x float> %1052, <16 x float> %1053, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1055 = shufflevector <2 x float> %924, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1056 = shufflevector <16 x float> %1054, <16 x float> %1055, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1057 = shufflevector <2 x float> %925, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1058 = shufflevector <16 x float> %1056, <16 x float> %1057, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !80
  %1059 = shufflevector <2 x float> %926, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1060 = shufflevector <16 x float> %1058, <16 x float> %1059, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !80
  %1061 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1021, <4 x half> %994, <16 x float> %1060, i32 0, i32 0, i32 0), !dbg !80
  %1062 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1024, <4 x half> %998, <16 x float> %1061, i32 0, i32 0, i32 0), !dbg !80
  %1063 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1027, <4 x half> %1002, <16 x float> %1062, i32 0, i32 0, i32 0), !dbg !80
  %1064 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1030, <4 x half> %1006, <16 x float> %1063, i32 0, i32 0, i32 0), !dbg !80
  %1065 = add nsw i64 %716, 32, !dbg !81
  %indvars58 = trunc i64 %1065 to i32, !dbg !58
  %1066 = icmp sgt i32 %593, %indvars58, !dbg !58
  %1067 = shufflevector <16 x float> %1064, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1068 = shufflevector <16 x float> %1064, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1069 = shufflevector <16 x float> %1064, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1070 = shufflevector <16 x float> %1064, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1071 = shufflevector <16 x float> %1064, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1072 = shufflevector <16 x float> %1064, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1073 = shufflevector <16 x float> %1064, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1074 = shufflevector <16 x float> %1064, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1075 = shufflevector <16 x float> %1047, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1076 = shufflevector <16 x float> %1047, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1077 = shufflevector <16 x float> %1047, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1078 = shufflevector <16 x float> %1047, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1079 = shufflevector <16 x float> %1047, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1080 = shufflevector <16 x float> %1047, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1081 = shufflevector <16 x float> %1047, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1082 = shufflevector <16 x float> %1047, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %1066, label %715, label %._crit_edge40.loopexit, !dbg !58

._crit_edge40.loopexit:                           ; preds = %715
  %1083 = extractelement <16 x float> %1064, i64 15, !dbg !80
  %1084 = extractelement <16 x float> %1064, i64 14, !dbg !80
  %1085 = extractelement <16 x float> %1064, i64 13, !dbg !80
  %1086 = extractelement <16 x float> %1064, i64 12, !dbg !80
  %1087 = extractelement <16 x float> %1064, i64 11, !dbg !80
  %1088 = extractelement <16 x float> %1064, i64 10, !dbg !80
  %1089 = extractelement <16 x float> %1064, i64 9, !dbg !80
  %1090 = extractelement <16 x float> %1064, i64 8, !dbg !80
  %1091 = extractelement <16 x float> %1064, i64 7, !dbg !80
  %1092 = extractelement <16 x float> %1064, i64 6, !dbg !80
  %1093 = extractelement <16 x float> %1064, i64 5, !dbg !80
  %1094 = extractelement <16 x float> %1064, i64 4, !dbg !80
  %1095 = extractelement <16 x float> %1064, i64 3, !dbg !80
  %1096 = extractelement <16 x float> %1064, i64 2, !dbg !80
  %1097 = extractelement <16 x float> %1064, i64 1, !dbg !80
  %1098 = extractelement <16 x float> %1064, i64 0, !dbg !80
  %1099 = extractelement <16 x float> %1047, i64 15, !dbg !80
  %1100 = extractelement <16 x float> %1047, i64 14, !dbg !80
  %1101 = extractelement <16 x float> %1047, i64 13, !dbg !80
  %1102 = extractelement <16 x float> %1047, i64 12, !dbg !80
  %1103 = extractelement <16 x float> %1047, i64 11, !dbg !80
  %1104 = extractelement <16 x float> %1047, i64 10, !dbg !80
  %1105 = extractelement <16 x float> %1047, i64 9, !dbg !80
  %1106 = extractelement <16 x float> %1047, i64 8, !dbg !80
  %1107 = extractelement <16 x float> %1047, i64 7, !dbg !80
  %1108 = extractelement <16 x float> %1047, i64 6, !dbg !80
  %1109 = extractelement <16 x float> %1047, i64 5, !dbg !80
  %1110 = extractelement <16 x float> %1047, i64 4, !dbg !80
  %1111 = extractelement <16 x float> %1047, i64 3, !dbg !80
  %1112 = extractelement <16 x float> %1047, i64 2, !dbg !80
  %1113 = extractelement <16 x float> %1047, i64 1, !dbg !80
  %1114 = extractelement <16 x float> %1047, i64 0, !dbg !80
  br label %._crit_edge40, !dbg !23

._crit_edge40:                                    ; preds = %._crit_edge40.loopexit, %._crit_edge
  %.lcssa27 = phi float [ %.lcssa30, %._crit_edge ], [ %908, %._crit_edge40.loopexit ], !dbg !32
  %1115 = phi float [ %610, %._crit_edge ], [ %1114, %._crit_edge40.loopexit ], !dbg !32
  %1116 = phi float [ %611, %._crit_edge ], [ %1113, %._crit_edge40.loopexit ], !dbg !32
  %1117 = phi float [ %612, %._crit_edge ], [ %1112, %._crit_edge40.loopexit ], !dbg !32
  %1118 = phi float [ %613, %._crit_edge ], [ %1111, %._crit_edge40.loopexit ], !dbg !32
  %1119 = phi float [ %614, %._crit_edge ], [ %1110, %._crit_edge40.loopexit ], !dbg !32
  %1120 = phi float [ %615, %._crit_edge ], [ %1109, %._crit_edge40.loopexit ], !dbg !32
  %1121 = phi float [ %616, %._crit_edge ], [ %1108, %._crit_edge40.loopexit ], !dbg !32
  %1122 = phi float [ %617, %._crit_edge ], [ %1107, %._crit_edge40.loopexit ], !dbg !32
  %1123 = phi float [ %618, %._crit_edge ], [ %1106, %._crit_edge40.loopexit ], !dbg !32
  %1124 = phi float [ %619, %._crit_edge ], [ %1105, %._crit_edge40.loopexit ], !dbg !32
  %1125 = phi float [ %620, %._crit_edge ], [ %1104, %._crit_edge40.loopexit ], !dbg !32
  %1126 = phi float [ %621, %._crit_edge ], [ %1103, %._crit_edge40.loopexit ], !dbg !32
  %1127 = phi float [ %622, %._crit_edge ], [ %1102, %._crit_edge40.loopexit ], !dbg !32
  %1128 = phi float [ %623, %._crit_edge ], [ %1101, %._crit_edge40.loopexit ], !dbg !32
  %1129 = phi float [ %624, %._crit_edge ], [ %1100, %._crit_edge40.loopexit ], !dbg !32
  %1130 = phi float [ %625, %._crit_edge ], [ %1099, %._crit_edge40.loopexit ], !dbg !32
  %1131 = phi float [ %594, %._crit_edge ], [ %1098, %._crit_edge40.loopexit ], !dbg !32
  %1132 = phi float [ %595, %._crit_edge ], [ %1097, %._crit_edge40.loopexit ], !dbg !32
  %1133 = phi float [ %596, %._crit_edge ], [ %1096, %._crit_edge40.loopexit ], !dbg !32
  %1134 = phi float [ %597, %._crit_edge ], [ %1095, %._crit_edge40.loopexit ], !dbg !32
  %1135 = phi float [ %598, %._crit_edge ], [ %1094, %._crit_edge40.loopexit ], !dbg !32
  %1136 = phi float [ %599, %._crit_edge ], [ %1093, %._crit_edge40.loopexit ], !dbg !32
  %1137 = phi float [ %600, %._crit_edge ], [ %1092, %._crit_edge40.loopexit ], !dbg !32
  %1138 = phi float [ %601, %._crit_edge ], [ %1091, %._crit_edge40.loopexit ], !dbg !32
  %1139 = phi float [ %602, %._crit_edge ], [ %1090, %._crit_edge40.loopexit ], !dbg !32
  %1140 = phi float [ %603, %._crit_edge ], [ %1089, %._crit_edge40.loopexit ], !dbg !32
  %1141 = phi float [ %604, %._crit_edge ], [ %1088, %._crit_edge40.loopexit ], !dbg !32
  %1142 = phi float [ %605, %._crit_edge ], [ %1087, %._crit_edge40.loopexit ], !dbg !32
  %1143 = phi float [ %606, %._crit_edge ], [ %1086, %._crit_edge40.loopexit ], !dbg !32
  %1144 = phi float [ %607, %._crit_edge ], [ %1085, %._crit_edge40.loopexit ], !dbg !32
  %1145 = phi float [ %608, %._crit_edge ], [ %1084, %._crit_edge40.loopexit ], !dbg !32
  %1146 = phi float [ %609, %._crit_edge ], [ %1083, %._crit_edge40.loopexit ], !dbg !32
  %.lcssa = phi float [ %.lcssa28, %._crit_edge ], [ %853, %._crit_edge40.loopexit ], !dbg !32
  %1147 = or disjoint i32 %38, 56, !dbg !23
  %1148 = zext nneg i32 %1147 to i64, !dbg !23
  %1149 = or disjoint i32 %38, 48, !dbg !23
  %1150 = zext nneg i32 %1149 to i64, !dbg !23
  %1151 = or disjoint i32 %38, 40, !dbg !23
  %1152 = zext nneg i32 %1151 to i64, !dbg !23
  %1153 = or disjoint i32 %38, 32, !dbg !23
  %1154 = zext nneg i32 %1153 to i64, !dbg !23
  %1155 = zext nneg i32 %80 to i64, !dbg !23
  %1156 = zext nneg i32 %79 to i64, !dbg !23
  %1157 = zext nneg i32 %78 to i64, !dbg !23
  %1158 = zext nneg i32 %38 to i64, !dbg !23
  %1159 = zext nneg i32 %75 to i64, !dbg !23
  %1160 = and i32 %35, 127, !dbg !22
  %1161 = sext i32 %17 to i64, !dbg !82
  %1162 = getelementptr half, ptr addrspace(1) %5, i64 %30, !dbg !83
  %1163 = tail call noundef float @llvm.log2.f32(float %.lcssa27), !dbg !84
  %1164 = fadd float %1163, %.lcssa, !dbg !85
  %1165 = fdiv float %1115, %.lcssa27, !dbg !86
  %1166 = fdiv float %1116, %.lcssa27, !dbg !86
  %1167 = fdiv float %1117, %.lcssa27, !dbg !86
  %1168 = fdiv float %1118, %.lcssa27, !dbg !86
  %1169 = fdiv float %1119, %.lcssa27, !dbg !86
  %1170 = fdiv float %1120, %.lcssa27, !dbg !86
  %1171 = fdiv float %1121, %.lcssa27, !dbg !86
  %1172 = fdiv float %1122, %.lcssa27, !dbg !86
  %1173 = fdiv float %1123, %.lcssa27, !dbg !86
  %1174 = fdiv float %1124, %.lcssa27, !dbg !86
  %1175 = fdiv float %1125, %.lcssa27, !dbg !86
  %1176 = fdiv float %1126, %.lcssa27, !dbg !86
  %1177 = fdiv float %1127, %.lcssa27, !dbg !86
  %1178 = fdiv float %1128, %.lcssa27, !dbg !86
  %1179 = fdiv float %1129, %.lcssa27, !dbg !86
  %1180 = fdiv float %1130, %.lcssa27, !dbg !86
  %1181 = fdiv float %1131, %.lcssa27, !dbg !86
  %1182 = fdiv float %1132, %.lcssa27, !dbg !86
  %1183 = fdiv float %1133, %.lcssa27, !dbg !86
  %1184 = fdiv float %1134, %.lcssa27, !dbg !86
  %1185 = fdiv float %1135, %.lcssa27, !dbg !86
  %1186 = fdiv float %1136, %.lcssa27, !dbg !86
  %1187 = fdiv float %1137, %.lcssa27, !dbg !86
  %1188 = fdiv float %1138, %.lcssa27, !dbg !86
  %1189 = fdiv float %1139, %.lcssa27, !dbg !86
  %1190 = fdiv float %1140, %.lcssa27, !dbg !86
  %1191 = fdiv float %1141, %.lcssa27, !dbg !86
  %1192 = fdiv float %1142, %.lcssa27, !dbg !86
  %1193 = fdiv float %1143, %.lcssa27, !dbg !86
  %1194 = fdiv float %1144, %.lcssa27, !dbg !86
  %1195 = fdiv float %1145, %.lcssa27, !dbg !86
  %1196 = fdiv float %1146, %.lcssa27, !dbg !86
  %1197 = mul i32 %19, %21, !dbg !87
  %1198 = sext i32 %1197 to i64, !dbg !88
  %1199 = getelementptr float, ptr addrspace(1) %4, i64 %1198, !dbg !88
  %1200 = getelementptr float, ptr addrspace(1) %1199, i64 %34, !dbg !89
  fence syncscope("workgroup") release, !dbg !90
  tail call void @llvm.amdgcn.s.barrier(), !dbg !90
  fence syncscope("workgroup") acquire, !dbg !90
  %1201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %75, !dbg !90
  %1202 = insertelement <1 x float> poison, float %1164, i64 0, !dbg !90
  store <1 x float> %1202, ptr addrspace(3) %1201, align 4, !dbg !90
  fence syncscope("workgroup") release, !dbg !90
  tail call void @llvm.amdgcn.s.barrier(), !dbg !90
  fence syncscope("workgroup") acquire, !dbg !90
  %1203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1160, !dbg !90
  %1204 = load <1 x float>, ptr addrspace(3) %1203, align 4, !dbg !90
  %1205 = zext nneg i32 %1160 to i64, !dbg !90
  %1206 = getelementptr float, ptr addrspace(1) %1200, i64 %1205, !dbg !90
  %urem = and i32 %35, 128, !dbg !90
  %1207 = icmp eq i32 %urem, 0, !dbg !90
  %1208 = insertelement <1 x i1> poison, i1 %1207, i64 0, !dbg !90
  tail call void @llvm.masked.store.v1f32.p1(<1 x float> %1204, ptr addrspace(1) %1206, i32 16, <1 x i1> %1208), !dbg !90
  %1209 = fptrunc float %1165 to half, !dbg !91
  %1210 = fptrunc float %1166 to half, !dbg !91
  %1211 = fptrunc float %1167 to half, !dbg !91
  %1212 = fptrunc float %1168 to half, !dbg !91
  %1213 = fptrunc float %1169 to half, !dbg !91
  %1214 = fptrunc float %1170 to half, !dbg !91
  %1215 = fptrunc float %1171 to half, !dbg !91
  %1216 = fptrunc float %1172 to half, !dbg !91
  %1217 = fptrunc float %1173 to half, !dbg !91
  %1218 = fptrunc float %1174 to half, !dbg !91
  %1219 = fptrunc float %1175 to half, !dbg !91
  %1220 = fptrunc float %1176 to half, !dbg !91
  %1221 = fptrunc float %1177 to half, !dbg !91
  %1222 = fptrunc float %1178 to half, !dbg !91
  %1223 = fptrunc float %1179 to half, !dbg !91
  %1224 = fptrunc float %1180 to half, !dbg !91
  %1225 = fptrunc float %1181 to half, !dbg !91
  %1226 = fptrunc float %1182 to half, !dbg !91
  %1227 = fptrunc float %1183 to half, !dbg !91
  %1228 = fptrunc float %1184 to half, !dbg !91
  %1229 = fptrunc float %1185 to half, !dbg !91
  %1230 = fptrunc float %1186 to half, !dbg !91
  %1231 = fptrunc float %1187 to half, !dbg !91
  %1232 = fptrunc float %1188 to half, !dbg !91
  %1233 = fptrunc float %1189 to half, !dbg !91
  %1234 = fptrunc float %1190 to half, !dbg !91
  %1235 = fptrunc float %1191 to half, !dbg !91
  %1236 = fptrunc float %1192 to half, !dbg !91
  %1237 = fptrunc float %1193 to half, !dbg !91
  %1238 = fptrunc float %1194 to half, !dbg !91
  %1239 = fptrunc float %1195 to half, !dbg !91
  %1240 = fptrunc float %1196 to half, !dbg !91
  %1241 = mul nsw i64 %1161, %34, !dbg !92
  %1242 = mul nsw i64 %1161, %1159, !dbg !92
  %1243 = getelementptr half, ptr addrspace(1) %1162, i64 %1241, !dbg !92
  %1244 = getelementptr half, ptr addrspace(1) %1243, i64 %1242, !dbg !92
  %1245 = getelementptr half, ptr addrspace(1) %1244, i64 %1158, !dbg !92
  %1246 = getelementptr half, ptr addrspace(1) %1244, i64 %1157, !dbg !92
  %1247 = getelementptr half, ptr addrspace(1) %1244, i64 %1156, !dbg !92
  %1248 = getelementptr half, ptr addrspace(1) %1244, i64 %1155, !dbg !92
  %1249 = getelementptr half, ptr addrspace(1) %1244, i64 %1154, !dbg !92
  %1250 = getelementptr half, ptr addrspace(1) %1244, i64 %1152, !dbg !92
  %1251 = getelementptr half, ptr addrspace(1) %1244, i64 %1150, !dbg !92
  %1252 = getelementptr half, ptr addrspace(1) %1244, i64 %1148, !dbg !92
  %1253 = insertelement <4 x half> poison, half %1209, i64 0, !dbg !92
  %1254 = insertelement <4 x half> %1253, half %1210, i64 1, !dbg !92
  %1255 = insertelement <4 x half> %1254, half %1211, i64 2, !dbg !92
  %1256 = insertelement <4 x half> %1255, half %1212, i64 3, !dbg !92
  store <4 x half> %1256, ptr addrspace(1) %1245, align 16, !dbg !92
  %1257 = insertelement <4 x half> poison, half %1213, i64 0, !dbg !92
  %1258 = insertelement <4 x half> %1257, half %1214, i64 1, !dbg !92
  %1259 = insertelement <4 x half> %1258, half %1215, i64 2, !dbg !92
  %1260 = insertelement <4 x half> %1259, half %1216, i64 3, !dbg !92
  store <4 x half> %1260, ptr addrspace(1) %1246, align 16, !dbg !92
  %1261 = insertelement <4 x half> poison, half %1217, i64 0, !dbg !92
  %1262 = insertelement <4 x half> %1261, half %1218, i64 1, !dbg !92
  %1263 = insertelement <4 x half> %1262, half %1219, i64 2, !dbg !92
  %1264 = insertelement <4 x half> %1263, half %1220, i64 3, !dbg !92
  store <4 x half> %1264, ptr addrspace(1) %1247, align 16, !dbg !92
  %1265 = insertelement <4 x half> poison, half %1221, i64 0, !dbg !92
  %1266 = insertelement <4 x half> %1265, half %1222, i64 1, !dbg !92
  %1267 = insertelement <4 x half> %1266, half %1223, i64 2, !dbg !92
  %1268 = insertelement <4 x half> %1267, half %1224, i64 3, !dbg !92
  store <4 x half> %1268, ptr addrspace(1) %1248, align 16, !dbg !92
  %1269 = insertelement <4 x half> poison, half %1225, i64 0, !dbg !92
  %1270 = insertelement <4 x half> %1269, half %1226, i64 1, !dbg !92
  %1271 = insertelement <4 x half> %1270, half %1227, i64 2, !dbg !92
  %1272 = insertelement <4 x half> %1271, half %1228, i64 3, !dbg !92
  store <4 x half> %1272, ptr addrspace(1) %1249, align 16, !dbg !92
  %1273 = insertelement <4 x half> poison, half %1229, i64 0, !dbg !92
  %1274 = insertelement <4 x half> %1273, half %1230, i64 1, !dbg !92
  %1275 = insertelement <4 x half> %1274, half %1231, i64 2, !dbg !92
  %1276 = insertelement <4 x half> %1275, half %1232, i64 3, !dbg !92
  store <4 x half> %1276, ptr addrspace(1) %1250, align 16, !dbg !92
  %1277 = insertelement <4 x half> poison, half %1233, i64 0, !dbg !92
  %1278 = insertelement <4 x half> %1277, half %1234, i64 1, !dbg !92
  %1279 = insertelement <4 x half> %1278, half %1235, i64 2, !dbg !92
  %1280 = insertelement <4 x half> %1279, half %1236, i64 3, !dbg !92
  store <4 x half> %1280, ptr addrspace(1) %1251, align 16, !dbg !92
  %1281 = insertelement <4 x half> poison, half %1237, i64 0, !dbg !92
  %1282 = insertelement <4 x half> %1281, half %1238, i64 1, !dbg !92
  %1283 = insertelement <4 x half> %1282, half %1239, i64 2, !dbg !92
  %1284 = insertelement <4 x half> %1283, half %1240, i64 3, !dbg !92
  store <4 x half> %1284, ptr addrspace(1) %1252, align 16, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half>, <4 x half>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.log2.f32(float) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.masked.store.v1f32.p1(<1 x float>, ptr addrspace(1) nocapture, i32 immarg, <1 x i1>) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="3" "denormal-fp-math-f32"="preserve-sign" "uniform-work-group-size"="false" }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 8, !"PIC Level", i32 0}
!4 = distinct !DICompileUnit(language: DW_LANG_C, file: !5, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!5 = !DIFile(filename: "06-fused-attention.py", directory: "/triton/python/tutorials")
!6 = !DISubprogram(name: "llvm.amdgcn.exp2.f32", linkageName: "llvm.amdgcn.exp2.f32", scope: !5, file: !5, line: 173, type: !7, scopeLine: 173, spFlags: DISPFlagOptimized)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "_attn_fwd", linkageName: "_attn_fwd", scope: !5, file: !5, line: 102, type: !7, scopeLine: 102, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4)
!10 = !DILocation(line: 115, column: 27, scope: !9)
!11 = !DILocation(line: 116, column: 22, scope: !9)
!12 = !DILocation(line: 118, column: 26, scope: !9)
!13 = !DILocation(line: 118, column: 38, scope: !9)
!14 = !DILocation(line: 117, column: 21, scope: !9)
!15 = !DILocation(line: 118, column: 59, scope: !9)
!16 = !DILocation(line: 118, column: 71, scope: !9)
!17 = !DILocation(line: 118, column: 50, scope: !9)
!18 = !DILocation(line: 122, column: 17, scope: !9)
!19 = !DILocation(line: 114, column: 28, scope: !9)
!20 = !DILocation(line: 125, column: 27, scope: !9)
!21 = !DILocation(line: 127, column: 8, scope: !9)
!22 = !DILocation(line: 155, column: 46, scope: !9)
!23 = !DILocation(line: 165, column: 16, scope: !9)
!24 = !DILocation(line: 131, column: 17, scope: !9)
!25 = !DILocation(line: 136, column: 8, scope: !9)
!26 = !DILocation(line: 139, column: 17, scope: !9)
!27 = !DILocation(line: 144, column: 8, scope: !9)
!28 = !DILocation(line: 155, column: 33, scope: !9)
!29 = !DILocation(line: 163, column: 16, scope: !9)
!30 = !DILocation(line: 46, column: 33, scope: !31, inlinedAt: !32)
!31 = distinct !DILexicalBlockFile(scope: !9, file: !5, discriminator: 0)
!32 = !DILocation(line: 173, column: 74, scope: !9)
!33 = !DILocation(line: 49, column: 20, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 67, column: 20, scope: !31, inlinedAt: !32)
!35 = !DILocation(line: 50, column: 23, scope: !31, inlinedAt: !32)
!36 = !DILocation(line: 163, column: 27, scope: !37, inlinedAt: !32)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/triton/python/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !31, file: !38, discriminator: 0)
!40 = !DILocation(line: 184, column: 40, scope: !39, inlinedAt: !32)
!41 = !DILocation(line: 57, column: 51, scope: !31, inlinedAt: !32)
!42 = !DILocation(line: 57, column: 35, scope: !31, inlinedAt: !32)
!43 = !DILocation(line: 58, column: 22, scope: !31, inlinedAt: !32)
!44 = !DILocation(line: 58, column: 33, scope: !31, inlinedAt: !32)
!45 = !DILocation(line: 59, column: 25, scope: !31, inlinedAt: !32)
!46 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !32)
!47 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !32)
!48 = !DILocation(line: 62, column: 35, scope: !31, inlinedAt: !32)
!49 = !DILocation(line: 62, column: 29, scope: !31, inlinedAt: !32)
!50 = !DILocation(line: 63, column: 20, scope: !31, inlinedAt: !32)
!51 = !DILocation(line: 63, column: 28, scope: !31, inlinedAt: !32)
!52 = !DILocation(line: 65, column: 20, scope: !31, inlinedAt: !32)
!53 = !DILocation(line: 71, column: 21, scope: !31, inlinedAt: !32)
!54 = !DILocation(line: 72, column: 27, scope: !31, inlinedAt: !32)
!55 = !DILocation(line: 76, column: 46, scope: !31, inlinedAt: !32)
!56 = !DILocation(line: 38, column: 52, scope: !31, inlinedAt: !57)
!57 = !DILocation(line: 182, column: 66, scope: !9)
!58 = !DILocation(line: 46, column: 33, scope: !31, inlinedAt: !57)
!59 = !DILocation(line: 49, column: 20, scope: !31, inlinedAt: !57)
!60 = !DILocation(line: 67, column: 20, scope: !31, inlinedAt: !57)
!61 = !DILocation(line: 50, column: 23, scope: !31, inlinedAt: !57)
!62 = !DILocation(line: 52, column: 49, scope: !31, inlinedAt: !57)
!63 = !DILocation(line: 52, column: 39, scope: !31, inlinedAt: !57)
!64 = !DILocation(line: 53, column: 22, scope: !31, inlinedAt: !57)
!65 = !DILocation(line: 53, column: 51, scope: !31, inlinedAt: !57)
!66 = !DILocation(line: 53, column: 33, scope: !31, inlinedAt: !57)
!67 = !DILocation(line: 163, column: 27, scope: !37, inlinedAt: !57)
!68 = !DILocation(line: 184, column: 40, scope: !39, inlinedAt: !57)
!69 = !DILocation(line: 54, column: 35, scope: !31, inlinedAt: !57)
!70 = !DILocation(line: 55, column: 18, scope: !31, inlinedAt: !57)
!71 = !DILocation(line: 59, column: 25, scope: !31, inlinedAt: !57)
!72 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !57)
!73 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !57)
!74 = !DILocation(line: 62, column: 35, scope: !31, inlinedAt: !57)
!75 = !DILocation(line: 62, column: 29, scope: !31, inlinedAt: !57)
!76 = !DILocation(line: 63, column: 20, scope: !31, inlinedAt: !57)
!77 = !DILocation(line: 63, column: 28, scope: !31, inlinedAt: !57)
!78 = !DILocation(line: 65, column: 20, scope: !31, inlinedAt: !57)
!79 = !DILocation(line: 71, column: 21, scope: !31, inlinedAt: !57)
!80 = !DILocation(line: 72, column: 27, scope: !31, inlinedAt: !57)
!81 = !DILocation(line: 76, column: 46, scope: !31, inlinedAt: !57)
!82 = !DILocation(line: 152, column: 8, scope: !9)
!83 = !DILocation(line: 147, column: 19, scope: !9)
!84 = !DILocation(line: 185, column: 24, scope: !9)
!85 = !DILocation(line: 185, column: 11, scope: !9)
!86 = !DILocation(line: 186, column: 16, scope: !9)
!87 = !DILocation(line: 187, column: 26, scope: !9)
!88 = !DILocation(line: 187, column: 17, scope: !9)
!89 = !DILocation(line: 187, column: 34, scope: !9)
!90 = !DILocation(line: 188, column: 21, scope: !9)
!91 = !DILocation(line: 189, column: 33, scope: !9)
!92 = !DILocation(line: 189, column: 26, scope: !9)
!93 = !DILocation(line: 189, column: 4, scope: !9)
