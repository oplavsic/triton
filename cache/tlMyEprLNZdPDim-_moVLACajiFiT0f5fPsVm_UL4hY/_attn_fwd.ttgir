#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc = loc("/triton/python/tutorials/06-fused-attention.py":100:0)
#loc12 = loc(unknown)
#loc26 = loc("/triton/python/tutorials/06-fused-attention.py":171:74)
#loc33 = loc("/triton/python/tutorials/06-fused-attention.py":55:46)
#loc40 = loc("/triton/python/tutorials/06-fused-attention.py":58:25)
#loc54 = loc("/triton/python/tutorials/06-fused-attention.py":180:66)
#loc65 = loc("/triton/python/tutorials/06-fused-attention.py":52:46)
#mma = #triton_gpu.amd_mfma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [0, 1], hasLeadingOffset = false}>
#shared2 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0], hasLeadingOffset = false}>
#loc87 = loc(callsite(#loc12 at #loc33))
#loc94 = loc(callsite(#loc12 at #loc40))
#loc123 = loc(callsite(#loc12 at #loc65))
#loc140 = loc(callsite(#loc87 at #loc26))
#loc143 = loc(callsite(#loc94 at #loc26))
#loc146 = loc(callsite(#loc123 at #loc54))
#loc149 = loc(callsite(#loc94 at #loc54))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "hip:gfx942", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @_attn_fwd(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg3: f32 loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg15: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg17: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg18: i32 loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg19: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0)) attributes {noinline = false} {
    %0 = tt.get_program_id y : i32 loc(#loc1)
    %1 = arith.divsi %0, %arg18 : i32 loc(#loc2)
    %2 = arith.extsi %1 : i32 to i64 loc(#loc3)
    %3 = arith.extsi %arg6 : i32 to i64 loc(#loc4)
    %4 = arith.muli %2, %3 : i64 loc(#loc4)
    %5 = arith.remsi %0, %arg18 : i32 loc(#loc5)
    %6 = arith.extsi %5 : i32 to i64 loc(#loc6)
    %7 = arith.extsi %arg7 : i32 to i64 loc(#loc7)
    %8 = arith.muli %6, %7 : i64 loc(#loc7)
    %9 = arith.addi %4, %8 : i64 loc(#loc8)
    %10 = tt.addptr %arg0, %9 : !tt.ptr<f16>, i64 loc(#loc9)
    %11 = tt.splat %10 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc10)
    %12 = tt.get_program_id x : i32 loc(#loc11)
    %c64_i32 = arith.constant 64 : i32 loc(#loc12)
    %13 = arith.muli %12, %c64_i32 : i32 loc(#loc13)
    %14 = arith.extsi %13 : i32 to i64 loc(#loc14)
    %15 = tt.splat %14 : i64 -> tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc10)
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %17 = arith.extsi %16 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> to tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc10)
    %18 = arith.addi %15, %17 : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc10)
    %19 = tt.expand_dims %18 {axis = 1 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc10)
    %20 = arith.extsi %arg8 : i32 to i64 loc(#loc14)
    %21 = tt.splat %20 : i64 -> tensor<64x1xi64, #blocked> loc(#loc10)
    %22 = arith.muli %19, %21 : tensor<64x1xi64, #blocked> loc(#loc10)
    %23 = tt.broadcast %22 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc10)
    %24 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %25 = arith.extsi %24 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %26 = tt.expand_dims %25 {axis = 0 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc10)
    %27 = tt.broadcast %26 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc10)
    %28 = arith.addi %23, %27 : tensor<64x64xi64, #blocked> loc(#loc10)
    %29 = tt.addptr %11, %28 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc10)
    %30 = tt.load %29 : tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc10)
    %cst = arith.constant dense<1.000000e+00> : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc12)
    %cst_0 = arith.constant dense<0xFF800000> : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc12)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc12)
    %c0_i64 = arith.constant 0 : i64 loc(#loc12)
    %c32_i64 = arith.constant 32 : i64 loc(#loc12)
    %c1_i32 = arith.constant 1 : i32 loc(#loc12)
    %c32_i32 = arith.constant 32 : i32 loc(#loc12)
    %c0_i32 = arith.constant 0 : i32 loc(#loc12)
    %cst_2 = arith.constant 1.44269502 : f32 loc(#loc12)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mma> loc(#loc12)
    %cst_4 = arith.constant dense<-1.000000e+06> : tensor<64x32xf32, #mma> loc(#loc12)
    %31 = tt.addptr %arg2, %9 : !tt.ptr<f16>, i64 loc(#loc16)
    %32 = arith.extsi %arg14 : i32 to i64 loc(#loc17)
    %33 = tt.addptr %arg1, %9 : !tt.ptr<f16>, i64 loc(#loc18)
    %34 = arith.extsi %arg11 : i32 to i64 loc(#loc19)
    %35 = tt.addptr %arg5, %9 : !tt.ptr<f16>, i64 loc(#loc20)
    %36 = arith.extsi %arg17 : i32 to i64 loc(#loc21)
    %37 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %38 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc15)
    %39 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %40 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked2> loc(#loc15)
    %41 = tt.splat %13 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc22)
    %42 = tt.splat %13 : i32 -> tensor<64xi32, #blocked2> loc(#loc22)
    %43 = arith.addi %41, %37 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc22)
    %44 = arith.addi %42, %40 : tensor<64xi32, #blocked2> loc(#loc22)
    %45 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc23)
    %46 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc23)
    %47 = arith.mulf %arg3, %cst_2 : f32 loc(#loc24)
    %48 = tt.splat %14 : i64 -> tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc10)
    %49 = arith.extsi %37 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> to tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc10)
    %50 = arith.extsi %38 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc10)
    %51 = arith.extsi %39 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> to tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc10)
    %52 = arith.addi %48, %49 : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc10)
    %53 = tt.expand_dims %52 {axis = 1 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi64, #mma> loc(#loc10)
    %54 = tt.expand_dims %51 {axis = 0 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi64, #mma> loc(#loc10)
    %55 = tt.broadcast %54 : tensor<1x64xi64, #mma> -> tensor<64x64xi64, #mma> loc(#loc10)
    %56 = triton_gpu.local_alloc %30 : (tensor<64x64xf16, #blocked>) -> !tt.memdesc<64x64xf16, #shared, #triton_gpu.shared_memory> loc(#loc10)
    %57 = triton_gpu.local_load %56 : !tt.memdesc<64x64xf16, #shared, #triton_gpu.shared_memory> -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc10)
    %58 = tt.splat %33 : !tt.ptr<f16> -> tensor<64x32x!tt.ptr<f16>, #blocked1> loc(#loc80)
    %59 = tt.expand_dims %50 {axis = 1 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc80)
    %60 = tt.broadcast %59 : tensor<64x1xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc80)
    %61 = arith.extsi %45 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> to tensor<32xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc80)
    %62 = arith.extsi %46 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> to tensor<32xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc80)
    %63 = tt.splat %34 : i64 -> tensor<1x32xi64, #blocked1> loc(#loc80)
    %64 = tt.splat %47 : f32 -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc81)
    %65 = tt.splat %47 : f32 -> tensor<64x32xf32, #mma> loc(#loc82)
    %66 = tt.splat %31 : !tt.ptr<f16> -> tensor<32x64x!tt.ptr<f16>, #blocked> loc(#loc83)
    %67 = tt.splat %32 : i64 -> tensor<32x1xi64, #blocked> loc(#loc83)
    %68 = tt.broadcast %26 : tensor<1x64xi64, #blocked> -> tensor<32x64xi64, #blocked> loc(#loc83)
    %69:5 = scf.for %arg20 = %c0_i32 to %13 step %c32_i32 iter_args(%arg21 = %cst, %arg22 = %cst_1, %arg23 = %cst_0, %arg24 = %c0_i64, %arg25 = %c0_i64) -> (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<64x64xf32, #mma>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, i64, i64)  : i32 {
      %96 = tt.splat %arg24 : i64 -> tensor<32xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc83)
      %97 = arith.addi %96, %62 : tensor<32xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc83)
      %98 = tt.expand_dims %97 {axis = 1 : i32} : tensor<32xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi64, #blocked> loc(#loc83)
      %99 = arith.muli %98, %67 : tensor<32x1xi64, #blocked> loc(#loc83)
      %100 = tt.broadcast %99 : tensor<32x1xi64, #blocked> -> tensor<32x64xi64, #blocked> loc(#loc83)
      %101 = arith.addi %100, %68 : tensor<32x64xi64, #blocked> loc(#loc83)
      %102 = tt.addptr %66, %101 : tensor<32x64x!tt.ptr<f16>, #blocked>, tensor<32x64xi64, #blocked> loc(#loc83)
      %103 = tt.load %102 : tensor<32x64x!tt.ptr<f16>, #blocked> loc(#loc83)
      %104 = tt.splat %arg25 : i64 -> tensor<32xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc80)
      %105 = arith.addi %104, %61 : tensor<32xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc80)
      %106 = tt.expand_dims %105 {axis = 0 : i32} : tensor<32xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi64, #blocked1> loc(#loc80)
      %107 = arith.muli %106, %63 : tensor<1x32xi64, #blocked1> loc(#loc80)
      %108 = tt.broadcast %107 : tensor<1x32xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc80)
      %109 = arith.addi %60, %108 : tensor<64x32xi64, #blocked1> loc(#loc80)
      %110 = tt.addptr %58, %109 : tensor<64x32x!tt.ptr<f16>, #blocked1>, tensor<64x32xi64, #blocked1> loc(#loc80)
      %111 = tt.load %110 : tensor<64x32x!tt.ptr<f16>, #blocked1> loc(#loc80)
      %112 = triton_gpu.local_alloc %111 : (tensor<64x32xf16, #blocked1>) -> !tt.memdesc<64x32xf16, #shared1, #triton_gpu.shared_memory> loc(#loc80)
      %113 = triton_gpu.local_load %112 : !tt.memdesc<64x32xf16, #shared1, #triton_gpu.shared_memory> -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc80)
      %114 = tt.dot %57, %113, %cst_3 : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x32xf32, #mma> loc(#loc85)
      %115 = "tt.reduce"(%114) <{axis = 1 : i32}> ({
      ^bb0(%arg26: f32 loc(callsite(#loc87 at #loc26)), %arg27: f32 loc(callsite(#loc87 at #loc26))):
        %138 = arith.maxnumf %arg26, %arg27 : f32 loc(#loc150)
        tt.reduce.return %138 : f32 loc(#loc139)
      }) : (tensor<64x32xf32, #mma>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc139)
      %116 = arith.mulf %115, %64 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc81)
      %117 = arith.maxnumf %arg23, %116 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc89)
      %118 = arith.mulf %114, %65 : tensor<64x32xf32, #mma> loc(#loc82)
      %119 = tt.expand_dims %117 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc90)
      %120 = tt.broadcast %119 : tensor<64x1xf32, #mma> -> tensor<64x32xf32, #mma> loc(#loc91)
      %121 = arith.subf %118, %120 : tensor<64x32xf32, #mma> loc(#loc91)
      %122 = math.exp2 %121 : tensor<64x32xf32, #mma> loc(#loc92)
      %123 = "tt.reduce"(%122) <{axis = 1 : i32}> ({
      ^bb0(%arg26: f32 loc(callsite(#loc94 at #loc26)), %arg27: f32 loc(callsite(#loc94 at #loc26))):
        %138 = arith.addf %arg26, %arg27 : f32 loc(#loc151)
        tt.reduce.return %138 : f32 loc(#loc142)
      }) : (tensor<64x32xf32, #mma>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc142)
      %124 = arith.subf %arg23, %117 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc96)
      %125 = math.exp2 %124 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc97)
      %126 = arith.mulf %arg21, %125 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc98)
      %127 = arith.addf %126, %123 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc99)
      %128 = tt.expand_dims %125 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc100)
      %129 = tt.broadcast %128 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc101)
      %130 = arith.mulf %arg22, %129 : tensor<64x64xf32, #mma> loc(#loc101)
      %131 = triton_gpu.local_alloc %103 : (tensor<32x64xf16, #blocked>) -> !tt.memdesc<32x64xf16, #shared2, #triton_gpu.shared_memory> loc(#loc83)
      %132 = triton_gpu.local_load %131 : !tt.memdesc<32x64xf16, #shared2, #triton_gpu.shared_memory> -> tensor<32x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc83)
      %133 = arith.truncf %122 : tensor<64x32xf32, #mma> to tensor<64x32xf16, #mma> loc(#loc102)
      %134 = triton_gpu.convert_layout %133 : tensor<64x32xf16, #mma> -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc102)
      %135 = tt.dot %134, %132, %130 : tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<32x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x64xf32, #mma> loc(#loc103)
      %136 = arith.addi %arg24, %c32_i64 : i64 loc(#loc104)
      %137 = arith.addi %arg25, %c32_i64 : i64 loc(#loc105)
      scf.yield %127, %135, %117, %136, %137 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<64x64xf32, #mma>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, i64, i64 loc(#loc106)
    } loc(#loc84)
    %70 = arith.muli %12, %c64_i32 {tt.divisibility = dense<64> : tensor<1xi32>} : i32 loc(#loc107)
    %71 = arith.addi %12, %c1_i32 : i32 loc(#loc108)
    %72 = arith.muli %71, %c64_i32 : i32 loc(#loc109)
    %73 = arith.extsi %70 : i32 to i64 loc(#loc110)
    %74 = tt.expand_dims %43 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc111)
    %75 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc112)
    %76 = tt.expand_dims %75 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc112)
    %77 = tt.broadcast %74 : tensor<64x1xi32, #mma> -> tensor<64x32xi32, #mma> loc(#loc113)
    %78:5 = scf.for %arg20 = %70 to %72 step %c32_i32 iter_args(%arg21 = %69#0, %arg22 = %69#1, %arg23 = %69#2, %arg24 = %73, %arg25 = %73) -> (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<64x64xf32, #mma>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, i64, i64)  : i32 {
      %96 = tt.splat %arg24 : i64 -> tensor<32xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc115)
      %97 = arith.addi %96, %62 : tensor<32xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc115)
      %98 = tt.expand_dims %97 {axis = 1 : i32} : tensor<32xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi64, #blocked> loc(#loc115)
      %99 = arith.muli %98, %67 : tensor<32x1xi64, #blocked> loc(#loc115)
      %100 = tt.broadcast %99 : tensor<32x1xi64, #blocked> -> tensor<32x64xi64, #blocked> loc(#loc115)
      %101 = arith.addi %100, %68 : tensor<32x64xi64, #blocked> loc(#loc115)
      %102 = tt.addptr %66, %101 : tensor<32x64x!tt.ptr<f16>, #blocked>, tensor<32x64xi64, #blocked> loc(#loc115)
      %103 = tt.load %102 : tensor<32x64x!tt.ptr<f16>, #blocked> loc(#loc115)
      %104 = tt.splat %arg25 : i64 -> tensor<32xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc116)
      %105 = arith.addi %104, %61 : tensor<32xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc116)
      %106 = tt.expand_dims %105 {axis = 0 : i32} : tensor<32xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi64, #blocked1> loc(#loc116)
      %107 = arith.muli %106, %63 : tensor<1x32xi64, #blocked1> loc(#loc116)
      %108 = tt.broadcast %107 : tensor<1x32xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc116)
      %109 = arith.addi %60, %108 : tensor<64x32xi64, #blocked1> loc(#loc116)
      %110 = tt.addptr %58, %109 : tensor<64x32x!tt.ptr<f16>, #blocked1>, tensor<64x32xi64, #blocked1> loc(#loc116)
      %111 = tt.load %110 : tensor<64x32x!tt.ptr<f16>, #blocked1> loc(#loc116)
      %112 = triton_gpu.local_alloc %111 : (tensor<64x32xf16, #blocked1>) -> !tt.memdesc<64x32xf16, #shared1, #triton_gpu.shared_memory> loc(#loc116)
      %113 = triton_gpu.local_load %112 : !tt.memdesc<64x32xf16, #shared1, #triton_gpu.shared_memory> -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc116)
      %114 = tt.dot %57, %113, %cst_3 : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x32xf32, #mma> loc(#loc117)
      %115 = tt.splat %arg20 : i32 -> tensor<1x32xi32, #mma> loc(#loc118)
      %116 = arith.addi %115, %76 : tensor<1x32xi32, #mma> loc(#loc118)
      %117 = tt.broadcast %116 : tensor<1x32xi32, #mma> -> tensor<64x32xi32, #mma> loc(#loc113)
      %118 = arith.cmpi sge, %77, %117 : tensor<64x32xi32, #mma> loc(#loc113)
      %119 = arith.mulf %114, %65 : tensor<64x32xf32, #mma> loc(#loc119)
      %120 = arith.select %118, %cst_3, %cst_4 : tensor<64x32xi1, #mma>, tensor<64x32xf32, #mma> loc(#loc120)
      %121 = arith.addf %119, %120 : tensor<64x32xf32, #mma> loc(#loc121)
      %122 = "tt.reduce"(%121) <{axis = 1 : i32}> ({
      ^bb0(%arg26: f32 loc(callsite(#loc123 at #loc54)), %arg27: f32 loc(callsite(#loc123 at #loc54))):
        %143 = arith.maxnumf %arg26, %arg27 : f32 loc(#loc152)
        tt.reduce.return %143 : f32 loc(#loc145)
      }) : (tensor<64x32xf32, #mma>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc145)
      %123 = arith.maxnumf %arg23, %122 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc124)
      %124 = tt.expand_dims %123 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc125)
      %125 = tt.broadcast %124 : tensor<64x1xf32, #mma> -> tensor<64x32xf32, #mma> loc(#loc126)
      %126 = arith.subf %121, %125 : tensor<64x32xf32, #mma> loc(#loc126)
      %127 = math.exp2 %126 : tensor<64x32xf32, #mma> loc(#loc127)
      %128 = "tt.reduce"(%127) <{axis = 1 : i32}> ({
      ^bb0(%arg26: f32 loc(callsite(#loc94 at #loc54)), %arg27: f32 loc(callsite(#loc94 at #loc54))):
        %143 = arith.addf %arg26, %arg27 : f32 loc(#loc153)
        tt.reduce.return %143 : f32 loc(#loc148)
      }) : (tensor<64x32xf32, #mma>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc148)
      %129 = arith.subf %arg23, %123 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc128)
      %130 = math.exp2 %129 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc129)
      %131 = arith.mulf %arg21, %130 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc130)
      %132 = arith.addf %131, %128 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc131)
      %133 = tt.expand_dims %130 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc132)
      %134 = tt.broadcast %133 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc133)
      %135 = arith.mulf %arg22, %134 : tensor<64x64xf32, #mma> loc(#loc133)
      %136 = triton_gpu.local_alloc %103 : (tensor<32x64xf16, #blocked>) -> !tt.memdesc<32x64xf16, #shared2, #triton_gpu.shared_memory> loc(#loc115)
      %137 = triton_gpu.local_load %136 : !tt.memdesc<32x64xf16, #shared2, #triton_gpu.shared_memory> -> tensor<32x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc115)
      %138 = arith.truncf %127 : tensor<64x32xf32, #mma> to tensor<64x32xf16, #mma> loc(#loc134)
      %139 = triton_gpu.convert_layout %138 : tensor<64x32xf16, #mma> -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc134)
      %140 = tt.dot %139, %137, %135 : tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<32x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x64xf32, #mma> loc(#loc135)
      %141 = arith.addi %arg24, %c32_i64 : i64 loc(#loc136)
      %142 = arith.addi %arg25, %c32_i64 : i64 loc(#loc137)
      scf.yield %132, %140, %123, %141, %142 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<64x64xf32, #mma>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, i64, i64 loc(#loc138)
    } loc(#loc114)
    %79 = math.log2 %78#0 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc69)
    %80 = arith.addf %78#2, %79 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc70)
    %81 = tt.expand_dims %78#0 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc71)
    %82 = tt.broadcast %81 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc72)
    %83 = arith.divf %78#1, %82 : tensor<64x64xf32, #mma> loc(#loc72)
    %84 = arith.muli %0, %arg19 : i32 loc(#loc73)
    %85 = tt.addptr %arg4, %84 : !tt.ptr<f32>, i32 loc(#loc74)
    %86 = tt.splat %85 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked2> loc(#loc75)
    %87 = tt.addptr %86, %44 : tensor<64x!tt.ptr<f32>, #blocked2>, tensor<64xi32, #blocked2> loc(#loc75)
    %88 = triton_gpu.convert_layout %80 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64xf32, #blocked2> loc(#loc76)
    tt.store %87, %88 : tensor<64x!tt.ptr<f32>, #blocked2> loc(#loc76)
    %89 = arith.truncf %83 : tensor<64x64xf32, #mma> to tensor<64x64xf16, #mma> loc(#loc77)
    %90 = tt.splat %35 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #mma> loc(#loc78)
    %91 = tt.splat %36 : i64 -> tensor<64x1xi64, #mma> loc(#loc78)
    %92 = arith.muli %53, %91 : tensor<64x1xi64, #mma> loc(#loc78)
    %93 = tt.broadcast %92 : tensor<64x1xi64, #mma> -> tensor<64x64xi64, #mma> loc(#loc78)
    %94 = arith.addi %93, %55 : tensor<64x64xi64, #mma> loc(#loc78)
    %95 = tt.addptr %90, %94 : tensor<64x64x!tt.ptr<f16>, #mma>, tensor<64x64xi64, #mma> loc(#loc78)
    tt.store %95, %89 : tensor<64x64x!tt.ptr<f16>, #mma> loc(#loc78)
    tt.return loc(#loc79)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/tutorials/06-fused-attention.py":113:27)
#loc2 = loc("/triton/python/tutorials/06-fused-attention.py":114:22)
#loc3 = loc("/triton/python/tutorials/06-fused-attention.py":116:26)
#loc4 = loc("/triton/python/tutorials/06-fused-attention.py":116:38)
#loc5 = loc("/triton/python/tutorials/06-fused-attention.py":115:21)
#loc6 = loc("/triton/python/tutorials/06-fused-attention.py":116:59)
#loc7 = loc("/triton/python/tutorials/06-fused-attention.py":116:71)
#loc8 = loc("/triton/python/tutorials/06-fused-attention.py":116:50)
#loc9 = loc("/triton/python/tutorials/06-fused-attention.py":120:17)
#loc10 = loc("/triton/python/tutorials/06-fused-attention.py":163:16)
#loc11 = loc("/triton/python/tutorials/06-fused-attention.py":112:28)
#loc13 = loc("/triton/python/tutorials/06-fused-attention.py":123:27)
#loc14 = loc("/triton/python/tutorials/06-fused-attention.py":125:8)
#loc15 = loc("/triton/python/tutorials/06-fused-attention.py":153:46)
#loc16 = loc("/triton/python/tutorials/06-fused-attention.py":129:17)
#loc17 = loc("/triton/python/tutorials/06-fused-attention.py":134:8)
#loc18 = loc("/triton/python/tutorials/06-fused-attention.py":137:17)
#loc19 = loc("/triton/python/tutorials/06-fused-attention.py":142:8)
#loc20 = loc("/triton/python/tutorials/06-fused-attention.py":145:19)
#loc21 = loc("/triton/python/tutorials/06-fused-attention.py":150:8)
#loc22 = loc("/triton/python/tutorials/06-fused-attention.py":153:33)
#loc23 = loc("/triton/python/tutorials/06-fused-attention.py":154:26)
#loc24 = loc("/triton/python/tutorials/06-fused-attention.py":161:16)
#loc25 = loc("/triton/python/tutorials/06-fused-attention.py":47:20)
#loc27 = loc("/triton/python/tutorials/06-fused-attention.py":55:51)
#loc28 = loc("/triton/python/tutorials/06-fused-attention.py":56:22)
#loc29 = loc("/triton/python/tutorials/06-fused-attention.py":65:20)
#loc30 = loc("/triton/python/tutorials/06-fused-attention.py":44:33)
#loc31 = loc("/triton/python/tutorials/06-fused-attention.py":48:23)
#loc32 = loc("/triton/python/triton/language/standard.py":184:40)
#loc34 = loc("/triton/python/triton/language/standard.py":163:27)
#loc35 = loc("/triton/python/tutorials/06-fused-attention.py":55:35)
#loc36 = loc("/triton/python/tutorials/06-fused-attention.py":56:38)
#loc37 = loc("/triton/python/tutorials/06-fused-attention.py":56:33)
#loc38 = loc("/triton/python/tutorials/06-fused-attention.py":57:25)
#loc39 = loc("/triton/python/triton/language/standard.py":267:36)
#loc41 = loc("/triton/python/triton/language/standard.py":256:15)
#loc42 = loc("/triton/python/tutorials/06-fused-attention.py":60:35)
#loc43 = loc("/triton/python/tutorials/06-fused-attention.py":60:29)
#loc44 = loc("/triton/python/tutorials/06-fused-attention.py":61:20)
#loc45 = loc("/triton/python/tutorials/06-fused-attention.py":61:28)
#loc46 = loc("/triton/python/tutorials/06-fused-attention.py":63:26)
#loc47 = loc("/triton/python/tutorials/06-fused-attention.py":63:20)
#loc48 = loc("/triton/python/tutorials/06-fused-attention.py":69:21)
#loc49 = loc("/triton/python/tutorials/06-fused-attention.py":70:27)
#loc50 = loc("/triton/python/tutorials/06-fused-attention.py":73:46)
#loc51 = loc("/triton/python/tutorials/06-fused-attention.py":74:46)
#loc52 = loc("/triton/python/tutorials/06-fused-attention.py":74:8)
#loc53 = loc("/triton/python/tutorials/06-fused-attention.py":36:27)
#loc55 = loc("/triton/python/tutorials/06-fused-attention.py":36:47)
#loc56 = loc("/triton/python/tutorials/06-fused-attention.py":36:52)
#loc57 = loc("/triton/python/tutorials/06-fused-attention.py":41:42)
#loc58 = loc("/triton/python/tutorials/06-fused-attention.py":50:26)
#loc59 = loc("/triton/python/tutorials/06-fused-attention.py":50:56)
#loc60 = loc("/triton/python/tutorials/06-fused-attention.py":50:39)
#loc61 = loc("/triton/python/tutorials/06-fused-attention.py":50:49)
#loc62 = loc("/triton/python/tutorials/06-fused-attention.py":51:22)
#loc63 = loc("/triton/python/tutorials/06-fused-attention.py":51:51)
#loc64 = loc("/triton/python/tutorials/06-fused-attention.py":51:33)
#loc66 = loc("/triton/python/tutorials/06-fused-attention.py":52:35)
#loc67 = loc("/triton/python/tutorials/06-fused-attention.py":53:23)
#loc68 = loc("/triton/python/tutorials/06-fused-attention.py":53:18)
#loc69 = loc("/triton/python/tutorials/06-fused-attention.py":183:24)
#loc70 = loc("/triton/python/tutorials/06-fused-attention.py":183:11)
#loc71 = loc("/triton/python/tutorials/06-fused-attention.py":184:20)
#loc72 = loc("/triton/python/tutorials/06-fused-attention.py":184:16)
#loc73 = loc("/triton/python/tutorials/06-fused-attention.py":185:26)
#loc74 = loc("/triton/python/tutorials/06-fused-attention.py":185:17)
#loc75 = loc("/triton/python/tutorials/06-fused-attention.py":185:34)
#loc76 = loc("/triton/python/tutorials/06-fused-attention.py":186:21)
#loc77 = loc("/triton/python/tutorials/06-fused-attention.py":187:33)
#loc78 = loc("/triton/python/tutorials/06-fused-attention.py":187:26)
#loc79 = loc("/triton/python/tutorials/06-fused-attention.py":187:4)
#loc80 = loc(callsite(#loc25 at #loc26))
#loc81 = loc(callsite(#loc27 at #loc26))
#loc82 = loc(callsite(#loc28 at #loc26))
#loc83 = loc(callsite(#loc29 at #loc26))
#loc84 = loc(callsite(#loc30 at #loc26))
#loc85 = loc(callsite(#loc31 at #loc26))
#loc86 = loc(callsite(#loc32 at #loc33))
#loc88 = loc(callsite(#loc34 at #loc32))
#loc89 = loc(callsite(#loc35 at #loc26))
#loc90 = loc(callsite(#loc36 at #loc26))
#loc91 = loc(callsite(#loc37 at #loc26))
#loc92 = loc(callsite(#loc38 at #loc26))
#loc93 = loc(callsite(#loc39 at #loc40))
#loc95 = loc(callsite(#loc41 at #loc39))
#loc96 = loc(callsite(#loc42 at #loc26))
#loc97 = loc(callsite(#loc43 at #loc26))
#loc98 = loc(callsite(#loc44 at #loc26))
#loc99 = loc(callsite(#loc45 at #loc26))
#loc100 = loc(callsite(#loc46 at #loc26))
#loc101 = loc(callsite(#loc47 at #loc26))
#loc102 = loc(callsite(#loc48 at #loc26))
#loc103 = loc(callsite(#loc49 at #loc26))
#loc104 = loc(callsite(#loc50 at #loc26))
#loc105 = loc(callsite(#loc51 at #loc26))
#loc106 = loc(callsite(#loc52 at #loc26))
#loc107 = loc(callsite(#loc53 at #loc54))
#loc108 = loc(callsite(#loc55 at #loc54))
#loc109 = loc(callsite(#loc56 at #loc54))
#loc110 = loc(callsite(#loc57 at #loc54))
#loc111 = loc(callsite(#loc58 at #loc54))
#loc112 = loc(callsite(#loc59 at #loc54))
#loc113 = loc(callsite(#loc60 at #loc54))
#loc114 = loc(callsite(#loc30 at #loc54))
#loc115 = loc(callsite(#loc29 at #loc54))
#loc116 = loc(callsite(#loc25 at #loc54))
#loc117 = loc(callsite(#loc31 at #loc54))
#loc118 = loc(callsite(#loc61 at #loc54))
#loc119 = loc(callsite(#loc62 at #loc54))
#loc120 = loc(callsite(#loc63 at #loc54))
#loc121 = loc(callsite(#loc64 at #loc54))
#loc122 = loc(callsite(#loc32 at #loc65))
#loc124 = loc(callsite(#loc66 at #loc54))
#loc125 = loc(callsite(#loc67 at #loc54))
#loc126 = loc(callsite(#loc68 at #loc54))
#loc127 = loc(callsite(#loc38 at #loc54))
#loc128 = loc(callsite(#loc42 at #loc54))
#loc129 = loc(callsite(#loc43 at #loc54))
#loc130 = loc(callsite(#loc44 at #loc54))
#loc131 = loc(callsite(#loc45 at #loc54))
#loc132 = loc(callsite(#loc46 at #loc54))
#loc133 = loc(callsite(#loc47 at #loc54))
#loc134 = loc(callsite(#loc48 at #loc54))
#loc135 = loc(callsite(#loc49 at #loc54))
#loc136 = loc(callsite(#loc50 at #loc54))
#loc137 = loc(callsite(#loc51 at #loc54))
#loc138 = loc(callsite(#loc52 at #loc54))
#loc139 = loc(callsite(#loc86 at #loc26))
#loc141 = loc(callsite(#loc88 at #loc33))
#loc142 = loc(callsite(#loc93 at #loc26))
#loc144 = loc(callsite(#loc95 at #loc40))
#loc145 = loc(callsite(#loc122 at #loc54))
#loc147 = loc(callsite(#loc88 at #loc65))
#loc148 = loc(callsite(#loc93 at #loc54))
#loc150 = loc(callsite(#loc141 at #loc26))
#loc151 = loc(callsite(#loc144 at #loc26))
#loc152 = loc(callsite(#loc147 at #loc54))
#loc153 = loc(callsite(#loc144 at #loc54))
