; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !6 float @llvm.amdgcn.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_attn_fwd(ptr addrspace(1) nocapture readonly %0, ptr addrspace(1) nocapture readonly %1, ptr addrspace(1) nocapture readonly %2, float %3, ptr addrspace(1) nocapture writeonly %4, ptr addrspace(1) nocapture writeonly %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19) local_unnamed_addr #1 !dbg !9 {
  %21 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !10
  %.frozen = freeze i32 %18, !dbg !11
  %22 = sdiv i32 %21, %.frozen, !dbg !11
  %23 = sext i32 %22 to i64, !dbg !12
  %24 = sext i32 %6 to i64, !dbg !13
  %25 = mul nsw i64 %23, %24, !dbg !13
  %26 = mul i32 %22, %.frozen, !dbg !14
  %.decomposed = sub i32 %21, %26, !dbg !14
  %27 = sext i32 %.decomposed to i64, !dbg !15
  %28 = sext i32 %7 to i64, !dbg !16
  %29 = mul nsw i64 %27, %28, !dbg !16
  %30 = add nsw i64 %29, %25, !dbg !17
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !18
  %32 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !19
  %33 = shl i32 %32, 6, !dbg !20
  %34 = sext i32 %33 to i64, !dbg !21
  %35 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !22
  %36 = and i32 %35, 63, !dbg !22
  %37 = and i32 %35, 32, !dbg !22
  %38 = lshr exact i32 %37, 3, !dbg !22
  %39 = lshr i32 %35, 3, !dbg !22
  %40 = and i32 %39, 27, !dbg !22
  %41 = or disjoint i32 %40, %38, !dbg !22
  %42 = or disjoint i32 %41, 32, !dbg !22
  %43 = zext nneg i32 %41 to i64, !dbg !23
  %44 = zext nneg i32 %42 to i64, !dbg !23
  %45 = or disjoint i64 %43, %34, !dbg !23
  %46 = or disjoint i64 %44, %34, !dbg !23
  %47 = sext i32 %8 to i64, !dbg !21
  %48 = mul nsw i64 %45, %47, !dbg !23
  %49 = mul nsw i64 %46, %47, !dbg !23
  %50 = shl i32 %35, 3, !dbg !22
  %51 = and i32 %50, 56, !dbg !22
  %52 = zext nneg i32 %51 to i64, !dbg !23
  %53 = getelementptr half, ptr addrspace(1) %31, i64 %48, !dbg !23
  %54 = getelementptr half, ptr addrspace(1) %53, i64 %52, !dbg !23
  %55 = getelementptr half, ptr addrspace(1) %31, i64 %49, !dbg !23
  %56 = getelementptr half, ptr addrspace(1) %55, i64 %52, !dbg !23
  %57 = load <8 x half>, ptr addrspace(1) %54, align 16, !dbg !23
  %58 = load <8 x half>, ptr addrspace(1) %56, align 16, !dbg !23
  %59 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !24
  %60 = sext i32 %14 to i64, !dbg !25
  %61 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !26
  %62 = sext i32 %11 to i64, !dbg !27
  %63 = getelementptr half, ptr addrspace(1) %5, i64 %30, !dbg !28
  %64 = sext i32 %17 to i64, !dbg !29
  %65 = and i32 %35, 31, !dbg !22
  %66 = lshr i32 %35, 1, !dbg !22
  %67 = and i32 %66, 32, !dbg !22
  %68 = or disjoint i32 %67, %65, !dbg !22
  %69 = or disjoint i32 %38, 8, !dbg !22
  %70 = or disjoint i32 %38, 16, !dbg !22
  %71 = or disjoint i32 %38, 24, !dbg !22
  %72 = or disjoint i32 %38, 32, !dbg !22
  %73 = or disjoint i32 %38, 40, !dbg !22
  %74 = or disjoint i32 %38, 48, !dbg !22
  %75 = or disjoint i32 %38, 56, !dbg !22
  %76 = or disjoint i32 %68, %33, !dbg !30
  %77 = or disjoint i32 %33, %36, !dbg !30
  %78 = fmul float %3, 0x3FF7154760000000, !dbg !31
  %79 = zext nneg i32 %68 to i64, !dbg !23
  %80 = zext nneg i32 %38 to i64, !dbg !23
  %81 = zext nneg i32 %69 to i64, !dbg !23
  %82 = zext nneg i32 %70 to i64, !dbg !23
  %83 = zext nneg i32 %71 to i64, !dbg !23
  %84 = zext nneg i32 %72 to i64, !dbg !23
  %85 = zext nneg i32 %73 to i64, !dbg !23
  %86 = zext nneg i32 %74 to i64, !dbg !23
  %87 = zext nneg i32 %75 to i64, !dbg !23
  %88 = or disjoint i64 %79, %34, !dbg !23
  %89 = and i32 %66, 4, !dbg !23
  %90 = or disjoint i32 %51, %89, !dbg !23
  %91 = and i32 %66, 8, !dbg !23
  %92 = lshr exact i32 %37, 1, !dbg !23
  %93 = or disjoint i32 %92, %91, !dbg !23
  %94 = or disjoint i32 %93, %67, !dbg !23
  %95 = xor i32 %94, %90, !dbg !23
  %96 = shl nuw nsw i32 %41, 6, !dbg !23
  %97 = or disjoint i32 %95, %96, !dbg !23
  %98 = zext nneg i32 %97 to i64, !dbg !23
  %99 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %98, !dbg !23
  %100 = shufflevector <8 x half> %57, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %100, ptr addrspace(3) %99, align 8, !dbg !23
  %101 = or disjoint i32 %51, 4, !dbg !23
  %102 = or disjoint i32 %93, %89, !dbg !23
  %103 = or disjoint i32 %102, %67, !dbg !23
  %104 = xor i32 %103, %101, !dbg !23
  %105 = or disjoint i32 %104, %96, !dbg !23
  %106 = zext nneg i32 %105 to i64, !dbg !23
  %107 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %106, !dbg !23
  %108 = shufflevector <8 x half> %57, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %108, ptr addrspace(3) %107, align 8, !dbg !23
  %109 = or disjoint i32 %96, 2048, !dbg !23
  %110 = or disjoint i32 %95, %109, !dbg !23
  %111 = zext nneg i32 %110 to i64, !dbg !23
  %112 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %111, !dbg !23
  %113 = shufflevector <8 x half> %58, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %113, ptr addrspace(3) %112, align 8, !dbg !23
  %114 = or disjoint i32 %104, %109, !dbg !23
  %115 = zext nneg i32 %114 to i64, !dbg !23
  %116 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %115, !dbg !23
  %117 = shufflevector <8 x half> %58, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %117, ptr addrspace(3) %116, align 8, !dbg !23
  fence syncscope("workgroup") release, !dbg !23
  tail call void @llvm.amdgcn.s.barrier(), !dbg !23
  fence syncscope("workgroup") acquire, !dbg !23
  %118 = icmp ugt i32 %36, 31, !dbg !23
  %119 = zext i1 %118 to i32, !dbg !23
  %120 = and i32 %35, 15, !dbg !23
  %121 = xor i32 %120, %119, !dbg !23
  %122 = shl nuw nsw i32 %121, 2, !dbg !23
  %123 = shl nuw nsw i32 %68, 6, !dbg !23
  %124 = or disjoint i32 %122, %123, !dbg !23
  %125 = or disjoint i32 %119, 2, !dbg !23
  %126 = xor i32 %125, %120, !dbg !23
  %127 = shl nuw nsw i32 %126, 2, !dbg !23
  %128 = or disjoint i32 %127, %123, !dbg !23
  %129 = or disjoint i32 %119, 4, !dbg !23
  %130 = xor i32 %129, %120, !dbg !23
  %131 = shl nuw nsw i32 %130, 2, !dbg !23
  %132 = or disjoint i32 %131, %123, !dbg !23
  %133 = or disjoint i32 %119, 6, !dbg !23
  %134 = xor i32 %133, %120, !dbg !23
  %135 = shl nuw nsw i32 %134, 2, !dbg !23
  %136 = or disjoint i32 %135, %123, !dbg !23
  %137 = or disjoint i32 %119, 8, !dbg !23
  %138 = xor i32 %137, %120, !dbg !23
  %139 = shl nuw nsw i32 %138, 2, !dbg !23
  %140 = or disjoint i32 %139, %123, !dbg !23
  %141 = or disjoint i32 %119, 10, !dbg !23
  %142 = xor i32 %141, %120, !dbg !23
  %143 = shl nuw nsw i32 %142, 2, !dbg !23
  %144 = or disjoint i32 %143, %123, !dbg !23
  %145 = or disjoint i32 %119, 12, !dbg !23
  %146 = xor i32 %145, %120, !dbg !23
  %147 = shl nuw nsw i32 %146, 2, !dbg !23
  %148 = or disjoint i32 %147, %123, !dbg !23
  %149 = or disjoint i32 %119, 14, !dbg !23
  %150 = xor i32 %149, %120, !dbg !23
  %151 = shl nuw nsw i32 %150, 2, !dbg !23
  %152 = or disjoint i32 %151, %123, !dbg !23
  %153 = zext nneg i32 %124 to i64, !dbg !23
  %154 = getelementptr half, ptr addrspace(3) @global_smem, i64 %153, !dbg !23
  %155 = load <4 x half>, ptr addrspace(3) %154, align 8, !dbg !23
  %156 = zext nneg i32 %128 to i64, !dbg !23
  %157 = getelementptr half, ptr addrspace(3) @global_smem, i64 %156, !dbg !23
  %158 = load <4 x half>, ptr addrspace(3) %157, align 8, !dbg !23
  %159 = zext nneg i32 %132 to i64, !dbg !23
  %160 = getelementptr half, ptr addrspace(3) @global_smem, i64 %159, !dbg !23
  %161 = load <4 x half>, ptr addrspace(3) %160, align 8, !dbg !23
  %162 = zext nneg i32 %136 to i64, !dbg !23
  %163 = getelementptr half, ptr addrspace(3) @global_smem, i64 %162, !dbg !23
  %164 = load <4 x half>, ptr addrspace(3) %163, align 8, !dbg !23
  %165 = zext nneg i32 %140 to i64, !dbg !23
  %166 = getelementptr half, ptr addrspace(3) @global_smem, i64 %165, !dbg !23
  %167 = load <4 x half>, ptr addrspace(3) %166, align 8, !dbg !23
  %168 = zext nneg i32 %144 to i64, !dbg !23
  %169 = getelementptr half, ptr addrspace(3) @global_smem, i64 %168, !dbg !23
  %170 = load <4 x half>, ptr addrspace(3) %169, align 8, !dbg !23
  %171 = zext nneg i32 %148 to i64, !dbg !23
  %172 = getelementptr half, ptr addrspace(3) @global_smem, i64 %171, !dbg !23
  %173 = load <4 x half>, ptr addrspace(3) %172, align 8, !dbg !23
  %174 = zext nneg i32 %152 to i64, !dbg !23
  %175 = getelementptr half, ptr addrspace(3) @global_smem, i64 %174, !dbg !23
  %176 = load <4 x half>, ptr addrspace(3) %175, align 8, !dbg !23
  %invariant.gep = getelementptr half, ptr addrspace(1) %59, i64 %52, !dbg !32
  %invariant.gep54 = getelementptr half, ptr addrspace(1) %61, i64 %52, !dbg !32
  %177 = icmp sgt i32 %33, 0, !dbg !32
  br i1 %177, label %.lr.ph, label %._crit_edge, !dbg !32

.lr.ph:                                           ; preds = %20
  %178 = shl nuw nsw i32 %65, 6
  %179 = or disjoint i32 %122, %178
  %180 = or disjoint i32 %127, %178
  %181 = or disjoint i32 %131, %178
  %182 = or disjoint i32 %135, %178
  %183 = or disjoint i32 %139, %178
  %184 = or disjoint i32 %143, %178
  %185 = or disjoint i32 %147, %178
  %186 = or disjoint i32 %151, %178
  %187 = zext nneg i32 %179 to i64
  %188 = getelementptr half, ptr addrspace(3) @global_smem, i64 %187
  %189 = zext nneg i32 %180 to i64
  %190 = getelementptr half, ptr addrspace(3) @global_smem, i64 %189
  %191 = zext nneg i32 %181 to i64
  %192 = getelementptr half, ptr addrspace(3) @global_smem, i64 %191
  %193 = zext nneg i32 %182 to i64
  %194 = getelementptr half, ptr addrspace(3) @global_smem, i64 %193
  %195 = zext nneg i32 %183 to i64
  %196 = getelementptr half, ptr addrspace(3) @global_smem, i64 %195
  %197 = zext nneg i32 %184 to i64
  %198 = getelementptr half, ptr addrspace(3) @global_smem, i64 %197
  %199 = zext nneg i32 %185 to i64
  %200 = getelementptr half, ptr addrspace(3) @global_smem, i64 %199
  %201 = zext nneg i32 %186 to i64
  %202 = getelementptr half, ptr addrspace(3) @global_smem, i64 %201
  %203 = shl i32 %35, 2
  %204 = xor i32 %203, 128
  %205 = or disjoint i32 %96, %51
  %206 = zext nneg i32 %205 to i64
  %207 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %206
  %208 = shl nuw nsw i32 %36, 3
  %209 = and i32 %208, 256
  %210 = or disjoint i32 %209, %65
  %211 = or disjoint i32 %210, 64
  %212 = or disjoint i32 %210, 128
  %213 = or disjoint i32 %210, 192
  %214 = or disjoint i32 %210, 512
  %215 = or disjoint i32 %210, 576
  %216 = or disjoint i32 %210, 640
  %217 = or disjoint i32 %210, 704
  %218 = or disjoint i32 %210, 1024
  %219 = or disjoint i32 %210, 1088
  %220 = or disjoint i32 %210, 1152
  %221 = or disjoint i32 %210, 1216
  %222 = or disjoint i32 %210, 1536
  %223 = or disjoint i32 %210, 1600
  %224 = or disjoint i32 %210, 1664
  %225 = or disjoint i32 %210, 1728
  %226 = or disjoint i32 %210, 32
  %227 = or disjoint i32 %210, 96
  %228 = or disjoint i32 %210, 160
  %229 = or disjoint i32 %210, 224
  %230 = or disjoint i32 %210, 544
  %231 = or disjoint i32 %210, 608
  %232 = or disjoint i32 %210, 672
  %233 = or disjoint i32 %210, 736
  %234 = or disjoint i32 %210, 1056
  %235 = or disjoint i32 %210, 1120
  %236 = or disjoint i32 %210, 1184
  %237 = or disjoint i32 %210, 1248
  %238 = or disjoint i32 %210, 1568
  %239 = or disjoint i32 %210, 1632
  %240 = or disjoint i32 %210, 1696
  %241 = or disjoint i32 %210, 1760
  %242 = zext nneg i32 %210 to i64
  %243 = getelementptr half, ptr addrspace(3) @global_smem, i64 %242
  %244 = zext nneg i32 %211 to i64
  %245 = getelementptr half, ptr addrspace(3) @global_smem, i64 %244
  %246 = zext nneg i32 %212 to i64
  %247 = getelementptr half, ptr addrspace(3) @global_smem, i64 %246
  %248 = zext nneg i32 %213 to i64
  %249 = getelementptr half, ptr addrspace(3) @global_smem, i64 %248
  %250 = zext nneg i32 %214 to i64
  %251 = getelementptr half, ptr addrspace(3) @global_smem, i64 %250
  %252 = zext nneg i32 %215 to i64
  %253 = getelementptr half, ptr addrspace(3) @global_smem, i64 %252
  %254 = zext nneg i32 %216 to i64
  %255 = getelementptr half, ptr addrspace(3) @global_smem, i64 %254
  %256 = zext nneg i32 %217 to i64
  %257 = getelementptr half, ptr addrspace(3) @global_smem, i64 %256
  %258 = zext nneg i32 %218 to i64
  %259 = getelementptr half, ptr addrspace(3) @global_smem, i64 %258
  %260 = zext nneg i32 %219 to i64
  %261 = getelementptr half, ptr addrspace(3) @global_smem, i64 %260
  %262 = zext nneg i32 %220 to i64
  %263 = getelementptr half, ptr addrspace(3) @global_smem, i64 %262
  %264 = zext nneg i32 %221 to i64
  %265 = getelementptr half, ptr addrspace(3) @global_smem, i64 %264
  %266 = zext nneg i32 %222 to i64
  %267 = getelementptr half, ptr addrspace(3) @global_smem, i64 %266
  %268 = zext nneg i32 %223 to i64
  %269 = getelementptr half, ptr addrspace(3) @global_smem, i64 %268
  %270 = zext nneg i32 %224 to i64
  %271 = getelementptr half, ptr addrspace(3) @global_smem, i64 %270
  %272 = zext nneg i32 %225 to i64
  %273 = getelementptr half, ptr addrspace(3) @global_smem, i64 %272
  %274 = zext nneg i32 %226 to i64
  %275 = getelementptr half, ptr addrspace(3) @global_smem, i64 %274
  %276 = zext nneg i32 %227 to i64
  %277 = getelementptr half, ptr addrspace(3) @global_smem, i64 %276
  %278 = zext nneg i32 %228 to i64
  %279 = getelementptr half, ptr addrspace(3) @global_smem, i64 %278
  %280 = zext nneg i32 %229 to i64
  %281 = getelementptr half, ptr addrspace(3) @global_smem, i64 %280
  %282 = zext nneg i32 %230 to i64
  %283 = getelementptr half, ptr addrspace(3) @global_smem, i64 %282
  %284 = zext nneg i32 %231 to i64
  %285 = getelementptr half, ptr addrspace(3) @global_smem, i64 %284
  %286 = zext nneg i32 %232 to i64
  %287 = getelementptr half, ptr addrspace(3) @global_smem, i64 %286
  %288 = zext nneg i32 %233 to i64
  %289 = getelementptr half, ptr addrspace(3) @global_smem, i64 %288
  %290 = zext nneg i32 %234 to i64
  %291 = getelementptr half, ptr addrspace(3) @global_smem, i64 %290
  %292 = zext nneg i32 %235 to i64
  %293 = getelementptr half, ptr addrspace(3) @global_smem, i64 %292
  %294 = zext nneg i32 %236 to i64
  %295 = getelementptr half, ptr addrspace(3) @global_smem, i64 %294
  %296 = zext nneg i32 %237 to i64
  %297 = getelementptr half, ptr addrspace(3) @global_smem, i64 %296
  %298 = zext nneg i32 %238 to i64
  %299 = getelementptr half, ptr addrspace(3) @global_smem, i64 %298
  %300 = zext nneg i32 %239 to i64
  %301 = getelementptr half, ptr addrspace(3) @global_smem, i64 %300
  %302 = zext nneg i32 %240 to i64
  %303 = getelementptr half, ptr addrspace(3) @global_smem, i64 %302
  %304 = zext nneg i32 %241 to i64
  %305 = getelementptr half, ptr addrspace(3) @global_smem, i64 %304
  br label %306, !dbg !32

306:                                              ; preds = %.lr.ph, %306
  %307 = phi i64 [ 0, %.lr.ph ], [ %613, %306 ]
  %308 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %385, %306 ]
  %309 = phi float [ 1.000000e+00, %.lr.ph ], [ %456, %306 ]
  %310 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %615, %306 ]
  %311 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %616, %306 ]
  %312 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %617, %306 ]
  %313 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %618, %306 ]
  %314 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %619, %306 ]
  %315 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %620, %306 ]
  %316 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %621, %306 ]
  %317 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %622, %306 ]
  %318 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %623, %306 ]
  %319 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %624, %306 ]
  %320 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %625, %306 ]
  %321 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %626, %306 ]
  %322 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %627, %306 ]
  %323 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %628, %306 ]
  %324 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %629, %306 ]
  %325 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %630, %306 ]
  %326 = or disjoint i64 %307, %43, !dbg !35
  %327 = mul i64 %326, %60, !dbg !35
  %gep = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %327, !dbg !35
  %328 = load <8 x half>, ptr addrspace(1) %gep, align 16, !dbg !35
  %329 = mul i64 %326, %62, !dbg !36
  %gep55 = getelementptr half, ptr addrspace(1) %invariant.gep54, i64 %329, !dbg !36
  %330 = load <8 x half>, ptr addrspace(1) %gep55, align 16, !dbg !36
  fence syncscope("workgroup") release, !dbg !36
  tail call void @llvm.amdgcn.s.barrier(), !dbg !36
  fence syncscope("workgroup") acquire, !dbg !36
  %331 = shufflevector <8 x half> %330, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !36
  store <4 x half> %331, ptr addrspace(3) %99, align 8, !dbg !36
  %332 = shufflevector <8 x half> %330, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !36
  store <4 x half> %332, ptr addrspace(3) %107, align 8, !dbg !36
  fence syncscope("workgroup") release, !dbg !36
  tail call void @llvm.amdgcn.s.barrier(), !dbg !36
  fence syncscope("workgroup") acquire, !dbg !36
  %333 = load <4 x half>, ptr addrspace(3) %188, align 8, !dbg !36
  %334 = load <4 x half>, ptr addrspace(3) %190, align 8, !dbg !36
  %335 = load <4 x half>, ptr addrspace(3) %192, align 8, !dbg !36
  %336 = load <4 x half>, ptr addrspace(3) %194, align 8, !dbg !36
  %337 = load <4 x half>, ptr addrspace(3) %196, align 8, !dbg !36
  %338 = load <4 x half>, ptr addrspace(3) %198, align 8, !dbg !36
  %339 = load <4 x half>, ptr addrspace(3) %200, align 8, !dbg !36
  %340 = load <4 x half>, ptr addrspace(3) %202, align 8, !dbg !36
  %341 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %333, <4 x half> %155, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !37
  %342 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %334, <4 x half> %158, <16 x float> %341, i32 0, i32 0, i32 0), !dbg !37
  %343 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %335, <4 x half> %161, <16 x float> %342, i32 0, i32 0, i32 0), !dbg !37
  %344 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %336, <4 x half> %164, <16 x float> %343, i32 0, i32 0, i32 0), !dbg !37
  %345 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %337, <4 x half> %167, <16 x float> %344, i32 0, i32 0, i32 0), !dbg !37
  %346 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %338, <4 x half> %170, <16 x float> %345, i32 0, i32 0, i32 0), !dbg !37
  %347 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %339, <4 x half> %173, <16 x float> %346, i32 0, i32 0, i32 0), !dbg !37
  %348 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %340, <4 x half> %176, <16 x float> %347, i32 0, i32 0, i32 0), !dbg !37
  %349 = extractelement <16 x float> %348, i64 0, !dbg !37
  %350 = extractelement <16 x float> %348, i64 1, !dbg !37
  %351 = extractelement <16 x float> %348, i64 2, !dbg !37
  %352 = extractelement <16 x float> %348, i64 3, !dbg !37
  %353 = extractelement <16 x float> %348, i64 4, !dbg !37
  %354 = extractelement <16 x float> %348, i64 5, !dbg !37
  %355 = extractelement <16 x float> %348, i64 6, !dbg !37
  %356 = extractelement <16 x float> %348, i64 7, !dbg !37
  %357 = extractelement <16 x float> %348, i64 8, !dbg !37
  %358 = extractelement <16 x float> %348, i64 9, !dbg !37
  %359 = extractelement <16 x float> %348, i64 10, !dbg !37
  %360 = extractelement <16 x float> %348, i64 11, !dbg !37
  %361 = extractelement <16 x float> %348, i64 12, !dbg !37
  %362 = extractelement <16 x float> %348, i64 13, !dbg !37
  %363 = extractelement <16 x float> %348, i64 14, !dbg !37
  %364 = extractelement <16 x float> %348, i64 15, !dbg !37
  %365 = tail call float @llvm.maxnum.f32(float %349, float %350), !dbg !38
  %366 = tail call float @llvm.maxnum.f32(float %365, float %351), !dbg !38
  %367 = tail call float @llvm.maxnum.f32(float %366, float %352), !dbg !38
  %368 = tail call float @llvm.maxnum.f32(float %367, float %353), !dbg !38
  %369 = tail call float @llvm.maxnum.f32(float %368, float %354), !dbg !38
  %370 = tail call float @llvm.maxnum.f32(float %369, float %355), !dbg !38
  %371 = tail call float @llvm.maxnum.f32(float %370, float %356), !dbg !38
  %372 = tail call float @llvm.maxnum.f32(float %371, float %357), !dbg !38
  %373 = tail call float @llvm.maxnum.f32(float %372, float %358), !dbg !38
  %374 = tail call float @llvm.maxnum.f32(float %373, float %359), !dbg !38
  %375 = tail call float @llvm.maxnum.f32(float %374, float %360), !dbg !38
  %376 = tail call float @llvm.maxnum.f32(float %375, float %361), !dbg !38
  %377 = tail call float @llvm.maxnum.f32(float %376, float %362), !dbg !38
  %378 = tail call float @llvm.maxnum.f32(float %377, float %363), !dbg !38
  %379 = tail call float @llvm.maxnum.f32(float %378, float %364), !dbg !38
  %380 = bitcast float %379 to i32, !dbg !42
  %381 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %204, i32 %380), !dbg !42
  %382 = bitcast i32 %381 to float, !dbg !42
  %383 = tail call float @llvm.maxnum.f32(float %379, float %382), !dbg !38
  %384 = fmul float %78, %383, !dbg !43
  %385 = tail call float @llvm.maxnum.f32(float %308, float %384), !dbg !44
  %386 = fmul float %78, %349, !dbg !45
  %387 = fmul float %78, %350, !dbg !45
  %388 = fmul float %78, %351, !dbg !45
  %389 = fmul float %78, %352, !dbg !45
  %390 = fmul float %78, %353, !dbg !45
  %391 = fmul float %78, %354, !dbg !45
  %392 = fmul float %78, %355, !dbg !45
  %393 = fmul float %78, %356, !dbg !45
  %394 = fmul float %78, %357, !dbg !45
  %395 = fmul float %78, %358, !dbg !45
  %396 = fmul float %78, %359, !dbg !45
  %397 = fmul float %78, %360, !dbg !45
  %398 = fmul float %78, %361, !dbg !45
  %399 = fmul float %78, %362, !dbg !45
  %400 = fmul float %78, %363, !dbg !45
  %401 = fmul float %78, %364, !dbg !45
  %402 = fsub float %386, %385, !dbg !46
  %403 = fsub float %387, %385, !dbg !46
  %404 = fsub float %388, %385, !dbg !46
  %405 = fsub float %389, %385, !dbg !46
  %406 = fsub float %390, %385, !dbg !46
  %407 = fsub float %391, %385, !dbg !46
  %408 = fsub float %392, %385, !dbg !46
  %409 = fsub float %393, %385, !dbg !46
  %410 = fsub float %394, %385, !dbg !46
  %411 = fsub float %395, %385, !dbg !46
  %412 = fsub float %396, %385, !dbg !46
  %413 = fsub float %397, %385, !dbg !46
  %414 = fsub float %398, %385, !dbg !46
  %415 = fsub float %399, %385, !dbg !46
  %416 = fsub float %400, %385, !dbg !46
  %417 = fsub float %401, %385, !dbg !46
  %418 = tail call float @llvm.amdgcn.exp2.f32(float %402), !dbg !47
  %419 = tail call float @llvm.amdgcn.exp2.f32(float %403), !dbg !47
  %420 = tail call float @llvm.amdgcn.exp2.f32(float %404), !dbg !47
  %421 = tail call float @llvm.amdgcn.exp2.f32(float %405), !dbg !47
  %422 = tail call float @llvm.amdgcn.exp2.f32(float %406), !dbg !47
  %423 = tail call float @llvm.amdgcn.exp2.f32(float %407), !dbg !47
  %424 = tail call float @llvm.amdgcn.exp2.f32(float %408), !dbg !47
  %425 = tail call float @llvm.amdgcn.exp2.f32(float %409), !dbg !47
  %426 = tail call float @llvm.amdgcn.exp2.f32(float %410), !dbg !47
  %427 = tail call float @llvm.amdgcn.exp2.f32(float %411), !dbg !47
  %428 = tail call float @llvm.amdgcn.exp2.f32(float %412), !dbg !47
  %429 = tail call float @llvm.amdgcn.exp2.f32(float %413), !dbg !47
  %430 = tail call float @llvm.amdgcn.exp2.f32(float %414), !dbg !47
  %431 = tail call float @llvm.amdgcn.exp2.f32(float %415), !dbg !47
  %432 = tail call float @llvm.amdgcn.exp2.f32(float %416), !dbg !47
  %433 = tail call float @llvm.amdgcn.exp2.f32(float %417), !dbg !47
  %434 = fadd float %418, %419, !dbg !48
  %435 = fadd float %420, %434, !dbg !48
  %436 = fadd float %421, %435, !dbg !48
  %437 = fadd float %422, %436, !dbg !48
  %438 = fadd float %423, %437, !dbg !48
  %439 = fadd float %424, %438, !dbg !48
  %440 = fadd float %425, %439, !dbg !48
  %441 = fadd float %426, %440, !dbg !48
  %442 = fadd float %427, %441, !dbg !48
  %443 = fadd float %428, %442, !dbg !48
  %444 = fadd float %429, %443, !dbg !48
  %445 = fadd float %430, %444, !dbg !48
  %446 = fadd float %431, %445, !dbg !48
  %447 = fadd float %432, %446, !dbg !48
  %448 = fadd float %433, %447, !dbg !48
  %449 = bitcast float %448 to i32, !dbg !49
  %450 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %204, i32 %449), !dbg !49
  %451 = bitcast i32 %450 to float, !dbg !49
  %452 = fadd float %448, %451, !dbg !48
  %453 = fsub float %308, %385, !dbg !50
  %454 = tail call float @llvm.amdgcn.exp2.f32(float %453), !dbg !51
  %455 = fmul float %309, %454, !dbg !52
  %456 = fadd float %455, %452, !dbg !53
  %457 = insertelement <2 x float> poison, float %454, i64 0, !dbg !54
  %458 = shufflevector <2 x float> %457, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %459 = fmul <2 x float> %318, %458, !dbg !54
  %460 = fmul <2 x float> %319, %458, !dbg !54
  %461 = fmul <2 x float> %320, %458, !dbg !54
  %462 = fmul <2 x float> %321, %458, !dbg !54
  %463 = fmul <2 x float> %322, %458, !dbg !54
  %464 = fmul <2 x float> %323, %458, !dbg !54
  %465 = fmul <2 x float> %324, %458, !dbg !54
  %466 = fmul <2 x float> %325, %458, !dbg !54
  %467 = fmul <2 x float> %310, %458, !dbg !54
  %468 = fmul <2 x float> %311, %458, !dbg !54
  %469 = fmul <2 x float> %312, %458, !dbg !54
  %470 = fmul <2 x float> %313, %458, !dbg !54
  %471 = fmul <2 x float> %314, %458, !dbg !54
  %472 = fmul <2 x float> %315, %458, !dbg !54
  %473 = fmul <2 x float> %316, %458, !dbg !54
  %474 = fmul <2 x float> %317, %458, !dbg !54
  fence syncscope("workgroup") release, !dbg !35
  tail call void @llvm.amdgcn.s.barrier(), !dbg !35
  fence syncscope("workgroup") acquire, !dbg !35
  store <8 x half> %328, ptr addrspace(3) %207, align 16, !dbg !35
  fence syncscope("workgroup") release, !dbg !35
  tail call void @llvm.amdgcn.s.barrier(), !dbg !35
  fence syncscope("workgroup") acquire, !dbg !35
  %475 = load <1 x half>, ptr addrspace(3) %243, align 2, !dbg !35
  %476 = load <1 x half>, ptr addrspace(3) %245, align 2, !dbg !35
  %477 = load <1 x half>, ptr addrspace(3) %247, align 2, !dbg !35
  %478 = shufflevector <1 x half> %477, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %479 = load <1 x half>, ptr addrspace(3) %249, align 2, !dbg !35
  %480 = shufflevector <1 x half> %479, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %481 = load <1 x half>, ptr addrspace(3) %251, align 2, !dbg !35
  %482 = load <1 x half>, ptr addrspace(3) %253, align 2, !dbg !35
  %483 = load <1 x half>, ptr addrspace(3) %255, align 2, !dbg !35
  %484 = shufflevector <1 x half> %483, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %485 = load <1 x half>, ptr addrspace(3) %257, align 2, !dbg !35
  %486 = shufflevector <1 x half> %485, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %487 = load <1 x half>, ptr addrspace(3) %259, align 2, !dbg !35
  %488 = load <1 x half>, ptr addrspace(3) %261, align 2, !dbg !35
  %489 = load <1 x half>, ptr addrspace(3) %263, align 2, !dbg !35
  %490 = shufflevector <1 x half> %489, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %491 = load <1 x half>, ptr addrspace(3) %265, align 2, !dbg !35
  %492 = shufflevector <1 x half> %491, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %493 = load <1 x half>, ptr addrspace(3) %267, align 2, !dbg !35
  %494 = load <1 x half>, ptr addrspace(3) %269, align 2, !dbg !35
  %495 = load <1 x half>, ptr addrspace(3) %271, align 2, !dbg !35
  %496 = shufflevector <1 x half> %495, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %497 = load <1 x half>, ptr addrspace(3) %273, align 2, !dbg !35
  %498 = shufflevector <1 x half> %497, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %499 = load <1 x half>, ptr addrspace(3) %275, align 2, !dbg !35
  %500 = load <1 x half>, ptr addrspace(3) %277, align 2, !dbg !35
  %501 = load <1 x half>, ptr addrspace(3) %279, align 2, !dbg !35
  %502 = shufflevector <1 x half> %501, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %503 = load <1 x half>, ptr addrspace(3) %281, align 2, !dbg !35
  %504 = shufflevector <1 x half> %503, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %505 = load <1 x half>, ptr addrspace(3) %283, align 2, !dbg !35
  %506 = load <1 x half>, ptr addrspace(3) %285, align 2, !dbg !35
  %507 = load <1 x half>, ptr addrspace(3) %287, align 2, !dbg !35
  %508 = shufflevector <1 x half> %507, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %509 = load <1 x half>, ptr addrspace(3) %289, align 2, !dbg !35
  %510 = shufflevector <1 x half> %509, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %511 = load <1 x half>, ptr addrspace(3) %291, align 2, !dbg !35
  %512 = load <1 x half>, ptr addrspace(3) %293, align 2, !dbg !35
  %513 = load <1 x half>, ptr addrspace(3) %295, align 2, !dbg !35
  %514 = shufflevector <1 x half> %513, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %515 = load <1 x half>, ptr addrspace(3) %297, align 2, !dbg !35
  %516 = shufflevector <1 x half> %515, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %517 = load <1 x half>, ptr addrspace(3) %299, align 2, !dbg !35
  %518 = load <1 x half>, ptr addrspace(3) %301, align 2, !dbg !35
  %519 = load <1 x half>, ptr addrspace(3) %303, align 2, !dbg !35
  %520 = shufflevector <1 x half> %519, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %521 = load <1 x half>, ptr addrspace(3) %305, align 2, !dbg !35
  %522 = shufflevector <1 x half> %521, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %523 = fptrunc float %418 to half, !dbg !55
  %524 = fptrunc float %419 to half, !dbg !55
  %525 = fptrunc float %420 to half, !dbg !55
  %526 = fptrunc float %421 to half, !dbg !55
  %527 = fptrunc float %422 to half, !dbg !55
  %528 = fptrunc float %423 to half, !dbg !55
  %529 = fptrunc float %424 to half, !dbg !55
  %530 = fptrunc float %425 to half, !dbg !55
  %531 = fptrunc float %426 to half, !dbg !55
  %532 = fptrunc float %427 to half, !dbg !55
  %533 = fptrunc float %428 to half, !dbg !55
  %534 = fptrunc float %429 to half, !dbg !55
  %535 = fptrunc float %430 to half, !dbg !55
  %536 = fptrunc float %431 to half, !dbg !55
  %537 = fptrunc float %432 to half, !dbg !55
  %538 = fptrunc float %433 to half, !dbg !55
  %539 = insertelement <4 x half> poison, half %523, i64 0, !dbg !56
  %540 = insertelement <4 x half> %539, half %524, i64 1, !dbg !56
  %541 = insertelement <4 x half> %540, half %525, i64 2, !dbg !56
  %542 = insertelement <4 x half> %541, half %526, i64 3, !dbg !56
  %543 = insertelement <4 x half> poison, half %527, i64 0, !dbg !56
  %544 = insertelement <4 x half> %543, half %528, i64 1, !dbg !56
  %545 = insertelement <4 x half> %544, half %529, i64 2, !dbg !56
  %546 = insertelement <4 x half> %545, half %530, i64 3, !dbg !56
  %547 = insertelement <4 x half> poison, half %531, i64 0, !dbg !56
  %548 = insertelement <4 x half> %547, half %532, i64 1, !dbg !56
  %549 = insertelement <4 x half> %548, half %533, i64 2, !dbg !56
  %550 = insertelement <4 x half> %549, half %534, i64 3, !dbg !56
  %551 = insertelement <4 x half> poison, half %535, i64 0, !dbg !56
  %552 = insertelement <4 x half> %551, half %536, i64 1, !dbg !56
  %553 = insertelement <4 x half> %552, half %537, i64 2, !dbg !56
  %554 = insertelement <4 x half> %553, half %538, i64 3, !dbg !56
  %555 = shufflevector <1 x half> %475, <1 x half> %476, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !56
  %556 = shufflevector <4 x half> %555, <4 x half> %478, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !56
  %557 = shufflevector <4 x half> %556, <4 x half> %480, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !56
  %558 = shufflevector <1 x half> %481, <1 x half> %482, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !56
  %559 = shufflevector <4 x half> %558, <4 x half> %484, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !56
  %560 = shufflevector <4 x half> %559, <4 x half> %486, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !56
  %561 = shufflevector <1 x half> %487, <1 x half> %488, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !56
  %562 = shufflevector <4 x half> %561, <4 x half> %490, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !56
  %563 = shufflevector <4 x half> %562, <4 x half> %492, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !56
  %564 = shufflevector <1 x half> %493, <1 x half> %494, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !56
  %565 = shufflevector <4 x half> %564, <4 x half> %496, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !56
  %566 = shufflevector <4 x half> %565, <4 x half> %498, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !56
  %567 = shufflevector <1 x half> %499, <1 x half> %500, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !56
  %568 = shufflevector <4 x half> %567, <4 x half> %502, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !56
  %569 = shufflevector <4 x half> %568, <4 x half> %504, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !56
  %570 = shufflevector <1 x half> %505, <1 x half> %506, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !56
  %571 = shufflevector <4 x half> %570, <4 x half> %508, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !56
  %572 = shufflevector <4 x half> %571, <4 x half> %510, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !56
  %573 = shufflevector <1 x half> %511, <1 x half> %512, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !56
  %574 = shufflevector <4 x half> %573, <4 x half> %514, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !56
  %575 = shufflevector <4 x half> %574, <4 x half> %516, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !56
  %576 = shufflevector <1 x half> %517, <1 x half> %518, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !56
  %577 = shufflevector <4 x half> %576, <4 x half> %520, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !56
  %578 = shufflevector <4 x half> %577, <4 x half> %522, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !56
  %579 = shufflevector <2 x float> %459, <2 x float> %460, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %580 = shufflevector <2 x float> %461, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %581 = shufflevector <16 x float> %579, <16 x float> %580, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %582 = shufflevector <2 x float> %462, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %583 = shufflevector <16 x float> %581, <16 x float> %582, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %584 = shufflevector <2 x float> %463, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %585 = shufflevector <16 x float> %583, <16 x float> %584, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %586 = shufflevector <2 x float> %464, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %587 = shufflevector <16 x float> %585, <16 x float> %586, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %588 = shufflevector <2 x float> %465, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %589 = shufflevector <16 x float> %587, <16 x float> %588, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !56
  %590 = shufflevector <2 x float> %466, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %591 = shufflevector <16 x float> %589, <16 x float> %590, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !56
  %592 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %557, <4 x half> %542, <16 x float> %591, i32 0, i32 0, i32 0), !dbg !56
  %593 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %560, <4 x half> %546, <16 x float> %592, i32 0, i32 0, i32 0), !dbg !56
  %594 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %563, <4 x half> %550, <16 x float> %593, i32 0, i32 0, i32 0), !dbg !56
  %595 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %566, <4 x half> %554, <16 x float> %594, i32 0, i32 0, i32 0), !dbg !56
  %596 = shufflevector <2 x float> %467, <2 x float> %468, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %597 = shufflevector <2 x float> %469, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %598 = shufflevector <16 x float> %596, <16 x float> %597, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %599 = shufflevector <2 x float> %470, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %600 = shufflevector <16 x float> %598, <16 x float> %599, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %601 = shufflevector <2 x float> %471, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %602 = shufflevector <16 x float> %600, <16 x float> %601, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %603 = shufflevector <2 x float> %472, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %604 = shufflevector <16 x float> %602, <16 x float> %603, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %605 = shufflevector <2 x float> %473, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %606 = shufflevector <16 x float> %604, <16 x float> %605, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !56
  %607 = shufflevector <2 x float> %474, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %608 = shufflevector <16 x float> %606, <16 x float> %607, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !56
  %609 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %569, <4 x half> %542, <16 x float> %608, i32 0, i32 0, i32 0), !dbg !56
  %610 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %572, <4 x half> %546, <16 x float> %609, i32 0, i32 0, i32 0), !dbg !56
  %611 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %575, <4 x half> %550, <16 x float> %610, i32 0, i32 0, i32 0), !dbg !56
  %612 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %578, <4 x half> %554, <16 x float> %611, i32 0, i32 0, i32 0), !dbg !56
  %613 = add nuw nsw i64 %307, 32, !dbg !57
  %indvars = trunc i64 %613 to i32, !dbg !32
  %614 = icmp sgt i32 %33, %indvars, !dbg !32
  %615 = shufflevector <16 x float> %612, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %616 = shufflevector <16 x float> %612, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %617 = shufflevector <16 x float> %612, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %618 = shufflevector <16 x float> %612, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %619 = shufflevector <16 x float> %612, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %620 = shufflevector <16 x float> %612, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %621 = shufflevector <16 x float> %612, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %622 = shufflevector <16 x float> %612, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %623 = shufflevector <16 x float> %595, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %624 = shufflevector <16 x float> %595, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %625 = shufflevector <16 x float> %595, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %626 = shufflevector <16 x float> %595, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %627 = shufflevector <16 x float> %595, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %628 = shufflevector <16 x float> %595, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %629 = shufflevector <16 x float> %595, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %630 = shufflevector <16 x float> %595, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %614, label %306, label %._crit_edge.loopexit, !dbg !32

._crit_edge.loopexit:                             ; preds = %306
  %631 = shufflevector <16 x float> %612, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %632 = shufflevector <16 x float> %612, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %633 = shufflevector <16 x float> %612, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %634 = shufflevector <16 x float> %612, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %635 = shufflevector <16 x float> %595, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %636 = shufflevector <16 x float> %595, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %637 = shufflevector <16 x float> %595, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %638 = shufflevector <16 x float> %595, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br label %._crit_edge, !dbg !58

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %20
  %.lcssa53 = phi float [ 1.000000e+00, %20 ], [ %456, %._crit_edge.loopexit ]
  %.lcssa51 = phi float [ 0xFFF0000000000000, %20 ], [ %385, %._crit_edge.loopexit ]
  %639 = phi <4 x float> [ zeroinitializer, %20 ], [ %638, %._crit_edge.loopexit ]
  %640 = phi <4 x float> [ zeroinitializer, %20 ], [ %637, %._crit_edge.loopexit ]
  %641 = phi <4 x float> [ zeroinitializer, %20 ], [ %636, %._crit_edge.loopexit ]
  %642 = phi <4 x float> [ zeroinitializer, %20 ], [ %635, %._crit_edge.loopexit ]
  %643 = phi <4 x float> [ zeroinitializer, %20 ], [ %634, %._crit_edge.loopexit ]
  %644 = phi <4 x float> [ zeroinitializer, %20 ], [ %633, %._crit_edge.loopexit ]
  %645 = phi <4 x float> [ zeroinitializer, %20 ], [ %632, %._crit_edge.loopexit ]
  %646 = phi <4 x float> [ zeroinitializer, %20 ], [ %631, %._crit_edge.loopexit ]
  %647 = add i32 %33, 64, !dbg !58
  %.not68 = icmp eq i32 %33, 2147483584, !dbg !60
  br i1 %.not68, label %._crit_edge64, label %.lr.ph63, !dbg !60

.lr.ph63:                                         ; preds = %._crit_edge
  %648 = shl nuw nsw i32 %65, 6
  %649 = or disjoint i32 %122, %648
  %650 = or disjoint i32 %127, %648
  %651 = or disjoint i32 %131, %648
  %652 = or disjoint i32 %135, %648
  %653 = or disjoint i32 %139, %648
  %654 = or disjoint i32 %143, %648
  %655 = or disjoint i32 %147, %648
  %656 = or disjoint i32 %151, %648
  %657 = zext nneg i32 %649 to i64
  %658 = getelementptr half, ptr addrspace(3) @global_smem, i64 %657
  %659 = zext nneg i32 %650 to i64
  %660 = getelementptr half, ptr addrspace(3) @global_smem, i64 %659
  %661 = zext nneg i32 %651 to i64
  %662 = getelementptr half, ptr addrspace(3) @global_smem, i64 %661
  %663 = zext nneg i32 %652 to i64
  %664 = getelementptr half, ptr addrspace(3) @global_smem, i64 %663
  %665 = zext nneg i32 %653 to i64
  %666 = getelementptr half, ptr addrspace(3) @global_smem, i64 %665
  %667 = zext nneg i32 %654 to i64
  %668 = getelementptr half, ptr addrspace(3) @global_smem, i64 %667
  %669 = zext nneg i32 %655 to i64
  %670 = getelementptr half, ptr addrspace(3) @global_smem, i64 %669
  %671 = zext nneg i32 %656 to i64
  %672 = getelementptr half, ptr addrspace(3) @global_smem, i64 %671
  %673 = shl i32 %35, 2
  %674 = xor i32 %673, 128
  %675 = or disjoint i32 %96, %51
  %676 = zext nneg i32 %675 to i64
  %677 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %676
  %678 = shl nuw nsw i32 %36, 3
  %679 = and i32 %678, 256
  %680 = or disjoint i32 %679, %65
  %681 = or disjoint i32 %680, 64
  %682 = or disjoint i32 %680, 128
  %683 = or disjoint i32 %680, 192
  %684 = or disjoint i32 %680, 512
  %685 = or disjoint i32 %680, 576
  %686 = or disjoint i32 %680, 640
  %687 = or disjoint i32 %680, 704
  %688 = or disjoint i32 %680, 1024
  %689 = or disjoint i32 %680, 1088
  %690 = or disjoint i32 %680, 1152
  %691 = or disjoint i32 %680, 1216
  %692 = or disjoint i32 %680, 1536
  %693 = or disjoint i32 %680, 1600
  %694 = or disjoint i32 %680, 1664
  %695 = or disjoint i32 %680, 1728
  %696 = or disjoint i32 %680, 32
  %697 = or disjoint i32 %680, 96
  %698 = or disjoint i32 %680, 160
  %699 = or disjoint i32 %680, 224
  %700 = or disjoint i32 %680, 544
  %701 = or disjoint i32 %680, 608
  %702 = or disjoint i32 %680, 672
  %703 = or disjoint i32 %680, 736
  %704 = or disjoint i32 %680, 1056
  %705 = or disjoint i32 %680, 1120
  %706 = or disjoint i32 %680, 1184
  %707 = or disjoint i32 %680, 1248
  %708 = or disjoint i32 %680, 1568
  %709 = or disjoint i32 %680, 1632
  %710 = or disjoint i32 %680, 1696
  %711 = or disjoint i32 %680, 1760
  %712 = zext nneg i32 %680 to i64
  %713 = getelementptr half, ptr addrspace(3) @global_smem, i64 %712
  %714 = zext nneg i32 %681 to i64
  %715 = getelementptr half, ptr addrspace(3) @global_smem, i64 %714
  %716 = zext nneg i32 %682 to i64
  %717 = getelementptr half, ptr addrspace(3) @global_smem, i64 %716
  %718 = zext nneg i32 %683 to i64
  %719 = getelementptr half, ptr addrspace(3) @global_smem, i64 %718
  %720 = zext nneg i32 %684 to i64
  %721 = getelementptr half, ptr addrspace(3) @global_smem, i64 %720
  %722 = zext nneg i32 %685 to i64
  %723 = getelementptr half, ptr addrspace(3) @global_smem, i64 %722
  %724 = zext nneg i32 %686 to i64
  %725 = getelementptr half, ptr addrspace(3) @global_smem, i64 %724
  %726 = zext nneg i32 %687 to i64
  %727 = getelementptr half, ptr addrspace(3) @global_smem, i64 %726
  %728 = zext nneg i32 %688 to i64
  %729 = getelementptr half, ptr addrspace(3) @global_smem, i64 %728
  %730 = zext nneg i32 %689 to i64
  %731 = getelementptr half, ptr addrspace(3) @global_smem, i64 %730
  %732 = zext nneg i32 %690 to i64
  %733 = getelementptr half, ptr addrspace(3) @global_smem, i64 %732
  %734 = zext nneg i32 %691 to i64
  %735 = getelementptr half, ptr addrspace(3) @global_smem, i64 %734
  %736 = zext nneg i32 %692 to i64
  %737 = getelementptr half, ptr addrspace(3) @global_smem, i64 %736
  %738 = zext nneg i32 %693 to i64
  %739 = getelementptr half, ptr addrspace(3) @global_smem, i64 %738
  %740 = zext nneg i32 %694 to i64
  %741 = getelementptr half, ptr addrspace(3) @global_smem, i64 %740
  %742 = zext nneg i32 %695 to i64
  %743 = getelementptr half, ptr addrspace(3) @global_smem, i64 %742
  %744 = zext nneg i32 %696 to i64
  %745 = getelementptr half, ptr addrspace(3) @global_smem, i64 %744
  %746 = zext nneg i32 %697 to i64
  %747 = getelementptr half, ptr addrspace(3) @global_smem, i64 %746
  %748 = zext nneg i32 %698 to i64
  %749 = getelementptr half, ptr addrspace(3) @global_smem, i64 %748
  %750 = zext nneg i32 %699 to i64
  %751 = getelementptr half, ptr addrspace(3) @global_smem, i64 %750
  %752 = zext nneg i32 %700 to i64
  %753 = getelementptr half, ptr addrspace(3) @global_smem, i64 %752
  %754 = zext nneg i32 %701 to i64
  %755 = getelementptr half, ptr addrspace(3) @global_smem, i64 %754
  %756 = zext nneg i32 %702 to i64
  %757 = getelementptr half, ptr addrspace(3) @global_smem, i64 %756
  %758 = zext nneg i32 %703 to i64
  %759 = getelementptr half, ptr addrspace(3) @global_smem, i64 %758
  %760 = zext nneg i32 %704 to i64
  %761 = getelementptr half, ptr addrspace(3) @global_smem, i64 %760
  %762 = zext nneg i32 %705 to i64
  %763 = getelementptr half, ptr addrspace(3) @global_smem, i64 %762
  %764 = zext nneg i32 %706 to i64
  %765 = getelementptr half, ptr addrspace(3) @global_smem, i64 %764
  %766 = zext nneg i32 %707 to i64
  %767 = getelementptr half, ptr addrspace(3) @global_smem, i64 %766
  %768 = zext nneg i32 %708 to i64
  %769 = getelementptr half, ptr addrspace(3) @global_smem, i64 %768
  %770 = zext nneg i32 %709 to i64
  %771 = getelementptr half, ptr addrspace(3) @global_smem, i64 %770
  %772 = zext nneg i32 %710 to i64
  %773 = getelementptr half, ptr addrspace(3) @global_smem, i64 %772
  %774 = zext nneg i32 %711 to i64
  %775 = getelementptr half, ptr addrspace(3) @global_smem, i64 %774
  %776 = shufflevector <4 x float> %643, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %777 = shufflevector <4 x float> %643, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %778 = shufflevector <4 x float> %644, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %779 = shufflevector <4 x float> %644, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %780 = shufflevector <4 x float> %645, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %781 = shufflevector <4 x float> %645, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %782 = shufflevector <4 x float> %646, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %783 = shufflevector <4 x float> %646, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %784 = shufflevector <4 x float> %639, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %785 = shufflevector <4 x float> %639, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %786 = shufflevector <4 x float> %640, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %787 = shufflevector <4 x float> %640, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %788 = shufflevector <4 x float> %641, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %789 = shufflevector <4 x float> %641, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %790 = shufflevector <4 x float> %642, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %791 = shufflevector <4 x float> %642, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  br label %792, !dbg !60

792:                                              ; preds = %.lr.ph63, %792
  %793 = phi i64 [ %34, %.lr.ph63 ], [ %1157, %792 ]
  %794 = phi float [ %.lcssa51, %.lr.ph63 ], [ %945, %792 ]
  %795 = phi float [ %.lcssa53, %.lr.ph63 ], [ %1000, %792 ]
  %796 = phi <2 x float> [ %776, %.lr.ph63 ], [ %1159, %792 ]
  %797 = phi <2 x float> [ %777, %.lr.ph63 ], [ %1160, %792 ]
  %798 = phi <2 x float> [ %778, %.lr.ph63 ], [ %1161, %792 ]
  %799 = phi <2 x float> [ %779, %.lr.ph63 ], [ %1162, %792 ]
  %800 = phi <2 x float> [ %780, %.lr.ph63 ], [ %1163, %792 ]
  %801 = phi <2 x float> [ %781, %.lr.ph63 ], [ %1164, %792 ]
  %802 = phi <2 x float> [ %782, %.lr.ph63 ], [ %1165, %792 ]
  %803 = phi <2 x float> [ %783, %.lr.ph63 ], [ %1166, %792 ]
  %804 = phi <2 x float> [ %784, %.lr.ph63 ], [ %1167, %792 ]
  %805 = phi <2 x float> [ %785, %.lr.ph63 ], [ %1168, %792 ]
  %806 = phi <2 x float> [ %786, %.lr.ph63 ], [ %1169, %792 ]
  %807 = phi <2 x float> [ %787, %.lr.ph63 ], [ %1170, %792 ]
  %808 = phi <2 x float> [ %788, %.lr.ph63 ], [ %1171, %792 ]
  %809 = phi <2 x float> [ %789, %.lr.ph63 ], [ %1172, %792 ]
  %810 = phi <2 x float> [ %790, %.lr.ph63 ], [ %1173, %792 ]
  %811 = phi <2 x float> [ %791, %.lr.ph63 ], [ %1174, %792 ]
  %indvars77 = trunc i64 %793 to i32
  %812 = or disjoint i64 %793, %43, !dbg !61
  %813 = mul i64 %812, %60, !dbg !61
  %gep59 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %813, !dbg !61
  %814 = load <8 x half>, ptr addrspace(1) %gep59, align 16, !dbg !61
  %815 = mul i64 %812, %62, !dbg !62
  %gep61 = getelementptr half, ptr addrspace(1) %invariant.gep54, i64 %815, !dbg !62
  %816 = load <8 x half>, ptr addrspace(1) %gep61, align 16, !dbg !62
  fence syncscope("workgroup") release, !dbg !62
  tail call void @llvm.amdgcn.s.barrier(), !dbg !62
  fence syncscope("workgroup") acquire, !dbg !62
  %817 = shufflevector <8 x half> %816, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !62
  store <4 x half> %817, ptr addrspace(3) %99, align 8, !dbg !62
  %818 = shufflevector <8 x half> %816, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !62
  store <4 x half> %818, ptr addrspace(3) %107, align 8, !dbg !62
  fence syncscope("workgroup") release, !dbg !62
  tail call void @llvm.amdgcn.s.barrier(), !dbg !62
  fence syncscope("workgroup") acquire, !dbg !62
  %819 = load <4 x half>, ptr addrspace(3) %658, align 8, !dbg !62
  %820 = load <4 x half>, ptr addrspace(3) %660, align 8, !dbg !62
  %821 = load <4 x half>, ptr addrspace(3) %662, align 8, !dbg !62
  %822 = load <4 x half>, ptr addrspace(3) %664, align 8, !dbg !62
  %823 = load <4 x half>, ptr addrspace(3) %666, align 8, !dbg !62
  %824 = load <4 x half>, ptr addrspace(3) %668, align 8, !dbg !62
  %825 = load <4 x half>, ptr addrspace(3) %670, align 8, !dbg !62
  %826 = load <4 x half>, ptr addrspace(3) %672, align 8, !dbg !62
  %827 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %819, <4 x half> %155, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !63
  %828 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %820, <4 x half> %158, <16 x float> %827, i32 0, i32 0, i32 0), !dbg !63
  %829 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %821, <4 x half> %161, <16 x float> %828, i32 0, i32 0, i32 0), !dbg !63
  %830 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %822, <4 x half> %164, <16 x float> %829, i32 0, i32 0, i32 0), !dbg !63
  %831 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %823, <4 x half> %167, <16 x float> %830, i32 0, i32 0, i32 0), !dbg !63
  %832 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %824, <4 x half> %170, <16 x float> %831, i32 0, i32 0, i32 0), !dbg !63
  %833 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %825, <4 x half> %173, <16 x float> %832, i32 0, i32 0, i32 0), !dbg !63
  %834 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %826, <4 x half> %176, <16 x float> %833, i32 0, i32 0, i32 0), !dbg !63
  %835 = extractelement <16 x float> %834, i64 0, !dbg !63
  %836 = extractelement <16 x float> %834, i64 1, !dbg !63
  %837 = extractelement <16 x float> %834, i64 2, !dbg !63
  %838 = extractelement <16 x float> %834, i64 3, !dbg !63
  %839 = extractelement <16 x float> %834, i64 4, !dbg !63
  %840 = extractelement <16 x float> %834, i64 5, !dbg !63
  %841 = extractelement <16 x float> %834, i64 6, !dbg !63
  %842 = extractelement <16 x float> %834, i64 7, !dbg !63
  %843 = extractelement <16 x float> %834, i64 8, !dbg !63
  %844 = extractelement <16 x float> %834, i64 9, !dbg !63
  %845 = extractelement <16 x float> %834, i64 10, !dbg !63
  %846 = extractelement <16 x float> %834, i64 11, !dbg !63
  %847 = extractelement <16 x float> %834, i64 12, !dbg !63
  %848 = extractelement <16 x float> %834, i64 13, !dbg !63
  %849 = extractelement <16 x float> %834, i64 14, !dbg !63
  %850 = extractelement <16 x float> %834, i64 15, !dbg !63
  %851 = or disjoint i32 %38, %indvars77, !dbg !64
  %852 = or disjoint i32 %38, %indvars77, !dbg !64
  %853 = or disjoint i32 %38, %indvars77, !dbg !64
  %854 = or disjoint i32 %853, 2, !dbg !64
  %855 = or disjoint i32 %38, %indvars77, !dbg !64
  %856 = or disjoint i32 %855, 3, !dbg !64
  %857 = or disjoint i32 %69, %indvars77, !dbg !64
  %858 = or disjoint i32 %38, %indvars77, !dbg !64
  %859 = or disjoint i32 %858, 9, !dbg !64
  %860 = or disjoint i32 %38, %indvars77, !dbg !64
  %861 = or disjoint i32 %860, 10, !dbg !64
  %862 = or disjoint i32 %38, %indvars77, !dbg !64
  %863 = or disjoint i32 %862, 11, !dbg !64
  %864 = or disjoint i32 %70, %indvars77, !dbg !64
  %865 = or disjoint i32 %38, %indvars77, !dbg !64
  %866 = or disjoint i32 %865, 17, !dbg !64
  %867 = or disjoint i32 %38, %indvars77, !dbg !64
  %868 = or disjoint i32 %867, 18, !dbg !64
  %869 = or disjoint i32 %38, %indvars77, !dbg !64
  %870 = or disjoint i32 %869, 19, !dbg !64
  %871 = or disjoint i32 %71, %indvars77, !dbg !64
  %872 = or disjoint i32 %38, %indvars77, !dbg !64
  %873 = or disjoint i32 %872, 25, !dbg !64
  %874 = or disjoint i32 %38, %indvars77, !dbg !64
  %875 = or disjoint i32 %874, 26, !dbg !64
  %876 = or disjoint i32 %38, %indvars77, !dbg !64
  %877 = or disjoint i32 %876, 27, !dbg !64
  %.not = icmp slt i32 %76, %851, !dbg !65
  %.not3.not = icmp sgt i32 %76, %852, !dbg !65
  %.not4 = icmp slt i32 %76, %854, !dbg !65
  %.not5 = icmp slt i32 %76, %856, !dbg !65
  %.not6 = icmp slt i32 %76, %857, !dbg !65
  %.not7 = icmp slt i32 %76, %859, !dbg !65
  %.not8 = icmp slt i32 %76, %861, !dbg !65
  %.not9 = icmp slt i32 %76, %863, !dbg !65
  %.not10 = icmp slt i32 %76, %864, !dbg !65
  %.not11 = icmp slt i32 %76, %866, !dbg !65
  %.not12 = icmp slt i32 %76, %868, !dbg !65
  %.not13 = icmp slt i32 %76, %870, !dbg !65
  %.not14 = icmp slt i32 %76, %871, !dbg !65
  %.not15 = icmp slt i32 %76, %873, !dbg !65
  %.not16 = icmp slt i32 %76, %875, !dbg !65
  %.not17 = icmp slt i32 %76, %877, !dbg !65
  %878 = fmul float %78, %835, !dbg !66
  %879 = fmul float %78, %836, !dbg !66
  %880 = fmul float %78, %837, !dbg !66
  %881 = fmul float %78, %838, !dbg !66
  %882 = fmul float %78, %839, !dbg !66
  %883 = fmul float %78, %840, !dbg !66
  %884 = fmul float %78, %841, !dbg !66
  %885 = fmul float %78, %842, !dbg !66
  %886 = fmul float %78, %843, !dbg !66
  %887 = fmul float %78, %844, !dbg !66
  %888 = fmul float %78, %845, !dbg !66
  %889 = fmul float %78, %846, !dbg !66
  %890 = fmul float %78, %847, !dbg !66
  %891 = fmul float %78, %848, !dbg !66
  %892 = fmul float %78, %849, !dbg !66
  %893 = fmul float %78, %850, !dbg !66
  %894 = select i1 %.not, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %895 = select i1 %.not3.not, float 0.000000e+00, float -1.000000e+06, !dbg !67
  %896 = select i1 %.not4, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %897 = select i1 %.not5, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %898 = select i1 %.not6, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %899 = select i1 %.not7, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %900 = select i1 %.not8, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %901 = select i1 %.not9, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %902 = select i1 %.not10, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %903 = select i1 %.not11, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %904 = select i1 %.not12, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %905 = select i1 %.not13, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %906 = select i1 %.not14, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %907 = select i1 %.not15, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %908 = select i1 %.not16, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %909 = select i1 %.not17, float -1.000000e+06, float 0.000000e+00, !dbg !67
  %910 = fadd float %894, %878, !dbg !68
  %911 = fadd float %895, %879, !dbg !68
  %912 = fadd float %896, %880, !dbg !68
  %913 = fadd float %897, %881, !dbg !68
  %914 = fadd float %898, %882, !dbg !68
  %915 = fadd float %899, %883, !dbg !68
  %916 = fadd float %900, %884, !dbg !68
  %917 = fadd float %901, %885, !dbg !68
  %918 = fadd float %902, %886, !dbg !68
  %919 = fadd float %903, %887, !dbg !68
  %920 = fadd float %904, %888, !dbg !68
  %921 = fadd float %905, %889, !dbg !68
  %922 = fadd float %906, %890, !dbg !68
  %923 = fadd float %907, %891, !dbg !68
  %924 = fadd float %908, %892, !dbg !68
  %925 = fadd float %909, %893, !dbg !68
  %926 = tail call float @llvm.maxnum.f32(float %910, float %911), !dbg !69
  %927 = tail call float @llvm.maxnum.f32(float %926, float %912), !dbg !69
  %928 = tail call float @llvm.maxnum.f32(float %927, float %913), !dbg !69
  %929 = tail call float @llvm.maxnum.f32(float %928, float %914), !dbg !69
  %930 = tail call float @llvm.maxnum.f32(float %929, float %915), !dbg !69
  %931 = tail call float @llvm.maxnum.f32(float %930, float %916), !dbg !69
  %932 = tail call float @llvm.maxnum.f32(float %931, float %917), !dbg !69
  %933 = tail call float @llvm.maxnum.f32(float %932, float %918), !dbg !69
  %934 = tail call float @llvm.maxnum.f32(float %933, float %919), !dbg !69
  %935 = tail call float @llvm.maxnum.f32(float %934, float %920), !dbg !69
  %936 = tail call float @llvm.maxnum.f32(float %935, float %921), !dbg !69
  %937 = tail call float @llvm.maxnum.f32(float %936, float %922), !dbg !69
  %938 = tail call float @llvm.maxnum.f32(float %937, float %923), !dbg !69
  %939 = tail call float @llvm.maxnum.f32(float %938, float %924), !dbg !69
  %940 = tail call float @llvm.maxnum.f32(float %939, float %925), !dbg !69
  %941 = bitcast float %940 to i32, !dbg !70
  %942 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %674, i32 %941), !dbg !70
  %943 = bitcast i32 %942 to float, !dbg !70
  %944 = tail call float @llvm.maxnum.f32(float %940, float %943), !dbg !69
  %945 = tail call float @llvm.maxnum.f32(float %794, float %944), !dbg !71
  %946 = fsub float %910, %945, !dbg !72
  %947 = fsub float %911, %945, !dbg !72
  %948 = fsub float %912, %945, !dbg !72
  %949 = fsub float %913, %945, !dbg !72
  %950 = fsub float %914, %945, !dbg !72
  %951 = fsub float %915, %945, !dbg !72
  %952 = fsub float %916, %945, !dbg !72
  %953 = fsub float %917, %945, !dbg !72
  %954 = fsub float %918, %945, !dbg !72
  %955 = fsub float %919, %945, !dbg !72
  %956 = fsub float %920, %945, !dbg !72
  %957 = fsub float %921, %945, !dbg !72
  %958 = fsub float %922, %945, !dbg !72
  %959 = fsub float %923, %945, !dbg !72
  %960 = fsub float %924, %945, !dbg !72
  %961 = fsub float %925, %945, !dbg !72
  %962 = tail call float @llvm.amdgcn.exp2.f32(float %946), !dbg !73
  %963 = tail call float @llvm.amdgcn.exp2.f32(float %947), !dbg !73
  %964 = tail call float @llvm.amdgcn.exp2.f32(float %948), !dbg !73
  %965 = tail call float @llvm.amdgcn.exp2.f32(float %949), !dbg !73
  %966 = tail call float @llvm.amdgcn.exp2.f32(float %950), !dbg !73
  %967 = tail call float @llvm.amdgcn.exp2.f32(float %951), !dbg !73
  %968 = tail call float @llvm.amdgcn.exp2.f32(float %952), !dbg !73
  %969 = tail call float @llvm.amdgcn.exp2.f32(float %953), !dbg !73
  %970 = tail call float @llvm.amdgcn.exp2.f32(float %954), !dbg !73
  %971 = tail call float @llvm.amdgcn.exp2.f32(float %955), !dbg !73
  %972 = tail call float @llvm.amdgcn.exp2.f32(float %956), !dbg !73
  %973 = tail call float @llvm.amdgcn.exp2.f32(float %957), !dbg !73
  %974 = tail call float @llvm.amdgcn.exp2.f32(float %958), !dbg !73
  %975 = tail call float @llvm.amdgcn.exp2.f32(float %959), !dbg !73
  %976 = tail call float @llvm.amdgcn.exp2.f32(float %960), !dbg !73
  %977 = tail call float @llvm.amdgcn.exp2.f32(float %961), !dbg !73
  %978 = fadd float %962, %963, !dbg !74
  %979 = fadd float %964, %978, !dbg !74
  %980 = fadd float %965, %979, !dbg !74
  %981 = fadd float %966, %980, !dbg !74
  %982 = fadd float %967, %981, !dbg !74
  %983 = fadd float %968, %982, !dbg !74
  %984 = fadd float %969, %983, !dbg !74
  %985 = fadd float %970, %984, !dbg !74
  %986 = fadd float %971, %985, !dbg !74
  %987 = fadd float %972, %986, !dbg !74
  %988 = fadd float %973, %987, !dbg !74
  %989 = fadd float %974, %988, !dbg !74
  %990 = fadd float %975, %989, !dbg !74
  %991 = fadd float %976, %990, !dbg !74
  %992 = fadd float %977, %991, !dbg !74
  %993 = bitcast float %992 to i32, !dbg !75
  %994 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %674, i32 %993), !dbg !75
  %995 = bitcast i32 %994 to float, !dbg !75
  %996 = fadd float %992, %995, !dbg !74
  %997 = fsub float %794, %945, !dbg !76
  %998 = tail call float @llvm.amdgcn.exp2.f32(float %997), !dbg !77
  %999 = fmul float %795, %998, !dbg !78
  %1000 = fadd float %999, %996, !dbg !79
  %1001 = insertelement <2 x float> poison, float %998, i64 0, !dbg !80
  %1002 = shufflevector <2 x float> %1001, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !80
  %1003 = fmul <2 x float> %804, %1002, !dbg !80
  %1004 = fmul <2 x float> %805, %1002, !dbg !80
  %1005 = fmul <2 x float> %806, %1002, !dbg !80
  %1006 = fmul <2 x float> %807, %1002, !dbg !80
  %1007 = fmul <2 x float> %808, %1002, !dbg !80
  %1008 = fmul <2 x float> %809, %1002, !dbg !80
  %1009 = fmul <2 x float> %810, %1002, !dbg !80
  %1010 = fmul <2 x float> %811, %1002, !dbg !80
  %1011 = fmul <2 x float> %796, %1002, !dbg !80
  %1012 = fmul <2 x float> %797, %1002, !dbg !80
  %1013 = fmul <2 x float> %798, %1002, !dbg !80
  %1014 = fmul <2 x float> %799, %1002, !dbg !80
  %1015 = fmul <2 x float> %800, %1002, !dbg !80
  %1016 = fmul <2 x float> %801, %1002, !dbg !80
  %1017 = fmul <2 x float> %802, %1002, !dbg !80
  %1018 = fmul <2 x float> %803, %1002, !dbg !80
  fence syncscope("workgroup") release, !dbg !61
  tail call void @llvm.amdgcn.s.barrier(), !dbg !61
  fence syncscope("workgroup") acquire, !dbg !61
  store <8 x half> %814, ptr addrspace(3) %677, align 16, !dbg !61
  fence syncscope("workgroup") release, !dbg !61
  tail call void @llvm.amdgcn.s.barrier(), !dbg !61
  fence syncscope("workgroup") acquire, !dbg !61
  %1019 = load <1 x half>, ptr addrspace(3) %713, align 2, !dbg !61
  %1020 = load <1 x half>, ptr addrspace(3) %715, align 2, !dbg !61
  %1021 = load <1 x half>, ptr addrspace(3) %717, align 2, !dbg !61
  %1022 = shufflevector <1 x half> %1021, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1023 = load <1 x half>, ptr addrspace(3) %719, align 2, !dbg !61
  %1024 = shufflevector <1 x half> %1023, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1025 = load <1 x half>, ptr addrspace(3) %721, align 2, !dbg !61
  %1026 = load <1 x half>, ptr addrspace(3) %723, align 2, !dbg !61
  %1027 = load <1 x half>, ptr addrspace(3) %725, align 2, !dbg !61
  %1028 = shufflevector <1 x half> %1027, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1029 = load <1 x half>, ptr addrspace(3) %727, align 2, !dbg !61
  %1030 = shufflevector <1 x half> %1029, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1031 = load <1 x half>, ptr addrspace(3) %729, align 2, !dbg !61
  %1032 = load <1 x half>, ptr addrspace(3) %731, align 2, !dbg !61
  %1033 = load <1 x half>, ptr addrspace(3) %733, align 2, !dbg !61
  %1034 = shufflevector <1 x half> %1033, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1035 = load <1 x half>, ptr addrspace(3) %735, align 2, !dbg !61
  %1036 = shufflevector <1 x half> %1035, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1037 = load <1 x half>, ptr addrspace(3) %737, align 2, !dbg !61
  %1038 = load <1 x half>, ptr addrspace(3) %739, align 2, !dbg !61
  %1039 = load <1 x half>, ptr addrspace(3) %741, align 2, !dbg !61
  %1040 = shufflevector <1 x half> %1039, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1041 = load <1 x half>, ptr addrspace(3) %743, align 2, !dbg !61
  %1042 = shufflevector <1 x half> %1041, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1043 = load <1 x half>, ptr addrspace(3) %745, align 2, !dbg !61
  %1044 = load <1 x half>, ptr addrspace(3) %747, align 2, !dbg !61
  %1045 = load <1 x half>, ptr addrspace(3) %749, align 2, !dbg !61
  %1046 = shufflevector <1 x half> %1045, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1047 = load <1 x half>, ptr addrspace(3) %751, align 2, !dbg !61
  %1048 = shufflevector <1 x half> %1047, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1049 = load <1 x half>, ptr addrspace(3) %753, align 2, !dbg !61
  %1050 = load <1 x half>, ptr addrspace(3) %755, align 2, !dbg !61
  %1051 = load <1 x half>, ptr addrspace(3) %757, align 2, !dbg !61
  %1052 = shufflevector <1 x half> %1051, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1053 = load <1 x half>, ptr addrspace(3) %759, align 2, !dbg !61
  %1054 = shufflevector <1 x half> %1053, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1055 = load <1 x half>, ptr addrspace(3) %761, align 2, !dbg !61
  %1056 = load <1 x half>, ptr addrspace(3) %763, align 2, !dbg !61
  %1057 = load <1 x half>, ptr addrspace(3) %765, align 2, !dbg !61
  %1058 = shufflevector <1 x half> %1057, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1059 = load <1 x half>, ptr addrspace(3) %767, align 2, !dbg !61
  %1060 = shufflevector <1 x half> %1059, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1061 = load <1 x half>, ptr addrspace(3) %769, align 2, !dbg !61
  %1062 = load <1 x half>, ptr addrspace(3) %771, align 2, !dbg !61
  %1063 = load <1 x half>, ptr addrspace(3) %773, align 2, !dbg !61
  %1064 = shufflevector <1 x half> %1063, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1065 = load <1 x half>, ptr addrspace(3) %775, align 2, !dbg !61
  %1066 = shufflevector <1 x half> %1065, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1067 = fptrunc float %962 to half, !dbg !81
  %1068 = fptrunc float %963 to half, !dbg !81
  %1069 = fptrunc float %964 to half, !dbg !81
  %1070 = fptrunc float %965 to half, !dbg !81
  %1071 = fptrunc float %966 to half, !dbg !81
  %1072 = fptrunc float %967 to half, !dbg !81
  %1073 = fptrunc float %968 to half, !dbg !81
  %1074 = fptrunc float %969 to half, !dbg !81
  %1075 = fptrunc float %970 to half, !dbg !81
  %1076 = fptrunc float %971 to half, !dbg !81
  %1077 = fptrunc float %972 to half, !dbg !81
  %1078 = fptrunc float %973 to half, !dbg !81
  %1079 = fptrunc float %974 to half, !dbg !81
  %1080 = fptrunc float %975 to half, !dbg !81
  %1081 = fptrunc float %976 to half, !dbg !81
  %1082 = fptrunc float %977 to half, !dbg !81
  %1083 = insertelement <4 x half> poison, half %1067, i64 0, !dbg !82
  %1084 = insertelement <4 x half> %1083, half %1068, i64 1, !dbg !82
  %1085 = insertelement <4 x half> %1084, half %1069, i64 2, !dbg !82
  %1086 = insertelement <4 x half> %1085, half %1070, i64 3, !dbg !82
  %1087 = insertelement <4 x half> poison, half %1071, i64 0, !dbg !82
  %1088 = insertelement <4 x half> %1087, half %1072, i64 1, !dbg !82
  %1089 = insertelement <4 x half> %1088, half %1073, i64 2, !dbg !82
  %1090 = insertelement <4 x half> %1089, half %1074, i64 3, !dbg !82
  %1091 = insertelement <4 x half> poison, half %1075, i64 0, !dbg !82
  %1092 = insertelement <4 x half> %1091, half %1076, i64 1, !dbg !82
  %1093 = insertelement <4 x half> %1092, half %1077, i64 2, !dbg !82
  %1094 = insertelement <4 x half> %1093, half %1078, i64 3, !dbg !82
  %1095 = insertelement <4 x half> poison, half %1079, i64 0, !dbg !82
  %1096 = insertelement <4 x half> %1095, half %1080, i64 1, !dbg !82
  %1097 = insertelement <4 x half> %1096, half %1081, i64 2, !dbg !82
  %1098 = insertelement <4 x half> %1097, half %1082, i64 3, !dbg !82
  %1099 = shufflevector <1 x half> %1019, <1 x half> %1020, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !82
  %1100 = shufflevector <4 x half> %1099, <4 x half> %1022, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !82
  %1101 = shufflevector <4 x half> %1100, <4 x half> %1024, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !82
  %1102 = shufflevector <1 x half> %1025, <1 x half> %1026, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !82
  %1103 = shufflevector <4 x half> %1102, <4 x half> %1028, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !82
  %1104 = shufflevector <4 x half> %1103, <4 x half> %1030, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !82
  %1105 = shufflevector <1 x half> %1031, <1 x half> %1032, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !82
  %1106 = shufflevector <4 x half> %1105, <4 x half> %1034, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !82
  %1107 = shufflevector <4 x half> %1106, <4 x half> %1036, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !82
  %1108 = shufflevector <1 x half> %1037, <1 x half> %1038, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !82
  %1109 = shufflevector <4 x half> %1108, <4 x half> %1040, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !82
  %1110 = shufflevector <4 x half> %1109, <4 x half> %1042, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !82
  %1111 = shufflevector <1 x half> %1043, <1 x half> %1044, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !82
  %1112 = shufflevector <4 x half> %1111, <4 x half> %1046, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !82
  %1113 = shufflevector <4 x half> %1112, <4 x half> %1048, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !82
  %1114 = shufflevector <1 x half> %1049, <1 x half> %1050, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !82
  %1115 = shufflevector <4 x half> %1114, <4 x half> %1052, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !82
  %1116 = shufflevector <4 x half> %1115, <4 x half> %1054, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !82
  %1117 = shufflevector <1 x half> %1055, <1 x half> %1056, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !82
  %1118 = shufflevector <4 x half> %1117, <4 x half> %1058, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !82
  %1119 = shufflevector <4 x half> %1118, <4 x half> %1060, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !82
  %1120 = shufflevector <1 x half> %1061, <1 x half> %1062, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !82
  %1121 = shufflevector <4 x half> %1120, <4 x half> %1064, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !82
  %1122 = shufflevector <4 x half> %1121, <4 x half> %1066, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !82
  %1123 = shufflevector <2 x float> %1003, <2 x float> %1004, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1124 = shufflevector <2 x float> %1005, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1125 = shufflevector <16 x float> %1123, <16 x float> %1124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1126 = shufflevector <2 x float> %1006, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1127 = shufflevector <16 x float> %1125, <16 x float> %1126, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1128 = shufflevector <2 x float> %1007, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1129 = shufflevector <16 x float> %1127, <16 x float> %1128, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1130 = shufflevector <2 x float> %1008, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1131 = shufflevector <16 x float> %1129, <16 x float> %1130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1132 = shufflevector <2 x float> %1009, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1133 = shufflevector <16 x float> %1131, <16 x float> %1132, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !82
  %1134 = shufflevector <2 x float> %1010, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1135 = shufflevector <16 x float> %1133, <16 x float> %1134, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !82
  %1136 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1101, <4 x half> %1086, <16 x float> %1135, i32 0, i32 0, i32 0), !dbg !82
  %1137 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1104, <4 x half> %1090, <16 x float> %1136, i32 0, i32 0, i32 0), !dbg !82
  %1138 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1107, <4 x half> %1094, <16 x float> %1137, i32 0, i32 0, i32 0), !dbg !82
  %1139 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1110, <4 x half> %1098, <16 x float> %1138, i32 0, i32 0, i32 0), !dbg !82
  %1140 = shufflevector <2 x float> %1011, <2 x float> %1012, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1141 = shufflevector <2 x float> %1013, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1142 = shufflevector <16 x float> %1140, <16 x float> %1141, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1143 = shufflevector <2 x float> %1014, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1144 = shufflevector <16 x float> %1142, <16 x float> %1143, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1145 = shufflevector <2 x float> %1015, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1146 = shufflevector <16 x float> %1144, <16 x float> %1145, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1147 = shufflevector <2 x float> %1016, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1148 = shufflevector <16 x float> %1146, <16 x float> %1147, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1149 = shufflevector <2 x float> %1017, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1150 = shufflevector <16 x float> %1148, <16 x float> %1149, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !82
  %1151 = shufflevector <2 x float> %1018, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1152 = shufflevector <16 x float> %1150, <16 x float> %1151, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !82
  %1153 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1113, <4 x half> %1086, <16 x float> %1152, i32 0, i32 0, i32 0), !dbg !82
  %1154 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1116, <4 x half> %1090, <16 x float> %1153, i32 0, i32 0, i32 0), !dbg !82
  %1155 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1119, <4 x half> %1094, <16 x float> %1154, i32 0, i32 0, i32 0), !dbg !82
  %1156 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1122, <4 x half> %1098, <16 x float> %1155, i32 0, i32 0, i32 0), !dbg !82
  %1157 = add nsw i64 %793, 32, !dbg !83
  %indvars76 = trunc i64 %1157 to i32, !dbg !60
  %1158 = icmp sgt i32 %647, %indvars76, !dbg !60
  %1159 = shufflevector <16 x float> %1156, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1160 = shufflevector <16 x float> %1156, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1161 = shufflevector <16 x float> %1156, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1162 = shufflevector <16 x float> %1156, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1163 = shufflevector <16 x float> %1156, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1164 = shufflevector <16 x float> %1156, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1165 = shufflevector <16 x float> %1156, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1166 = shufflevector <16 x float> %1156, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1167 = shufflevector <16 x float> %1139, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1168 = shufflevector <16 x float> %1139, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1169 = shufflevector <16 x float> %1139, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1170 = shufflevector <16 x float> %1139, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1171 = shufflevector <16 x float> %1139, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1172 = shufflevector <16 x float> %1139, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1173 = shufflevector <16 x float> %1139, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1174 = shufflevector <16 x float> %1139, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %1158, label %792, label %._crit_edge64.loopexit, !dbg !60

._crit_edge64.loopexit:                           ; preds = %792
  %1175 = shufflevector <16 x float> %1156, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !34
  %1176 = shufflevector <16 x float> %1156, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !34
  %1177 = shufflevector <16 x float> %1156, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !34
  %1178 = shufflevector <16 x float> %1156, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %1179 = shufflevector <16 x float> %1139, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !34
  %1180 = shufflevector <16 x float> %1139, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !34
  %1181 = shufflevector <16 x float> %1139, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !34
  %1182 = shufflevector <16 x float> %1139, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !34
  br label %._crit_edge64, !dbg !84

._crit_edge64:                                    ; preds = %._crit_edge64.loopexit, %._crit_edge
  %.lcssa50 = phi float [ %.lcssa53, %._crit_edge ], [ %1000, %._crit_edge64.loopexit ], !dbg !34
  %.lcssa = phi float [ %.lcssa51, %._crit_edge ], [ %945, %._crit_edge64.loopexit ], !dbg !34
  %1183 = phi <4 x float> [ %639, %._crit_edge ], [ %1182, %._crit_edge64.loopexit ], !dbg !34
  %1184 = phi <4 x float> [ %640, %._crit_edge ], [ %1181, %._crit_edge64.loopexit ], !dbg !34
  %1185 = phi <4 x float> [ %641, %._crit_edge ], [ %1180, %._crit_edge64.loopexit ], !dbg !34
  %1186 = phi <4 x float> [ %642, %._crit_edge ], [ %1179, %._crit_edge64.loopexit ], !dbg !34
  %1187 = phi <4 x float> [ %643, %._crit_edge ], [ %1178, %._crit_edge64.loopexit ], !dbg !34
  %1188 = phi <4 x float> [ %644, %._crit_edge ], [ %1177, %._crit_edge64.loopexit ], !dbg !34
  %1189 = phi <4 x float> [ %645, %._crit_edge ], [ %1176, %._crit_edge64.loopexit ], !dbg !34
  %1190 = phi <4 x float> [ %646, %._crit_edge ], [ %1175, %._crit_edge64.loopexit ], !dbg !34
  %1191 = tail call noundef float @llvm.log2.f32(float %.lcssa50), !dbg !84
  %1192 = fadd float %1191, %.lcssa, !dbg !85
  %1193 = insertelement <4 x float> poison, float %.lcssa50, i64 0, !dbg !86
  %1194 = shufflevector <4 x float> %1193, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !86
  %1195 = fdiv <4 x float> %1183, %1194, !dbg !86
  %1196 = fdiv <4 x float> %1184, %1194, !dbg !86
  %1197 = fdiv <4 x float> %1185, %1194, !dbg !86
  %1198 = fdiv <4 x float> %1186, %1194, !dbg !86
  %1199 = fdiv <4 x float> %1187, %1194, !dbg !86
  %1200 = fdiv <4 x float> %1188, %1194, !dbg !86
  %1201 = fdiv <4 x float> %1189, %1194, !dbg !86
  %1202 = fdiv <4 x float> %1190, %1194, !dbg !86
  fence syncscope("workgroup") release, !dbg !87
  tail call void @llvm.amdgcn.s.barrier(), !dbg !87
  fence syncscope("workgroup") acquire, !dbg !87
  %1203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %79, !dbg !87
  %1204 = insertelement <1 x float> poison, float %1192, i64 0, !dbg !87
  store <1 x float> %1204, ptr addrspace(3) %1203, align 4, !dbg !87
  fence syncscope("workgroup") release, !dbg !87
  tail call void @llvm.amdgcn.s.barrier(), !dbg !87
  fence syncscope("workgroup") acquire, !dbg !87
  %urem = and i32 %35, 192, !dbg !87
  %1205 = icmp eq i32 %urem, 0, !dbg !87
  br i1 %1205, label %1206, label %1215, !dbg !87

1206:                                             ; preds = %._crit_edge64
  %1207 = zext nneg i32 %36 to i64, !dbg !87
  %1208 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1207, !dbg !87
  %1209 = load i32, ptr addrspace(3) %1208, align 4, !dbg !87
  %1210 = mul i32 %19, %21, !dbg !88
  %1211 = sext i32 %1210 to i64, !dbg !89
  %1212 = getelementptr float, ptr addrspace(1) %4, i64 %1211, !dbg !89
  %1213 = sext i32 %77 to i64, !dbg !90
  %1214 = getelementptr float, ptr addrspace(1) %1212, i64 %1213, !dbg !90
  store i32 %1209, ptr addrspace(1) %1214, align 4, !dbg !87
  br label %1215, !dbg !87

1215:                                             ; preds = %1206, %._crit_edge64
  %1216 = and i32 %35, 128, !dbg !91
  %.not.not = icmp eq i32 %1216, 0, !dbg !91
  br i1 %.not.not, label %.critedge, label %.critedge47, !dbg !91

.critedge:                                        ; preds = %1215
  %1217 = mul nsw i64 %88, %64, !dbg !91
  %1218 = getelementptr half, ptr addrspace(1) %63, i64 %1217, !dbg !91
  %1219 = getelementptr half, ptr addrspace(1) %1218, i64 %87, !dbg !91
  %1220 = getelementptr half, ptr addrspace(1) %1218, i64 %86, !dbg !91
  %1221 = getelementptr half, ptr addrspace(1) %1218, i64 %85, !dbg !91
  %1222 = getelementptr half, ptr addrspace(1) %1218, i64 %84, !dbg !91
  %1223 = getelementptr half, ptr addrspace(1) %1218, i64 %83, !dbg !91
  %1224 = getelementptr half, ptr addrspace(1) %1218, i64 %82, !dbg !91
  %1225 = getelementptr half, ptr addrspace(1) %1218, i64 %81, !dbg !91
  %1226 = fptrunc <4 x float> %1202 to <4 x half>, !dbg !92
  %1227 = fptrunc <4 x float> %1201 to <4 x half>, !dbg !92
  %1228 = fptrunc <4 x float> %1200 to <4 x half>, !dbg !92
  %1229 = fptrunc <4 x float> %1199 to <4 x half>, !dbg !92
  %1230 = fptrunc <4 x float> %1198 to <4 x half>, !dbg !92
  %1231 = fptrunc <4 x float> %1197 to <4 x half>, !dbg !92
  %1232 = fptrunc <4 x float> %1196 to <4 x half>, !dbg !92
  %1233 = fptrunc <4 x float> %1195 to <4 x half>, !dbg !92
  %1234 = getelementptr half, ptr addrspace(1) %1218, i64 %80, !dbg !91
  store <4 x half> %1233, ptr addrspace(1) %1234, align 2, !dbg !91
  store <4 x half> %1232, ptr addrspace(1) %1225, align 2, !dbg !91
  store <4 x half> %1231, ptr addrspace(1) %1224, align 2, !dbg !91
  store <4 x half> %1230, ptr addrspace(1) %1223, align 2, !dbg !91
  store <4 x half> %1229, ptr addrspace(1) %1222, align 2, !dbg !91
  store <4 x half> %1228, ptr addrspace(1) %1221, align 2, !dbg !91
  store <4 x half> %1227, ptr addrspace(1) %1220, align 2, !dbg !91
  store <4 x half> %1226, ptr addrspace(1) %1219, align 2, !dbg !91
  br label %.critedge47, !dbg !91

.critedge47:                                      ; preds = %1215, %.critedge
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half>, <4 x half>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.log2.f32(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="3" "denormal-fp-math-f32"="preserve-sign" "uniform-work-group-size"="false" }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 8, !"PIC Level", i32 0}
!4 = distinct !DICompileUnit(language: DW_LANG_C, file: !5, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!5 = !DIFile(filename: "06-fused-attention.py", directory: "/triton/python/tutorials")
!6 = !DISubprogram(name: "llvm.amdgcn.exp2.f32", linkageName: "llvm.amdgcn.exp2.f32", scope: !5, file: !5, line: 171, type: !7, scopeLine: 171, spFlags: DISPFlagOptimized)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "_attn_fwd", linkageName: "_attn_fwd", scope: !5, file: !5, line: 100, type: !7, scopeLine: 100, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4)
!10 = !DILocation(line: 113, column: 27, scope: !9)
!11 = !DILocation(line: 114, column: 22, scope: !9)
!12 = !DILocation(line: 116, column: 26, scope: !9)
!13 = !DILocation(line: 116, column: 38, scope: !9)
!14 = !DILocation(line: 115, column: 21, scope: !9)
!15 = !DILocation(line: 116, column: 59, scope: !9)
!16 = !DILocation(line: 116, column: 71, scope: !9)
!17 = !DILocation(line: 116, column: 50, scope: !9)
!18 = !DILocation(line: 120, column: 17, scope: !9)
!19 = !DILocation(line: 112, column: 28, scope: !9)
!20 = !DILocation(line: 123, column: 27, scope: !9)
!21 = !DILocation(line: 125, column: 8, scope: !9)
!22 = !DILocation(line: 153, column: 46, scope: !9)
!23 = !DILocation(line: 163, column: 16, scope: !9)
!24 = !DILocation(line: 129, column: 17, scope: !9)
!25 = !DILocation(line: 134, column: 8, scope: !9)
!26 = !DILocation(line: 137, column: 17, scope: !9)
!27 = !DILocation(line: 142, column: 8, scope: !9)
!28 = !DILocation(line: 145, column: 19, scope: !9)
!29 = !DILocation(line: 150, column: 8, scope: !9)
!30 = !DILocation(line: 153, column: 33, scope: !9)
!31 = !DILocation(line: 161, column: 16, scope: !9)
!32 = !DILocation(line: 44, column: 33, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !9, file: !5, discriminator: 0)
!34 = !DILocation(line: 171, column: 74, scope: !9)
!35 = !DILocation(line: 65, column: 20, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !33, inlinedAt: !34)
!37 = !DILocation(line: 48, column: 23, scope: !33, inlinedAt: !34)
!38 = !DILocation(line: 163, column: 27, scope: !39, inlinedAt: !34)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/triton/python/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !33, file: !40, discriminator: 0)
!42 = !DILocation(line: 184, column: 40, scope: !41, inlinedAt: !34)
!43 = !DILocation(line: 55, column: 51, scope: !33, inlinedAt: !34)
!44 = !DILocation(line: 55, column: 35, scope: !33, inlinedAt: !34)
!45 = !DILocation(line: 56, column: 22, scope: !33, inlinedAt: !34)
!46 = !DILocation(line: 56, column: 33, scope: !33, inlinedAt: !34)
!47 = !DILocation(line: 57, column: 25, scope: !33, inlinedAt: !34)
!48 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !34)
!49 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !34)
!50 = !DILocation(line: 60, column: 35, scope: !33, inlinedAt: !34)
!51 = !DILocation(line: 60, column: 29, scope: !33, inlinedAt: !34)
!52 = !DILocation(line: 61, column: 20, scope: !33, inlinedAt: !34)
!53 = !DILocation(line: 61, column: 28, scope: !33, inlinedAt: !34)
!54 = !DILocation(line: 63, column: 20, scope: !33, inlinedAt: !34)
!55 = !DILocation(line: 69, column: 21, scope: !33, inlinedAt: !34)
!56 = !DILocation(line: 70, column: 27, scope: !33, inlinedAt: !34)
!57 = !DILocation(line: 74, column: 46, scope: !33, inlinedAt: !34)
!58 = !DILocation(line: 36, column: 52, scope: !33, inlinedAt: !59)
!59 = !DILocation(line: 180, column: 66, scope: !9)
!60 = !DILocation(line: 44, column: 33, scope: !33, inlinedAt: !59)
!61 = !DILocation(line: 65, column: 20, scope: !33, inlinedAt: !59)
!62 = !DILocation(line: 47, column: 20, scope: !33, inlinedAt: !59)
!63 = !DILocation(line: 48, column: 23, scope: !33, inlinedAt: !59)
!64 = !DILocation(line: 50, column: 49, scope: !33, inlinedAt: !59)
!65 = !DILocation(line: 50, column: 39, scope: !33, inlinedAt: !59)
!66 = !DILocation(line: 51, column: 22, scope: !33, inlinedAt: !59)
!67 = !DILocation(line: 51, column: 51, scope: !33, inlinedAt: !59)
!68 = !DILocation(line: 51, column: 33, scope: !33, inlinedAt: !59)
!69 = !DILocation(line: 163, column: 27, scope: !39, inlinedAt: !59)
!70 = !DILocation(line: 184, column: 40, scope: !41, inlinedAt: !59)
!71 = !DILocation(line: 52, column: 35, scope: !33, inlinedAt: !59)
!72 = !DILocation(line: 53, column: 18, scope: !33, inlinedAt: !59)
!73 = !DILocation(line: 57, column: 25, scope: !33, inlinedAt: !59)
!74 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !59)
!75 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !59)
!76 = !DILocation(line: 60, column: 35, scope: !33, inlinedAt: !59)
!77 = !DILocation(line: 60, column: 29, scope: !33, inlinedAt: !59)
!78 = !DILocation(line: 61, column: 20, scope: !33, inlinedAt: !59)
!79 = !DILocation(line: 61, column: 28, scope: !33, inlinedAt: !59)
!80 = !DILocation(line: 63, column: 20, scope: !33, inlinedAt: !59)
!81 = !DILocation(line: 69, column: 21, scope: !33, inlinedAt: !59)
!82 = !DILocation(line: 70, column: 27, scope: !33, inlinedAt: !59)
!83 = !DILocation(line: 74, column: 46, scope: !33, inlinedAt: !59)
!84 = !DILocation(line: 183, column: 24, scope: !9)
!85 = !DILocation(line: 183, column: 11, scope: !9)
!86 = !DILocation(line: 184, column: 16, scope: !9)
!87 = !DILocation(line: 186, column: 21, scope: !9)
!88 = !DILocation(line: 185, column: 26, scope: !9)
!89 = !DILocation(line: 185, column: 17, scope: !9)
!90 = !DILocation(line: 185, column: 34, scope: !9)
!91 = !DILocation(line: 187, column: 26, scope: !9)
!92 = !DILocation(line: 187, column: 33, scope: !9)
!93 = !DILocation(line: 187, column: 4, scope: !9)
