#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc = loc("/triton/python/tutorials/06-fused-attention.py":102:0)
#loc1 = loc(unknown)
#loc17 = loc("/triton/python/tutorials/06-fused-attention.py":182:66)
#loc28 = loc("/triton/python/tutorials/06-fused-attention.py":173:74)
#loc34 = loc("/triton/python/tutorials/06-fused-attention.py":57:46)
#loc41 = loc("/triton/python/tutorials/06-fused-attention.py":60:25)
#loc65 = loc("/triton/python/tutorials/06-fused-attention.py":54:46)
#mma = #triton_gpu.amd_mfma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [0, 1], hasLeadingOffset = false}>
#shared2 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0], hasLeadingOffset = false}>
#loc87 = loc(callsite(#loc1 at #loc34))
#loc94 = loc(callsite(#loc1 at #loc41))
#loc122 = loc(callsite(#loc1 at #loc65))
#loc139 = loc(callsite(#loc87 at #loc28))
#loc142 = loc(callsite(#loc94 at #loc28))
#loc145 = loc(callsite(#loc122 at #loc17))
#loc148 = loc(callsite(#loc94 at #loc17))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "hip:gfx90a", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @_attn_fwd(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg3: f32 loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg15: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg17: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg18: i32 loc("/triton/python/tutorials/06-fused-attention.py":102:0), %arg19: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":102:0)) attributes {noinline = false} {
    %cst = arith.constant dense<-1.000000e+06> : tensor<64x64xf32, #mma> loc(#loc1)
    %cst_0 = arith.constant 1.44269502 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c64_i64 = arith.constant 64 : i64 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %cst_2 = arith.constant dense<0xFF800000> : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i64 = arith.constant 0 : i64 loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.divsi %0, %arg18 : i32 loc(#loc3)
    %2 = arith.extsi %1 : i32 to i64 loc(#loc4)
    %3 = arith.extsi %arg6 : i32 to i64 loc(#loc5)
    %4 = arith.muli %2, %3 : i64 loc(#loc5)
    %5 = arith.remsi %0, %arg18 : i32 loc(#loc6)
    %6 = arith.extsi %5 : i32 to i64 loc(#loc7)
    %7 = arith.extsi %arg7 : i32 to i64 loc(#loc8)
    %8 = arith.muli %6, %7 : i64 loc(#loc8)
    %9 = arith.addi %4, %8 : i64 loc(#loc9)
    %10 = tt.addptr %arg0, %9 : !tt.ptr<f16>, i64 loc(#loc10)
    %11 = tt.get_program_id x : i32 loc(#loc11)
    %12 = arith.muli %11, %c64_i32 : i32 loc(#loc12)
    %13 = arith.extsi %12 : i32 to i64 loc(#loc13)
    %14 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc14)
    %15 = arith.extsi %14 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> to tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc15)
    %17 = arith.extsi %arg8 : i32 to i64 loc(#loc13)
    %18 = arith.muli %13, %17 : i64 loc(#loc15)
    %19 = tt.splat %17 : i64 -> tensor<64x1xi64, #blocked> loc(#loc15)
    %20 = arith.muli %16, %19 : tensor<64x1xi64, #blocked> loc(#loc15)
    %21 = tt.broadcast %20 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc15)
    %22 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %23 = arith.extsi %22 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %24 = tt.expand_dims %23 {axis = 0 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc79)
    %25 = tt.broadcast %24 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc79)
    %26 = arith.addi %21, %25 : tensor<64x64xi64, #blocked> loc(#loc15)
    %27 = tt.addptr %10, %18 : !tt.ptr<f16>, i64 loc(#loc15)
    %28 = tt.splat %27 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc15)
    %29 = tt.addptr %28, %26 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc15)
    %30 = tt.load %29 : tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc15)
    %31 = tt.addptr %arg2, %9 : !tt.ptr<f16>, i64 loc(#loc18)
    %32 = arith.extsi %arg14 : i32 to i64 loc(#loc19)
    %33 = tt.addptr %arg1, %9 : !tt.ptr<f16>, i64 loc(#loc20)
    %34 = arith.extsi %arg11 : i32 to i64 loc(#loc21)
    %35 = tt.addptr %arg5, %9 : !tt.ptr<f16>, i64 loc(#loc22)
    %36 = arith.extsi %arg17 : i32 to i64 loc(#loc23)
    %37 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc14)
    %38 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc14)
    %39 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc14)
    %40 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc14)
    %41 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked2> loc(#loc14)
    %42 = tt.splat %12 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc24)
    %43 = arith.addi %42, %37 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc24)
    %44 = arith.mulf %arg3, %cst_0 : f32 loc(#loc25)
    %45 = arith.extsi %37 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> to tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %46 = arith.extsi %38 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc15)
    %47 = arith.extsi %39 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> to tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %48 = arith.extsi %40 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> to tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc15)
    %49 = tt.expand_dims %45 {axis = 1 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi64, #mma> loc(#loc26)
    %50 = tt.expand_dims %47 {axis = 0 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi64, #mma> loc(#loc26)
    %51 = tt.broadcast %50 : tensor<1x64xi64, #mma> -> tensor<64x64xi64, #mma> loc(#loc26)
    %52 = triton_gpu.local_alloc %30 : (tensor<64x64xf16, #blocked>) -> !tt.memdesc<64x64xf16, #shared, #triton_gpu.shared_memory> loc(#loc15)
    %53 = triton_gpu.local_load %52 : !tt.memdesc<64x64xf16, #shared, #triton_gpu.shared_memory> -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc15)
    %54 = tt.expand_dims %46 {axis = 1 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc80)
    %55 = tt.broadcast %54 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc80)
    %56 = tt.splat %44 : f32 -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc81)
    %57 = tt.splat %44 : f32 -> tensor<64x64xf32, #mma> loc(#loc82)
    %58:5 = scf.for %arg20 = %c0_i32 to %12 step %c64_i32 iter_args(%arg21 = %cst_3, %arg22 = %cst_1, %arg23 = %cst_2, %arg24 = %c0_i64, %arg25 = %c0_i64) -> (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<64x64xf32, #mma>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, i64, i64)  : i32 {
      %87 = tt.expand_dims %48 {axis = 0 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc80)
      %88 = arith.muli %arg25, %34 : i64 loc(#loc80)
      %89 = tt.splat %34 : i64 -> tensor<1x64xi64, #blocked1> loc(#loc80)
      %90 = arith.muli %87, %89 : tensor<1x64xi64, #blocked1> loc(#loc80)
      %91 = tt.broadcast %90 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc80)
      %92 = arith.addi %55, %91 : tensor<64x64xi64, #blocked1> loc(#loc80)
      %93 = tt.addptr %33, %88 : !tt.ptr<f16>, i64 loc(#loc80)
      %94 = tt.splat %93 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked1> loc(#loc80)
      %95 = tt.addptr %94, %92 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc80)
      %96 = tt.load %95 : tensor<64x64x!tt.ptr<f16>, #blocked1> loc(#loc80)
      %97 = arith.muli %arg24, %32 : i64 loc(#loc84)
      %98 = tt.splat %32 : i64 -> tensor<64x1xi64, #blocked> loc(#loc84)
      %99 = arith.muli %16, %98 : tensor<64x1xi64, #blocked> loc(#loc84)
      %100 = tt.broadcast %99 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc84)
      %101 = arith.addi %100, %25 : tensor<64x64xi64, #blocked> loc(#loc84)
      %102 = tt.addptr %31, %97 : !tt.ptr<f16>, i64 loc(#loc84)
      %103 = tt.splat %102 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc84)
      %104 = tt.addptr %103, %101 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc84)
      %105 = tt.load %104 : tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc84)
      %106 = triton_gpu.local_alloc %96 : (tensor<64x64xf16, #blocked1>) -> !tt.memdesc<64x64xf16, #shared1, #triton_gpu.shared_memory> loc(#loc80)
      %107 = triton_gpu.local_load %106 : !tt.memdesc<64x64xf16, #shared1, #triton_gpu.shared_memory> -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc80)
      %108 = tt.dot %53, %107, %cst_1 : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x64xf32, #mma> loc(#loc85)
      %109 = "tt.reduce"(%108) <{axis = 1 : i32}> ({
      ^bb0(%arg26: f32 loc(callsite(#loc87 at #loc28)), %arg27: f32 loc(callsite(#loc87 at #loc28))):
        %132 = arith.maxnumf %arg26, %arg27 : f32 loc(#loc149)
        tt.reduce.return %132 : f32 loc(#loc138)
      }) : (tensor<64x64xf32, #mma>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc138)
      %110 = arith.mulf %109, %56 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc81)
      %111 = arith.maxnumf %arg23, %110 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc89)
      %112 = arith.mulf %108, %57 : tensor<64x64xf32, #mma> loc(#loc82)
      %113 = tt.expand_dims %111 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc90)
      %114 = tt.broadcast %113 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc91)
      %115 = arith.subf %112, %114 : tensor<64x64xf32, #mma> loc(#loc91)
      %116 = math.exp2 %115 : tensor<64x64xf32, #mma> loc(#loc92)
      %117 = "tt.reduce"(%116) <{axis = 1 : i32}> ({
      ^bb0(%arg26: f32 loc(callsite(#loc94 at #loc28)), %arg27: f32 loc(callsite(#loc94 at #loc28))):
        %132 = arith.addf %arg26, %arg27 : f32 loc(#loc150)
        tt.reduce.return %132 : f32 loc(#loc141)
      }) : (tensor<64x64xf32, #mma>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc141)
      %118 = arith.subf %arg23, %111 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc96)
      %119 = math.exp2 %118 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc97)
      %120 = arith.mulf %arg21, %119 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc98)
      %121 = arith.addf %120, %117 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc99)
      %122 = tt.expand_dims %119 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc100)
      %123 = tt.broadcast %122 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc101)
      %124 = arith.mulf %arg22, %123 : tensor<64x64xf32, #mma> loc(#loc101)
      %125 = arith.truncf %116 : tensor<64x64xf32, #mma> to tensor<64x64xf16, #mma> loc(#loc102)
      %126 = triton_gpu.convert_layout %125 : tensor<64x64xf16, #mma> -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc102)
      %127 = triton_gpu.local_alloc %105 : (tensor<64x64xf16, #blocked>) -> !tt.memdesc<64x64xf16, #shared2, #triton_gpu.shared_memory> loc(#loc84)
      %128 = triton_gpu.local_load %127 : !tt.memdesc<64x64xf16, #shared2, #triton_gpu.shared_memory> -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc84)
      %129 = tt.dot %126, %128, %124 : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x64xf32, #mma> loc(#loc103)
      %130 = arith.addi %arg24, %c64_i64 : i64 loc(#loc104)
      %131 = arith.addi %arg25, %c64_i64 : i64 loc(#loc105)
      scf.yield %121, %129, %111, %130, %131 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<64x64xf32, #mma>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, i64, i64 loc(#loc106)
    } {tt.divisibility_arg1 = dense<64> : tensor<1xi32>} loc(#loc83)
    %59 = arith.muli %11, %c64_i32 {tt.divisibility = dense<64> : tensor<1xi32>} : i32 loc(#loc107)
    %60 = arith.addi %11, %c1_i32 : i32 loc(#loc108)
    %61 = arith.muli %60, %c64_i32 : i32 loc(#loc109)
    %62 = arith.extsi %59 : i32 to i64 loc(#loc110)
    %63 = tt.expand_dims %43 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc111)
    %64 = tt.expand_dims %39 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc112)
    %65 = tt.broadcast %63 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc113)
    %66:5 = scf.for %arg20 = %59 to %61 step %c64_i32 iter_args(%arg21 = %58#0, %arg22 = %58#1, %arg23 = %58#2, %arg24 = %62, %arg25 = %62) -> (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<64x64xf32, #mma>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, i64, i64)  : i32 {
      %87 = tt.expand_dims %48 {axis = 0 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc115)
      %88 = arith.muli %arg25, %34 : i64 loc(#loc115)
      %89 = tt.splat %34 : i64 -> tensor<1x64xi64, #blocked1> loc(#loc115)
      %90 = arith.muli %87, %89 : tensor<1x64xi64, #blocked1> loc(#loc115)
      %91 = tt.broadcast %90 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc115)
      %92 = arith.addi %55, %91 : tensor<64x64xi64, #blocked1> loc(#loc115)
      %93 = tt.addptr %33, %88 : !tt.ptr<f16>, i64 loc(#loc115)
      %94 = tt.splat %93 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked1> loc(#loc115)
      %95 = tt.addptr %94, %92 : tensor<64x64x!tt.ptr<f16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc115)
      %96 = tt.load %95 : tensor<64x64x!tt.ptr<f16>, #blocked1> loc(#loc115)
      %97 = arith.muli %arg24, %32 : i64 loc(#loc79)
      %98 = tt.splat %32 : i64 -> tensor<64x1xi64, #blocked> loc(#loc79)
      %99 = arith.muli %16, %98 : tensor<64x1xi64, #blocked> loc(#loc79)
      %100 = tt.broadcast %99 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc79)
      %101 = arith.addi %100, %25 : tensor<64x64xi64, #blocked> loc(#loc79)
      %102 = tt.addptr %31, %97 : !tt.ptr<f16>, i64 loc(#loc79)
      %103 = tt.splat %102 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc79)
      %104 = tt.addptr %103, %101 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc79)
      %105 = tt.load %104 : tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc79)
      %106 = triton_gpu.local_alloc %96 : (tensor<64x64xf16, #blocked1>) -> !tt.memdesc<64x64xf16, #shared1, #triton_gpu.shared_memory> loc(#loc115)
      %107 = triton_gpu.local_load %106 : !tt.memdesc<64x64xf16, #shared1, #triton_gpu.shared_memory> -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc115)
      %108 = tt.dot %53, %107, %cst_1 : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x64xf32, #mma> loc(#loc116)
      %109 = tt.splat %arg20 : i32 -> tensor<1x64xi32, #mma> loc(#loc117)
      %110 = arith.addi %109, %64 : tensor<1x64xi32, #mma> loc(#loc117)
      %111 = tt.broadcast %110 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc113)
      %112 = arith.cmpi sge, %65, %111 : tensor<64x64xi32, #mma> loc(#loc113)
      %113 = arith.mulf %108, %57 : tensor<64x64xf32, #mma> loc(#loc118)
      %114 = arith.select %112, %cst_1, %cst : tensor<64x64xi1, #mma>, tensor<64x64xf32, #mma> loc(#loc119)
      %115 = arith.addf %113, %114 : tensor<64x64xf32, #mma> loc(#loc120)
      %116 = "tt.reduce"(%115) <{axis = 1 : i32}> ({
      ^bb0(%arg26: f32 loc(callsite(#loc122 at #loc17)), %arg27: f32 loc(callsite(#loc122 at #loc17))):
        %137 = arith.maxnumf %arg26, %arg27 : f32 loc(#loc151)
        tt.reduce.return %137 : f32 loc(#loc144)
      }) : (tensor<64x64xf32, #mma>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc144)
      %117 = arith.maxnumf %arg23, %116 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc123)
      %118 = tt.expand_dims %117 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc124)
      %119 = tt.broadcast %118 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc125)
      %120 = arith.subf %115, %119 : tensor<64x64xf32, #mma> loc(#loc125)
      %121 = math.exp2 %120 : tensor<64x64xf32, #mma> loc(#loc126)
      %122 = "tt.reduce"(%121) <{axis = 1 : i32}> ({
      ^bb0(%arg26: f32 loc(callsite(#loc94 at #loc17)), %arg27: f32 loc(callsite(#loc94 at #loc17))):
        %137 = arith.addf %arg26, %arg27 : f32 loc(#loc152)
        tt.reduce.return %137 : f32 loc(#loc147)
      }) : (tensor<64x64xf32, #mma>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc147)
      %123 = arith.subf %arg23, %117 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc127)
      %124 = math.exp2 %123 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc128)
      %125 = arith.mulf %arg21, %124 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc129)
      %126 = arith.addf %125, %122 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc130)
      %127 = tt.expand_dims %124 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc131)
      %128 = tt.broadcast %127 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc132)
      %129 = arith.mulf %arg22, %128 : tensor<64x64xf32, #mma> loc(#loc132)
      %130 = arith.truncf %121 : tensor<64x64xf32, #mma> to tensor<64x64xf16, #mma> loc(#loc133)
      %131 = triton_gpu.convert_layout %130 : tensor<64x64xf16, #mma> -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc133)
      %132 = triton_gpu.local_alloc %105 : (tensor<64x64xf16, #blocked>) -> !tt.memdesc<64x64xf16, #shared2, #triton_gpu.shared_memory> loc(#loc79)
      %133 = triton_gpu.local_load %132 : !tt.memdesc<64x64xf16, #shared2, #triton_gpu.shared_memory> -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc79)
      %134 = tt.dot %131, %133, %129 : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x64xf32, #mma> loc(#loc134)
      %135 = arith.addi %arg24, %c64_i64 : i64 loc(#loc135)
      %136 = arith.addi %arg25, %c64_i64 : i64 loc(#loc136)
      scf.yield %126, %134, %117, %135, %136 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<64x64xf32, #mma>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, i64, i64 loc(#loc137)
    } {tt.divisibility_arg1 = dense<64> : tensor<1xi32>} loc(#loc114)
    %67 = math.log2 %66#0 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc69)
    %68 = arith.addf %66#2, %67 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc70)
    %69 = tt.expand_dims %66#0 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc71)
    %70 = tt.broadcast %69 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc72)
    %71 = arith.divf %66#1, %70 : tensor<64x64xf32, #mma> loc(#loc72)
    %72 = arith.muli %0, %arg19 : i32 loc(#loc73)
    %73 = tt.addptr %arg4, %72 : !tt.ptr<f32>, i32 loc(#loc74)
    %74 = tt.addptr %73, %12 : !tt.ptr<f32>, i32 loc(#loc75)
    %75 = triton_gpu.convert_layout %68 : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<64xf32, #blocked2> loc(#loc76)
    %76 = tt.splat %74 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked2> loc(#loc76)
    %77 = tt.addptr %76, %41 : tensor<64x!tt.ptr<f32>, #blocked2>, tensor<64xi32, #blocked2> loc(#loc76)
    tt.store %77, %75 : tensor<64x!tt.ptr<f32>, #blocked2> loc(#loc76)
    %78 = arith.truncf %71 : tensor<64x64xf32, #mma> to tensor<64x64xf16, #mma> loc(#loc77)
    %79 = arith.muli %13, %36 : i64 loc(#loc26)
    %80 = tt.splat %36 : i64 -> tensor<64x1xi64, #mma> loc(#loc26)
    %81 = arith.muli %49, %80 : tensor<64x1xi64, #mma> loc(#loc26)
    %82 = tt.broadcast %81 : tensor<64x1xi64, #mma> -> tensor<64x64xi64, #mma> loc(#loc26)
    %83 = arith.addi %82, %51 : tensor<64x64xi64, #mma> loc(#loc26)
    %84 = tt.addptr %35, %79 : !tt.ptr<f16>, i64 loc(#loc26)
    %85 = tt.splat %84 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #mma> loc(#loc26)
    %86 = tt.addptr %85, %83 : tensor<64x64x!tt.ptr<f16>, #mma>, tensor<64x64xi64, #mma> loc(#loc26)
    tt.store %86, %78 : tensor<64x64x!tt.ptr<f16>, #mma> loc(#loc26)
    tt.return loc(#loc78)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/triton/python/tutorials/06-fused-attention.py":115:27)
#loc3 = loc("/triton/python/tutorials/06-fused-attention.py":116:22)
#loc4 = loc("/triton/python/tutorials/06-fused-attention.py":118:26)
#loc5 = loc("/triton/python/tutorials/06-fused-attention.py":118:38)
#loc6 = loc("/triton/python/tutorials/06-fused-attention.py":117:21)
#loc7 = loc("/triton/python/tutorials/06-fused-attention.py":118:59)
#loc8 = loc("/triton/python/tutorials/06-fused-attention.py":118:71)
#loc9 = loc("/triton/python/tutorials/06-fused-attention.py":118:50)
#loc10 = loc("/triton/python/tutorials/06-fused-attention.py":122:17)
#loc11 = loc("/triton/python/tutorials/06-fused-attention.py":114:28)
#loc12 = loc("/triton/python/tutorials/06-fused-attention.py":125:27)
#loc13 = loc("/triton/python/tutorials/06-fused-attention.py":127:8)
#loc14 = loc("/triton/python/tutorials/06-fused-attention.py":155:46)
#loc15 = loc("/triton/python/tutorials/06-fused-attention.py":165:16)
#loc16 = loc("/triton/python/tutorials/06-fused-attention.py":67:20)
#loc18 = loc("/triton/python/tutorials/06-fused-attention.py":131:17)
#loc19 = loc("/triton/python/tutorials/06-fused-attention.py":136:8)
#loc20 = loc("/triton/python/tutorials/06-fused-attention.py":139:17)
#loc21 = loc("/triton/python/tutorials/06-fused-attention.py":144:8)
#loc22 = loc("/triton/python/tutorials/06-fused-attention.py":147:19)
#loc23 = loc("/triton/python/tutorials/06-fused-attention.py":152:8)
#loc24 = loc("/triton/python/tutorials/06-fused-attention.py":155:33)
#loc25 = loc("/triton/python/tutorials/06-fused-attention.py":163:16)
#loc26 = loc("/triton/python/tutorials/06-fused-attention.py":189:26)
#loc27 = loc("/triton/python/tutorials/06-fused-attention.py":49:20)
#loc29 = loc("/triton/python/tutorials/06-fused-attention.py":57:51)
#loc30 = loc("/triton/python/tutorials/06-fused-attention.py":58:22)
#loc31 = loc("/triton/python/tutorials/06-fused-attention.py":46:33)
#loc32 = loc("/triton/python/tutorials/06-fused-attention.py":50:23)
#loc33 = loc("/triton/python/triton/language/standard.py":184:40)
#loc35 = loc("/triton/python/triton/language/standard.py":163:27)
#loc36 = loc("/triton/python/tutorials/06-fused-attention.py":57:35)
#loc37 = loc("/triton/python/tutorials/06-fused-attention.py":58:38)
#loc38 = loc("/triton/python/tutorials/06-fused-attention.py":58:33)
#loc39 = loc("/triton/python/tutorials/06-fused-attention.py":59:25)
#loc40 = loc("/triton/python/triton/language/standard.py":267:36)
#loc42 = loc("/triton/python/triton/language/standard.py":256:15)
#loc43 = loc("/triton/python/tutorials/06-fused-attention.py":62:35)
#loc44 = loc("/triton/python/tutorials/06-fused-attention.py":62:29)
#loc45 = loc("/triton/python/tutorials/06-fused-attention.py":63:20)
#loc46 = loc("/triton/python/tutorials/06-fused-attention.py":63:28)
#loc47 = loc("/triton/python/tutorials/06-fused-attention.py":65:26)
#loc48 = loc("/triton/python/tutorials/06-fused-attention.py":65:20)
#loc49 = loc("/triton/python/tutorials/06-fused-attention.py":71:21)
#loc50 = loc("/triton/python/tutorials/06-fused-attention.py":72:27)
#loc51 = loc("/triton/python/tutorials/06-fused-attention.py":75:46)
#loc52 = loc("/triton/python/tutorials/06-fused-attention.py":76:46)
#loc53 = loc("/triton/python/tutorials/06-fused-attention.py":76:8)
#loc54 = loc("/triton/python/tutorials/06-fused-attention.py":38:27)
#loc55 = loc("/triton/python/tutorials/06-fused-attention.py":38:47)
#loc56 = loc("/triton/python/tutorials/06-fused-attention.py":38:52)
#loc57 = loc("/triton/python/tutorials/06-fused-attention.py":43:42)
#loc58 = loc("/triton/python/tutorials/06-fused-attention.py":52:26)
#loc59 = loc("/triton/python/tutorials/06-fused-attention.py":52:56)
#loc60 = loc("/triton/python/tutorials/06-fused-attention.py":52:39)
#loc61 = loc("/triton/python/tutorials/06-fused-attention.py":52:49)
#loc62 = loc("/triton/python/tutorials/06-fused-attention.py":53:22)
#loc63 = loc("/triton/python/tutorials/06-fused-attention.py":53:51)
#loc64 = loc("/triton/python/tutorials/06-fused-attention.py":53:33)
#loc66 = loc("/triton/python/tutorials/06-fused-attention.py":54:35)
#loc67 = loc("/triton/python/tutorials/06-fused-attention.py":55:23)
#loc68 = loc("/triton/python/tutorials/06-fused-attention.py":55:18)
#loc69 = loc("/triton/python/tutorials/06-fused-attention.py":185:24)
#loc70 = loc("/triton/python/tutorials/06-fused-attention.py":185:11)
#loc71 = loc("/triton/python/tutorials/06-fused-attention.py":186:20)
#loc72 = loc("/triton/python/tutorials/06-fused-attention.py":186:16)
#loc73 = loc("/triton/python/tutorials/06-fused-attention.py":187:26)
#loc74 = loc("/triton/python/tutorials/06-fused-attention.py":187:17)
#loc75 = loc("/triton/python/tutorials/06-fused-attention.py":187:34)
#loc76 = loc("/triton/python/tutorials/06-fused-attention.py":188:21)
#loc77 = loc("/triton/python/tutorials/06-fused-attention.py":189:33)
#loc78 = loc("/triton/python/tutorials/06-fused-attention.py":189:4)
#loc79 = loc(callsite(#loc16 at #loc17))
#loc80 = loc(callsite(#loc27 at #loc28))
#loc81 = loc(callsite(#loc29 at #loc28))
#loc82 = loc(callsite(#loc30 at #loc28))
#loc83 = loc(callsite(#loc31 at #loc28))
#loc84 = loc(callsite(#loc16 at #loc28))
#loc85 = loc(callsite(#loc32 at #loc28))
#loc86 = loc(callsite(#loc33 at #loc34))
#loc88 = loc(callsite(#loc35 at #loc33))
#loc89 = loc(callsite(#loc36 at #loc28))
#loc90 = loc(callsite(#loc37 at #loc28))
#loc91 = loc(callsite(#loc38 at #loc28))
#loc92 = loc(callsite(#loc39 at #loc28))
#loc93 = loc(callsite(#loc40 at #loc41))
#loc95 = loc(callsite(#loc42 at #loc40))
#loc96 = loc(callsite(#loc43 at #loc28))
#loc97 = loc(callsite(#loc44 at #loc28))
#loc98 = loc(callsite(#loc45 at #loc28))
#loc99 = loc(callsite(#loc46 at #loc28))
#loc100 = loc(callsite(#loc47 at #loc28))
#loc101 = loc(callsite(#loc48 at #loc28))
#loc102 = loc(callsite(#loc49 at #loc28))
#loc103 = loc(callsite(#loc50 at #loc28))
#loc104 = loc(callsite(#loc51 at #loc28))
#loc105 = loc(callsite(#loc52 at #loc28))
#loc106 = loc(callsite(#loc53 at #loc28))
#loc107 = loc(callsite(#loc54 at #loc17))
#loc108 = loc(callsite(#loc55 at #loc17))
#loc109 = loc(callsite(#loc56 at #loc17))
#loc110 = loc(callsite(#loc57 at #loc17))
#loc111 = loc(callsite(#loc58 at #loc17))
#loc112 = loc(callsite(#loc59 at #loc17))
#loc113 = loc(callsite(#loc60 at #loc17))
#loc114 = loc(callsite(#loc31 at #loc17))
#loc115 = loc(callsite(#loc27 at #loc17))
#loc116 = loc(callsite(#loc32 at #loc17))
#loc117 = loc(callsite(#loc61 at #loc17))
#loc118 = loc(callsite(#loc62 at #loc17))
#loc119 = loc(callsite(#loc63 at #loc17))
#loc120 = loc(callsite(#loc64 at #loc17))
#loc121 = loc(callsite(#loc33 at #loc65))
#loc123 = loc(callsite(#loc66 at #loc17))
#loc124 = loc(callsite(#loc67 at #loc17))
#loc125 = loc(callsite(#loc68 at #loc17))
#loc126 = loc(callsite(#loc39 at #loc17))
#loc127 = loc(callsite(#loc43 at #loc17))
#loc128 = loc(callsite(#loc44 at #loc17))
#loc129 = loc(callsite(#loc45 at #loc17))
#loc130 = loc(callsite(#loc46 at #loc17))
#loc131 = loc(callsite(#loc47 at #loc17))
#loc132 = loc(callsite(#loc48 at #loc17))
#loc133 = loc(callsite(#loc49 at #loc17))
#loc134 = loc(callsite(#loc50 at #loc17))
#loc135 = loc(callsite(#loc51 at #loc17))
#loc136 = loc(callsite(#loc52 at #loc17))
#loc137 = loc(callsite(#loc53 at #loc17))
#loc138 = loc(callsite(#loc86 at #loc28))
#loc140 = loc(callsite(#loc88 at #loc34))
#loc141 = loc(callsite(#loc93 at #loc28))
#loc143 = loc(callsite(#loc95 at #loc41))
#loc144 = loc(callsite(#loc121 at #loc17))
#loc146 = loc(callsite(#loc88 at #loc65))
#loc147 = loc(callsite(#loc93 at #loc17))
#loc149 = loc(callsite(#loc140 at #loc28))
#loc150 = loc(callsite(#loc143 at #loc28))
#loc151 = loc(callsite(#loc146 at #loc17))
#loc152 = loc(callsite(#loc143 at #loc17))
