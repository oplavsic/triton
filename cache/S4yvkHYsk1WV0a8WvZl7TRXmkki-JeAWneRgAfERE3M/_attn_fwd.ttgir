#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [16, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0)
#loc1 = loc(unknown)
#loc22 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":106:42)
#loc35 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":116:25)
#mma = #triton_gpu.amd_mfma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [8, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [0, 1], hasLeadingOffset = false}>
#loc49 = loc(callsite(#loc1 at #loc22))
#loc52 = loc(callsite(#loc1 at #loc35))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "hip:gfx90a", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @_attn_fwd(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg3: f32 loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg15: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg17: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg18: i32 loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg19: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg20: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256x128xf32, #mma> loc(#loc1)
    %cst_0 = arith.constant dense<0xFF800000> : tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %c128_i64 = arith.constant 128 : i64 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_2 = arith.constant 1.44269502 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i64 = arith.constant 0 : i64 loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %arg7 : i32 loc(#loc3)
    %2 = tt.addptr %arg0, %1 : !tt.ptr<f16>, i32 loc(#loc4)
    %3 = tt.get_program_id x : i32 loc(#loc5)
    %4 = arith.muli %3, %c256_i32 : i32 loc(#loc6)
    %5 = arith.extsi %4 : i32 to i64 loc(#loc7)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %7 = arith.extsi %6 : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> to tensor<256xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 1 : i32} : tensor<256xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi64, #blocked> loc(#loc8)
    %9 = arith.extsi %arg8 : i32 to i64 loc(#loc7)
    %10 = arith.muli %5, %9 : i64 loc(#loc8)
    %11 = tt.splat %9 : i64 -> tensor<256x1xi64, #blocked> loc(#loc8)
    %12 = arith.muli %8, %11 : tensor<256x1xi64, #blocked> loc(#loc8)
    %13 = tt.broadcast %12 : tensor<256x1xi64, #blocked> -> tensor<256x128xi64, #blocked> loc(#loc8)
    %14 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %15 = arith.extsi %14 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> to tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %16 = tt.expand_dims %15 {axis = 0 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi64, #blocked> loc(#loc8)
    %17 = tt.broadcast %16 : tensor<1x128xi64, #blocked> -> tensor<256x128xi64, #blocked> loc(#loc8)
    %18 = arith.addi %13, %17 : tensor<256x128xi64, #blocked> loc(#loc8)
    %19 = tt.addptr %2, %10 : !tt.ptr<f16>, i64 loc(#loc8)
    %20 = tt.splat %19 : !tt.ptr<f16> -> tensor<256x128x!tt.ptr<f16>, #blocked> loc(#loc8)
    %21 = tt.addptr %20, %18 : tensor<256x128x!tt.ptr<f16>, #blocked>, tensor<256x128xi64, #blocked> loc(#loc8)
    %22 = tt.load %21 : tensor<256x128x!tt.ptr<f16>, #blocked> loc(#loc8)
    %23 = tt.addptr %arg1, %1 : !tt.ptr<f16>, i32 loc(#loc9)
    %24 = arith.extsi %arg11 : i32 to i64 loc(#loc10)
    %25 = tt.addptr %arg2, %1 : !tt.ptr<f16>, i32 loc(#loc11)
    %26 = arith.extsi %arg14 : i32 to i64 loc(#loc12)
    %27 = arith.mulf %arg3, %cst_2 : f32 loc(#loc13)
    %28 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc8)
    %29 = arith.extsi %28 : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> to tensor<256xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc8)
    %30 = tt.expand_dims %29 {axis = 1 : i32} : tensor<256xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi64, #mma> loc(#loc14)
    %31 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc8)
    %32 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %33 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc8)
    %34 = arith.extsi %31 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> to tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc8)
    %35 = arith.extsi %32 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> to tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %36 = arith.extsi %33 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc8)
    %37 = tt.expand_dims %34 {axis = 0 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x128xi64, #mma> loc(#loc14)
    %38 = tt.expand_dims %35 {axis = 0 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi64, #blocked1> loc(#loc15)
    %39 = tt.broadcast %37 : tensor<1x128xi64, #mma> -> tensor<256x128xi64, #mma> loc(#loc14)
    %40 = arith.extf %22 : tensor<256x128xf16, #blocked> to tensor<256x128xf32, #blocked> loc(#loc16)
    %41 = tt.splat %27 : f32 -> tensor<256x128xf32, #blocked> loc(#loc16)
    %42 = arith.mulf %40, %41 : tensor<256x128xf32, #blocked> loc(#loc16)
    %43 = arith.truncf %42 : tensor<256x128xf32, #blocked> to tensor<256x128xf16, #blocked> loc(#loc17)
    %44 = triton_gpu.local_alloc %43 : (tensor<256x128xf16, #blocked>) -> !tt.memdesc<256x128xf16, #shared, #triton_gpu.shared_memory> loc(#loc17)
    %45 = triton_gpu.local_load %44 : !tt.memdesc<256x128xf16, #shared, #triton_gpu.shared_memory> -> tensor<256x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc17)
    %46 = tt.expand_dims %36 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi64, #blocked1> loc(#loc18)
    %47 = tt.broadcast %46 : tensor<128x1xi64, #blocked1> -> tensor<128x128xi64, #blocked1> loc(#loc18)
    %48 = tt.splat %26 : i64 -> tensor<1x128xi64, #blocked1> loc(#loc15)
    %49 = arith.muli %38, %48 : tensor<1x128xi64, #blocked1> loc(#loc15)
    %50 = tt.broadcast %49 : tensor<1x128xi64, #blocked1> -> tensor<128x128xi64, #blocked1> loc(#loc15)
    %51:5 = scf.for %arg21 = %c0_i32 to %arg20 step %c128_i32 iter_args(%arg22 = %cst, %arg23 = %cst_1, %arg24 = %cst_0, %arg25 = %c0_i64, %arg26 = %c0_i64) -> (tensor<256x128xf32, #mma>, tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, i64, i64)  : i32 {
      %66 = arith.muli %arg26, %24 : i64 loc(#loc18)
      %67 = tt.splat %24 : i64 -> tensor<1x128xi64, #blocked1> loc(#loc18)
      %68 = arith.muli %38, %67 : tensor<1x128xi64, #blocked1> loc(#loc18)
      %69 = tt.broadcast %68 : tensor<1x128xi64, #blocked1> -> tensor<128x128xi64, #blocked1> loc(#loc18)
      %70 = arith.addi %47, %69 : tensor<128x128xi64, #blocked1> loc(#loc18)
      %71 = tt.addptr %23, %66 : !tt.ptr<f16>, i64 loc(#loc18)
      %72 = tt.splat %71 : !tt.ptr<f16> -> tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc18)
      %73 = tt.addptr %72, %70 : tensor<128x128x!tt.ptr<f16>, #blocked1>, tensor<128x128xi64, #blocked1> loc(#loc18)
      %74 = tt.load %73 : tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc18)
      %75 = arith.addi %47, %50 : tensor<128x128xi64, #blocked1> loc(#loc15)
      %76 = tt.addptr %25, %arg25 : !tt.ptr<f16>, i64 loc(#loc15)
      %77 = tt.splat %76 : !tt.ptr<f16> -> tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc15)
      %78 = tt.addptr %77, %75 : tensor<128x128x!tt.ptr<f16>, #blocked1>, tensor<128x128xi64, #blocked1> loc(#loc15)
      %79 = tt.load %78 : tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc15)
      %80 = triton_gpu.local_alloc %74 : (tensor<128x128xf16, #blocked1>) -> !tt.memdesc<128x128xf16, #shared1, #triton_gpu.shared_memory> loc(#loc18)
      %81 = triton_gpu.local_load %80 : !tt.memdesc<128x128xf16, #shared1, #triton_gpu.shared_memory> -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc18)
      %82 = tt.dot %45, %81, %cst : tensor<256x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<256x128xf32, #mma> loc(#loc20)
      %83 = "tt.reduce"(%82) <{axis = 1 : i32}> ({
      ^bb0(%arg27: f32 loc(callsite(#loc1 at #loc22)), %arg28: f32 loc(callsite(#loc1 at #loc22))):
        %104 = arith.maxnumf %arg27, %arg28 : f32 loc(#loc54)
        tt.reduce.return %104 : f32 loc(#loc48)
      }) : (tensor<256x128xf32, #mma>) -> tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc48)
      %84 = arith.maxnumf %arg24, %83 : tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc24)
      %85 = tt.expand_dims %84 {axis = 1 : i32} : tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xf32, #mma> loc(#loc25)
      %86 = tt.broadcast %85 : tensor<256x1xf32, #mma> -> tensor<256x128xf32, #mma> loc(#loc26)
      %87 = arith.subf %82, %86 : tensor<256x128xf32, #mma> loc(#loc26)
      %88 = math.exp2 %87 : tensor<256x128xf32, #mma> loc(#loc27)
      %89 = arith.subf %arg24, %84 : tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc28)
      %90 = math.exp2 %89 : tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc29)
      %91 = tt.expand_dims %90 {axis = 1 : i32} : tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xf32, #mma> loc(#loc30)
      %92 = tt.broadcast %91 : tensor<256x1xf32, #mma> -> tensor<256x128xf32, #mma> loc(#loc31)
      %93 = arith.mulf %arg22, %92 : tensor<256x128xf32, #mma> loc(#loc31)
      %94 = arith.truncf %88 : tensor<256x128xf32, #mma> to tensor<256x128xf16, #mma> loc(#loc32)
      %95 = triton_gpu.convert_layout %94 : tensor<256x128xf16, #mma> -> tensor<256x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc32)
      %96 = triton_gpu.local_alloc %79 : (tensor<128x128xf16, #blocked1>) -> !tt.memdesc<128x128xf16, #shared1, #triton_gpu.shared_memory> loc(#loc15)
      %97 = triton_gpu.local_load %96 : !tt.memdesc<128x128xf16, #shared1, #triton_gpu.shared_memory> -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc15)
      %98 = tt.dot %95, %97, %93 : tensor<256x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<256x128xf32, #mma> loc(#loc33)
      %99 = "tt.reduce"(%88) <{axis = 1 : i32}> ({
      ^bb0(%arg27: f32 loc(callsite(#loc1 at #loc35)), %arg28: f32 loc(callsite(#loc1 at #loc35))):
        %104 = arith.addf %arg27, %arg28 : f32 loc(#loc55)
        tt.reduce.return %104 : f32 loc(#loc51)
      }) : (tensor<256x128xf32, #mma>) -> tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc51)
      %100 = arith.mulf %arg23, %90 : tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc37)
      %101 = arith.addf %100, %99 : tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc38)
      %102 = arith.addi %arg25, %c128_i64 : i64 loc(#loc39)
      %103 = arith.addi %arg26, %c128_i64 : i64 loc(#loc40)
      scf.yield %98, %101, %84, %102, %103 : tensor<256x128xf32, #mma>, tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, i64, i64 loc(#loc41)
    } {tt.divisibility_arg1 = dense<128> : tensor<1xi32>} loc(#loc19)
    %52 = tt.expand_dims %51#1 {axis = 1 : i32} : tensor<256xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xf32, #mma> loc(#loc42)
    %53 = tt.broadcast %52 : tensor<256x1xf32, #mma> -> tensor<256x128xf32, #mma> loc(#loc43)
    %54 = arith.divf %51#0, %53 : tensor<256x128xf32, #mma> loc(#loc43)
    %55 = tt.addptr %arg5, %1 : !tt.ptr<f16>, i32 loc(#loc44)
    %56 = arith.extsi %arg17 : i32 to i64 loc(#loc45)
    %57 = arith.truncf %54 : tensor<256x128xf32, #mma> to tensor<256x128xf16, #mma> loc(#loc46)
    %58 = arith.muli %5, %56 : i64 loc(#loc14)
    %59 = tt.splat %56 : i64 -> tensor<256x1xi64, #mma> loc(#loc14)
    %60 = arith.muli %30, %59 : tensor<256x1xi64, #mma> loc(#loc14)
    %61 = tt.broadcast %60 : tensor<256x1xi64, #mma> -> tensor<256x128xi64, #mma> loc(#loc14)
    %62 = arith.addi %61, %39 : tensor<256x128xi64, #mma> loc(#loc14)
    %63 = tt.addptr %55, %58 : !tt.ptr<f16>, i64 loc(#loc14)
    %64 = tt.splat %63 : !tt.ptr<f16> -> tensor<256x128x!tt.ptr<f16>, #mma> loc(#loc14)
    %65 = tt.addptr %64, %62 : tensor<256x128x!tt.ptr<f16>, #mma>, tensor<256x128xi64, #mma> loc(#loc14)
    tt.store %65, %57 : tensor<256x128x!tt.ptr<f16>, #mma> loc(#loc14)
    tt.return loc(#loc47)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":71:27)
#loc3 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":72:26)
#loc4 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":73:45)
#loc5 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":70:28)
#loc6 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":74:55)
#loc7 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":74:105)
#loc8 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":90:16)
#loc9 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":75:45)
#loc10 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":76:89)
#loc11 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":77:45)
#loc12 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":78:89)
#loc13 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":89:26)
#loc14 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":126:26)
#loc15 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":113:24)
#loc16 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":94:13)
#loc17 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":94:26)
#loc18 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":100:20)
#loc19 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":97:33)
#loc20 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":104:24)
#loc21 = loc("/triton/python/triton/language/standard.py":184:40)
#loc23 = loc("/triton/python/triton/language/standard.py":163:27)
#loc24 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":106:31)
#loc25 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":107:23)
#loc26 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":107:18)
#loc27 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":108:25)
#loc28 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":110:35)
#loc29 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":110:29)
#loc30 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":111:26)
#loc31 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":111:20)
#loc32 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":114:27)
#loc33 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":114:37)
#loc34 = loc("/triton/python/triton/language/standard.py":267:36)
#loc36 = loc("/triton/python/triton/language/standard.py":256:15)
#loc37 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":117:20)
#loc38 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":117:28)
#loc39 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":120:46)
#loc40 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":121:46)
#loc41 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":121:8)
#loc42 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":122:20)
#loc43 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":122:16)
#loc44 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":124:47)
#loc45 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":125:105)
#loc46 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":126:33)
#loc47 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":126:4)
#loc48 = loc(callsite(#loc21 at #loc22))
#loc50 = loc(callsite(#loc23 at #loc21))
#loc51 = loc(callsite(#loc34 at #loc35))
#loc53 = loc(callsite(#loc36 at #loc34))
#loc54 = loc(callsite(#loc50 at #loc22))
#loc55 = loc(callsite(#loc53 at #loc35))
