#loc = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0)
#loc1 = loc(unknown)
#loc21 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":106:42)
#loc34 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":116:25)
#loc49 = loc(callsite(#loc1 at #loc21))
#loc52 = loc(callsite(#loc1 at #loc34))
module {
  tt.func public @_attn_fwd(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg3: f32 loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg15: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg17: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg18: i32 loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg19: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0), %arg20: i32 {tt.divisibility = 16 : i32} loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":39:0)) attributes {noinline = false} {
    %c128_i64 = arith.constant 128 : i64 loc(#loc1)
    %c0_i64 = arith.constant 0 : i64 loc(#loc1)
    %cst = arith.constant dense<1.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0xFF800000> : tensor<256xf32> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<256x128xf32> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_2 = arith.constant 1.44269502 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %1, %arg7 : i32 loc(#loc4)
    %3 = tt.addptr %arg0, %2 : !tt.ptr<f16>, i32 loc(#loc5)
    %4 = arith.muli %0, %c256_i32 : i32 loc(#loc6)
    %5 = arith.extsi %arg8 : i32 to i64 loc(#loc7)
    %6 = arith.extsi %4 : i32 to i64 loc(#loc7)
    %7 = tt.addptr %arg1, %2 : !tt.ptr<f16>, i32 loc(#loc8)
    %8 = arith.extsi %arg11 : i32 to i64 loc(#loc9)
    %9 = tt.addptr %arg2, %2 : !tt.ptr<f16>, i32 loc(#loc10)
    %10 = arith.extsi %arg14 : i32 to i64 loc(#loc11)
    %11 = arith.mulf %arg3, %cst_2 : f32 loc(#loc12)
    %12 = tt.splat %3 : !tt.ptr<f16> -> tensor<256x128x!tt.ptr<f16>> loc(#loc13)
    %13 = tt.splat %6 : i64 -> tensor<256xi64> loc(#loc13)
    %14 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc13)
    %15 = arith.extsi %14 : tensor<256xi32> to tensor<256xi64> loc(#loc13)
    %16 = arith.addi %13, %15 : tensor<256xi64> loc(#loc13)
    %17 = tt.expand_dims %16 {axis = 1 : i32} : tensor<256xi64> -> tensor<256x1xi64> loc(#loc13)
    %18 = tt.splat %5 : i64 -> tensor<256x1xi64> loc(#loc13)
    %19 = arith.muli %17, %18 : tensor<256x1xi64> loc(#loc13)
    %20 = tt.broadcast %19 : tensor<256x1xi64> -> tensor<256x128xi64> loc(#loc13)
    %21 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc13)
    %22 = arith.extsi %21 : tensor<128xi32> to tensor<128xi64> loc(#loc13)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<128xi64> -> tensor<1x128xi64> loc(#loc13)
    %24 = tt.broadcast %23 : tensor<1x128xi64> -> tensor<256x128xi64> loc(#loc13)
    %25 = arith.addi %20, %24 : tensor<256x128xi64> loc(#loc13)
    %26 = tt.addptr %12, %25 : tensor<256x128x!tt.ptr<f16>>, tensor<256x128xi64> loc(#loc13)
    %27 = tt.load %26 : tensor<256x128x!tt.ptr<f16>> loc(#loc13)
    %28 = arith.extf %27 : tensor<256x128xf16> to tensor<256x128xf32> loc(#loc14)
    %29 = tt.splat %11 : f32 -> tensor<256x128xf32> loc(#loc14)
    %30 = arith.mulf %28, %29 : tensor<256x128xf32> loc(#loc14)
    %31 = arith.truncf %30 : tensor<256x128xf32> to tensor<256x128xf16> loc(#loc15)
    %32 = tt.splat %7 : !tt.ptr<f16> -> tensor<128x128x!tt.ptr<f16>> loc(#loc16)
    %33 = tt.expand_dims %22 {axis = 1 : i32} : tensor<128xi64> -> tensor<128x1xi64> loc(#loc16)
    %34 = tt.broadcast %33 : tensor<128x1xi64> -> tensor<128x128xi64> loc(#loc16)
    %35 = tt.splat %8 : i64 -> tensor<1x128xi64> loc(#loc16)
    %36 = tt.splat %9 : !tt.ptr<f16> -> tensor<128x128x!tt.ptr<f16>> loc(#loc17)
    %37 = tt.splat %10 : i64 -> tensor<1x128xi64> loc(#loc17)
    %38 = arith.muli %23, %37 : tensor<1x128xi64> loc(#loc17)
    %39 = tt.broadcast %38 : tensor<1x128xi64> -> tensor<128x128xi64> loc(#loc17)
    %40:5 = scf.for %arg21 = %c0_i32 to %arg20 step %c128_i32 iter_args(%arg22 = %cst_1, %arg23 = %cst, %arg24 = %cst_0, %arg25 = %c0_i64, %arg26 = %c0_i64) -> (tensor<256x128xf32>, tensor<256xf32>, tensor<256xf32>, i64, i64)  : i32 {
      %53 = tt.splat %arg26 : i64 -> tensor<128xi64> loc(#loc16)
      %54 = arith.addi %53, %22 : tensor<128xi64> loc(#loc16)
      %55 = tt.expand_dims %54 {axis = 0 : i32} : tensor<128xi64> -> tensor<1x128xi64> loc(#loc16)
      %56 = arith.muli %55, %35 : tensor<1x128xi64> loc(#loc16)
      %57 = tt.broadcast %56 : tensor<1x128xi64> -> tensor<128x128xi64> loc(#loc16)
      %58 = arith.addi %34, %57 : tensor<128x128xi64> loc(#loc16)
      %59 = tt.addptr %32, %58 : tensor<128x128x!tt.ptr<f16>>, tensor<128x128xi64> loc(#loc16)
      %60 = tt.load %59 : tensor<128x128x!tt.ptr<f16>> loc(#loc16)
      %61 = tt.dot %31, %60, %cst_1 : tensor<256x128xf16> * tensor<128x128xf16> -> tensor<256x128xf32> loc(#loc19)
      %62 = "tt.reduce"(%61) <{axis = 1 : i32}> ({
      ^bb0(%arg27: f32 loc(callsite(#loc1 at #loc21)), %arg28: f32 loc(callsite(#loc1 at #loc21))):
        %87 = arith.maxnumf %arg27, %arg28 : f32 loc(#loc54)
        tt.reduce.return %87 : f32 loc(#loc48)
      }) : (tensor<256x128xf32>) -> tensor<256xf32> loc(#loc48)
      %63 = arith.maxnumf %arg24, %62 : tensor<256xf32> loc(#loc23)
      %64 = tt.expand_dims %63 {axis = 1 : i32} : tensor<256xf32> -> tensor<256x1xf32> loc(#loc24)
      %65 = tt.broadcast %64 : tensor<256x1xf32> -> tensor<256x128xf32> loc(#loc25)
      %66 = arith.subf %61, %65 : tensor<256x128xf32> loc(#loc25)
      %67 = math.exp2 %66 : tensor<256x128xf32> loc(#loc26)
      %68 = arith.subf %arg24, %63 : tensor<256xf32> loc(#loc27)
      %69 = math.exp2 %68 : tensor<256xf32> loc(#loc28)
      %70 = tt.expand_dims %69 {axis = 1 : i32} : tensor<256xf32> -> tensor<256x1xf32> loc(#loc29)
      %71 = tt.broadcast %70 : tensor<256x1xf32> -> tensor<256x128xf32> loc(#loc30)
      %72 = arith.mulf %arg22, %71 : tensor<256x128xf32> loc(#loc30)
      %73 = tt.splat %arg25 : i64 -> tensor<128xi64> loc(#loc17)
      %74 = arith.addi %73, %22 : tensor<128xi64> loc(#loc17)
      %75 = tt.expand_dims %74 {axis = 1 : i32} : tensor<128xi64> -> tensor<128x1xi64> loc(#loc17)
      %76 = tt.broadcast %75 : tensor<128x1xi64> -> tensor<128x128xi64> loc(#loc17)
      %77 = arith.addi %76, %39 : tensor<128x128xi64> loc(#loc17)
      %78 = tt.addptr %36, %77 : tensor<128x128x!tt.ptr<f16>>, tensor<128x128xi64> loc(#loc17)
      %79 = tt.load %78 : tensor<128x128x!tt.ptr<f16>> loc(#loc17)
      %80 = arith.truncf %67 : tensor<256x128xf32> to tensor<256x128xf16> loc(#loc31)
      %81 = tt.dot %80, %79, %72 : tensor<256x128xf16> * tensor<128x128xf16> -> tensor<256x128xf32> loc(#loc32)
      %82 = "tt.reduce"(%67) <{axis = 1 : i32}> ({
      ^bb0(%arg27: f32 loc(callsite(#loc1 at #loc34)), %arg28: f32 loc(callsite(#loc1 at #loc34))):
        %87 = arith.addf %arg27, %arg28 : f32 loc(#loc55)
        tt.reduce.return %87 : f32 loc(#loc51)
      }) : (tensor<256x128xf32>) -> tensor<256xf32> loc(#loc51)
      %83 = arith.mulf %arg23, %69 : tensor<256xf32> loc(#loc36)
      %84 = arith.addf %83, %82 : tensor<256xf32> loc(#loc37)
      %85 = arith.addi %arg25, %c128_i64 : i64 loc(#loc38)
      %86 = arith.addi %arg26, %c128_i64 : i64 loc(#loc39)
      scf.yield %81, %84, %63, %85, %86 : tensor<256x128xf32>, tensor<256xf32>, tensor<256xf32>, i64, i64 loc(#loc40)
    } {tt.divisibility_arg1 = dense<128> : tensor<1xi32>} loc(#loc18)
    %41 = tt.expand_dims %40#1 {axis = 1 : i32} : tensor<256xf32> -> tensor<256x1xf32> loc(#loc41)
    %42 = tt.broadcast %41 : tensor<256x1xf32> -> tensor<256x128xf32> loc(#loc42)
    %43 = arith.divf %40#0, %42 : tensor<256x128xf32> loc(#loc42)
    %44 = tt.addptr %arg5, %2 : !tt.ptr<f16>, i32 loc(#loc43)
    %45 = arith.extsi %arg17 : i32 to i64 loc(#loc44)
    %46 = arith.truncf %43 : tensor<256x128xf32> to tensor<256x128xf16> loc(#loc45)
    %47 = tt.splat %44 : !tt.ptr<f16> -> tensor<256x128x!tt.ptr<f16>> loc(#loc46)
    %48 = tt.splat %45 : i64 -> tensor<256x1xi64> loc(#loc46)
    %49 = arith.muli %17, %48 : tensor<256x1xi64> loc(#loc46)
    %50 = tt.broadcast %49 : tensor<256x1xi64> -> tensor<256x128xi64> loc(#loc46)
    %51 = arith.addi %50, %24 : tensor<256x128xi64> loc(#loc46)
    %52 = tt.addptr %47, %51 : tensor<256x128x!tt.ptr<f16>>, tensor<256x128xi64> loc(#loc46)
    tt.store %52, %46 : tensor<256x128x!tt.ptr<f16>> loc(#loc46)
    tt.return loc(#loc47)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":70:28)
#loc3 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":71:27)
#loc4 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":72:26)
#loc5 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":73:45)
#loc6 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":74:55)
#loc7 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":74:105)
#loc8 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":75:45)
#loc9 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":76:89)
#loc10 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":77:45)
#loc11 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":78:89)
#loc12 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":89:26)
#loc13 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":90:16)
#loc14 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":94:13)
#loc15 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":94:26)
#loc16 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":100:20)
#loc17 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":113:24)
#loc18 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":97:33)
#loc19 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":104:24)
#loc20 = loc("/triton/python/triton/language/standard.py":184:40)
#loc22 = loc("/triton/python/triton/language/standard.py":163:27)
#loc23 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":106:31)
#loc24 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":107:23)
#loc25 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":107:18)
#loc26 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":108:25)
#loc27 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":110:35)
#loc28 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":110:29)
#loc29 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":111:26)
#loc30 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":111:20)
#loc31 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":114:27)
#loc32 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":114:37)
#loc33 = loc("/triton/python/triton/language/standard.py":267:36)
#loc35 = loc("/triton/python/triton/language/standard.py":256:15)
#loc36 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":117:20)
#loc37 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":117:28)
#loc38 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":120:46)
#loc39 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":121:46)
#loc40 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":121:8)
#loc41 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":122:20)
#loc42 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":122:16)
#loc43 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":124:47)
#loc44 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":125:105)
#loc45 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":126:33)
#loc46 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":126:26)
#loc47 = loc("/amd_fork/triton/python/perf-kernels/06-fused-attention-fwd-transV.py":126:4)
#loc48 = loc(callsite(#loc20 at #loc21))
#loc50 = loc(callsite(#loc22 at #loc20))
#loc51 = loc(callsite(#loc33 at #loc34))
#loc53 = loc(callsite(#loc35 at #loc33))
#loc54 = loc(callsite(#loc50 at #loc21))
#loc55 = loc(callsite(#loc53 at #loc34))
