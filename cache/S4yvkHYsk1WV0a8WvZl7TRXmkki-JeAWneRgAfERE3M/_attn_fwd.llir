; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !4 float @llvm.amdgcn.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_attn_fwd(ptr addrspace(1) inreg nocapture readonly %0, ptr addrspace(1) inreg nocapture readonly %1, ptr addrspace(1) inreg nocapture readonly %2, float inreg %3, ptr addrspace(1) inreg nocapture readnone %4, ptr addrspace(1) inreg nocapture writeonly %5, i32 inreg %6, i32 inreg %7, i32 inreg %8, i32 inreg %9, i32 inreg %10, i32 inreg %11, i32 inreg %12, i32 inreg %13, i32 inreg %14, i32 inreg %15, i32 inreg %16, i32 inreg %17, i32 inreg %18, i32 inreg %19, i32 inreg %20) local_unnamed_addr #1 !dbg !7 {
  %22 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !8
  %23 = mul i32 %7, %22, !dbg !9
  %24 = sext i32 %23 to i64, !dbg !10
  %25 = getelementptr half, ptr addrspace(1) %0, i64 %24, !dbg !10
  %26 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !11
  %27 = shl i32 %26, 8, !dbg !12
  %28 = sext i32 %27 to i64, !dbg !13
  %29 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !14
  %30 = and i32 %29, 32, !dbg !14
  %31 = lshr i32 %29, 4, !dbg !14
  %32 = and i32 %31, 31, !dbg !14
  %33 = or disjoint i32 %32, 32, !dbg !14
  %34 = or disjoint i32 %32, 64, !dbg !14
  %35 = or disjoint i32 %32, 96, !dbg !14
  %36 = or disjoint i32 %32, 128, !dbg !14
  %37 = or disjoint i32 %32, 160, !dbg !14
  %38 = or disjoint i32 %32, 192, !dbg !14
  %39 = or disjoint i32 %32, 224, !dbg !14
  %40 = zext nneg i32 %32 to i64, !dbg !14
  %41 = zext nneg i32 %33 to i64, !dbg !14
  %42 = zext nneg i32 %34 to i64, !dbg !14
  %43 = zext nneg i32 %35 to i64, !dbg !14
  %44 = zext nneg i32 %36 to i64, !dbg !14
  %45 = zext nneg i32 %37 to i64, !dbg !14
  %46 = zext nneg i32 %38 to i64, !dbg !14
  %47 = zext nneg i32 %39 to i64, !dbg !14
  %48 = sext i32 %8 to i64, !dbg !13
  %49 = mul nsw i64 %48, %28, !dbg !14
  %50 = mul nsw i64 %48, %40, !dbg !14
  %51 = mul nsw i64 %48, %41, !dbg !14
  %52 = mul nsw i64 %48, %42, !dbg !14
  %53 = mul nsw i64 %48, %43, !dbg !14
  %54 = mul nsw i64 %48, %44, !dbg !14
  %55 = mul nsw i64 %48, %45, !dbg !14
  %56 = mul nsw i64 %48, %46, !dbg !14
  %57 = mul nsw i64 %48, %47, !dbg !14
  %58 = shl i32 %29, 3, !dbg !14
  %59 = and i32 %58, 120, !dbg !14
  %60 = zext nneg i32 %59 to i64, !dbg !14
  %61 = getelementptr half, ptr addrspace(1) %25, i64 %49, !dbg !14
  %62 = getelementptr half, ptr addrspace(1) %61, i64 %50, !dbg !14
  %63 = getelementptr half, ptr addrspace(1) %62, i64 %60, !dbg !14
  %64 = getelementptr half, ptr addrspace(1) %61, i64 %51, !dbg !14
  %65 = getelementptr half, ptr addrspace(1) %64, i64 %60, !dbg !14
  %66 = getelementptr half, ptr addrspace(1) %61, i64 %52, !dbg !14
  %67 = getelementptr half, ptr addrspace(1) %66, i64 %60, !dbg !14
  %68 = getelementptr half, ptr addrspace(1) %61, i64 %53, !dbg !14
  %69 = getelementptr half, ptr addrspace(1) %68, i64 %60, !dbg !14
  %70 = getelementptr half, ptr addrspace(1) %61, i64 %54, !dbg !14
  %71 = getelementptr half, ptr addrspace(1) %70, i64 %60, !dbg !14
  %72 = getelementptr half, ptr addrspace(1) %61, i64 %55, !dbg !14
  %73 = getelementptr half, ptr addrspace(1) %72, i64 %60, !dbg !14
  %74 = getelementptr half, ptr addrspace(1) %61, i64 %56, !dbg !14
  %75 = getelementptr half, ptr addrspace(1) %74, i64 %60, !dbg !14
  %76 = getelementptr half, ptr addrspace(1) %61, i64 %57, !dbg !14
  %77 = getelementptr half, ptr addrspace(1) %76, i64 %60, !dbg !14
  %unmaskedload = load <8 x half>, ptr addrspace(1) %63, align 16, !dbg !14
  %unmaskedload1 = load <8 x half>, ptr addrspace(1) %65, align 16, !dbg !14
  %unmaskedload2 = load <8 x half>, ptr addrspace(1) %67, align 16, !dbg !14
  %unmaskedload3 = load <8 x half>, ptr addrspace(1) %69, align 16, !dbg !14
  %unmaskedload4 = load <8 x half>, ptr addrspace(1) %71, align 16, !dbg !14
  %unmaskedload5 = load <8 x half>, ptr addrspace(1) %73, align 16, !dbg !14
  %unmaskedload6 = load <8 x half>, ptr addrspace(1) %75, align 16, !dbg !14
  %unmaskedload7 = load <8 x half>, ptr addrspace(1) %77, align 16, !dbg !14
  %78 = getelementptr half, ptr addrspace(1) %1, i64 %24, !dbg !15
  %79 = sext i32 %11 to i64, !dbg !16
  %80 = getelementptr half, ptr addrspace(1) %2, i64 %24, !dbg !17
  %81 = sext i32 %14 to i64, !dbg !18
  %82 = fmul float %3, 0x3FF7154760000000, !dbg !19
  %83 = shufflevector <8 x half> %unmaskedload, <8 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !20
  %84 = fpext <2 x half> %83 to <2 x float>, !dbg !20
  %85 = insertelement <2 x float> poison, float %82, i64 0, !dbg !20
  %86 = shufflevector <2 x float> %85, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !20
  %87 = fmul <2 x float> %86, %84, !dbg !20
  %88 = fptrunc <2 x float> %87 to <2 x half>, !dbg !21
  %89 = shufflevector <8 x half> %unmaskedload, <8 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !20
  %90 = fpext <2 x half> %89 to <2 x float>, !dbg !20
  %91 = fmul <2 x float> %86, %90, !dbg !20
  %92 = fptrunc <2 x float> %91 to <2 x half>, !dbg !21
  %93 = shufflevector <8 x half> %unmaskedload, <8 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !20
  %94 = fpext <2 x half> %93 to <2 x float>, !dbg !20
  %95 = fmul <2 x float> %86, %94, !dbg !20
  %96 = fptrunc <2 x float> %95 to <2 x half>, !dbg !21
  %97 = shufflevector <8 x half> %unmaskedload, <8 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !20
  %98 = fpext <2 x half> %97 to <2 x float>, !dbg !20
  %99 = fmul <2 x float> %86, %98, !dbg !20
  %100 = fptrunc <2 x float> %99 to <2 x half>, !dbg !21
  %101 = shufflevector <8 x half> %unmaskedload1, <8 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !20
  %102 = fpext <2 x half> %101 to <2 x float>, !dbg !20
  %103 = fmul <2 x float> %86, %102, !dbg !20
  %104 = fptrunc <2 x float> %103 to <2 x half>, !dbg !21
  %105 = shufflevector <8 x half> %unmaskedload1, <8 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !20
  %106 = fpext <2 x half> %105 to <2 x float>, !dbg !20
  %107 = fmul <2 x float> %86, %106, !dbg !20
  %108 = fptrunc <2 x float> %107 to <2 x half>, !dbg !21
  %109 = shufflevector <8 x half> %unmaskedload1, <8 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !20
  %110 = fpext <2 x half> %109 to <2 x float>, !dbg !20
  %111 = fmul <2 x float> %86, %110, !dbg !20
  %112 = fptrunc <2 x float> %111 to <2 x half>, !dbg !21
  %113 = shufflevector <8 x half> %unmaskedload1, <8 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !20
  %114 = fpext <2 x half> %113 to <2 x float>, !dbg !20
  %115 = fmul <2 x float> %86, %114, !dbg !20
  %116 = fptrunc <2 x float> %115 to <2 x half>, !dbg !21
  %117 = shufflevector <8 x half> %unmaskedload2, <8 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !20
  %118 = fpext <2 x half> %117 to <2 x float>, !dbg !20
  %119 = fmul <2 x float> %86, %118, !dbg !20
  %120 = fptrunc <2 x float> %119 to <2 x half>, !dbg !21
  %121 = shufflevector <8 x half> %unmaskedload2, <8 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !20
  %122 = fpext <2 x half> %121 to <2 x float>, !dbg !20
  %123 = fmul <2 x float> %86, %122, !dbg !20
  %124 = fptrunc <2 x float> %123 to <2 x half>, !dbg !21
  %125 = shufflevector <8 x half> %unmaskedload2, <8 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !20
  %126 = fpext <2 x half> %125 to <2 x float>, !dbg !20
  %127 = fmul <2 x float> %86, %126, !dbg !20
  %128 = fptrunc <2 x float> %127 to <2 x half>, !dbg !21
  %129 = shufflevector <8 x half> %unmaskedload2, <8 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !20
  %130 = fpext <2 x half> %129 to <2 x float>, !dbg !20
  %131 = fmul <2 x float> %86, %130, !dbg !20
  %132 = fptrunc <2 x float> %131 to <2 x half>, !dbg !21
  %133 = shufflevector <8 x half> %unmaskedload3, <8 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !20
  %134 = fpext <2 x half> %133 to <2 x float>, !dbg !20
  %135 = fmul <2 x float> %86, %134, !dbg !20
  %136 = fptrunc <2 x float> %135 to <2 x half>, !dbg !21
  %137 = shufflevector <8 x half> %unmaskedload3, <8 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !20
  %138 = fpext <2 x half> %137 to <2 x float>, !dbg !20
  %139 = fmul <2 x float> %86, %138, !dbg !20
  %140 = fptrunc <2 x float> %139 to <2 x half>, !dbg !21
  %141 = shufflevector <8 x half> %unmaskedload3, <8 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !20
  %142 = fpext <2 x half> %141 to <2 x float>, !dbg !20
  %143 = fmul <2 x float> %86, %142, !dbg !20
  %144 = fptrunc <2 x float> %143 to <2 x half>, !dbg !21
  %145 = shufflevector <8 x half> %unmaskedload3, <8 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !20
  %146 = fpext <2 x half> %145 to <2 x float>, !dbg !20
  %147 = fmul <2 x float> %86, %146, !dbg !20
  %148 = fptrunc <2 x float> %147 to <2 x half>, !dbg !21
  %149 = shufflevector <8 x half> %unmaskedload4, <8 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !20
  %150 = fpext <2 x half> %149 to <2 x float>, !dbg !20
  %151 = fmul <2 x float> %86, %150, !dbg !20
  %152 = fptrunc <2 x float> %151 to <2 x half>, !dbg !21
  %153 = shufflevector <8 x half> %unmaskedload4, <8 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !20
  %154 = fpext <2 x half> %153 to <2 x float>, !dbg !20
  %155 = fmul <2 x float> %86, %154, !dbg !20
  %156 = fptrunc <2 x float> %155 to <2 x half>, !dbg !21
  %157 = shufflevector <8 x half> %unmaskedload4, <8 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !20
  %158 = fpext <2 x half> %157 to <2 x float>, !dbg !20
  %159 = fmul <2 x float> %86, %158, !dbg !20
  %160 = fptrunc <2 x float> %159 to <2 x half>, !dbg !21
  %161 = shufflevector <8 x half> %unmaskedload4, <8 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !20
  %162 = fpext <2 x half> %161 to <2 x float>, !dbg !20
  %163 = fmul <2 x float> %86, %162, !dbg !20
  %164 = fptrunc <2 x float> %163 to <2 x half>, !dbg !21
  %165 = shufflevector <8 x half> %unmaskedload5, <8 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !20
  %166 = fpext <2 x half> %165 to <2 x float>, !dbg !20
  %167 = fmul <2 x float> %86, %166, !dbg !20
  %168 = fptrunc <2 x float> %167 to <2 x half>, !dbg !21
  %169 = shufflevector <8 x half> %unmaskedload5, <8 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !20
  %170 = fpext <2 x half> %169 to <2 x float>, !dbg !20
  %171 = fmul <2 x float> %86, %170, !dbg !20
  %172 = fptrunc <2 x float> %171 to <2 x half>, !dbg !21
  %173 = shufflevector <8 x half> %unmaskedload5, <8 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !20
  %174 = fpext <2 x half> %173 to <2 x float>, !dbg !20
  %175 = fmul <2 x float> %86, %174, !dbg !20
  %176 = fptrunc <2 x float> %175 to <2 x half>, !dbg !21
  %177 = shufflevector <8 x half> %unmaskedload5, <8 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !20
  %178 = fpext <2 x half> %177 to <2 x float>, !dbg !20
  %179 = fmul <2 x float> %86, %178, !dbg !20
  %180 = fptrunc <2 x float> %179 to <2 x half>, !dbg !21
  %181 = shufflevector <8 x half> %unmaskedload6, <8 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !20
  %182 = fpext <2 x half> %181 to <2 x float>, !dbg !20
  %183 = fmul <2 x float> %86, %182, !dbg !20
  %184 = fptrunc <2 x float> %183 to <2 x half>, !dbg !21
  %185 = shufflevector <8 x half> %unmaskedload6, <8 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !20
  %186 = fpext <2 x half> %185 to <2 x float>, !dbg !20
  %187 = fmul <2 x float> %86, %186, !dbg !20
  %188 = fptrunc <2 x float> %187 to <2 x half>, !dbg !21
  %189 = shufflevector <8 x half> %unmaskedload6, <8 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !20
  %190 = fpext <2 x half> %189 to <2 x float>, !dbg !20
  %191 = fmul <2 x float> %86, %190, !dbg !20
  %192 = fptrunc <2 x float> %191 to <2 x half>, !dbg !21
  %193 = shufflevector <8 x half> %unmaskedload6, <8 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !20
  %194 = fpext <2 x half> %193 to <2 x float>, !dbg !20
  %195 = fmul <2 x float> %86, %194, !dbg !20
  %196 = fptrunc <2 x float> %195 to <2 x half>, !dbg !21
  %197 = shufflevector <8 x half> %unmaskedload7, <8 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !20
  %198 = fpext <2 x half> %197 to <2 x float>, !dbg !20
  %199 = fmul <2 x float> %86, %198, !dbg !20
  %200 = fptrunc <2 x float> %199 to <2 x half>, !dbg !21
  %201 = shufflevector <8 x half> %unmaskedload7, <8 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !20
  %202 = fpext <2 x half> %201 to <2 x float>, !dbg !20
  %203 = fmul <2 x float> %86, %202, !dbg !20
  %204 = fptrunc <2 x float> %203 to <2 x half>, !dbg !21
  %205 = shufflevector <8 x half> %unmaskedload7, <8 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !20
  %206 = fpext <2 x half> %205 to <2 x float>, !dbg !20
  %207 = fmul <2 x float> %86, %206, !dbg !20
  %208 = fptrunc <2 x float> %207 to <2 x half>, !dbg !21
  %209 = shufflevector <8 x half> %unmaskedload7, <8 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !20
  %210 = fpext <2 x half> %209 to <2 x float>, !dbg !20
  %211 = fmul <2 x float> %86, %210, !dbg !20
  %212 = fptrunc <2 x float> %211 to <2 x half>, !dbg !21
  %213 = lshr i32 %29, 2, !dbg !21
  %214 = and i32 %213, 4, !dbg !21
  %215 = or disjoint i32 %59, %214, !dbg !21
  %216 = lshr exact i32 %30, 2, !dbg !21
  %217 = and i32 %213, 16, !dbg !21
  %218 = and i32 %213, 32, !dbg !21
  %219 = or disjoint i32 %217, %216, !dbg !21
  %220 = or disjoint i32 %219, %218, !dbg !21
  %221 = xor i32 %220, %215, !dbg !21
  %222 = shl nuw nsw i32 %32, 7, !dbg !21
  %223 = getelementptr half, ptr addrspace(3) @global_smem, i32 %221, !dbg !21
  %224 = getelementptr half, ptr addrspace(3) %223, i32 %222, !dbg !21
  %225 = shufflevector <2 x half> %88, <2 x half> %92, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %225, ptr addrspace(3) %224, align 8, !dbg !21
  %226 = or disjoint i32 %59, 4, !dbg !21
  %227 = or disjoint i32 %219, %214, !dbg !21
  %228 = or disjoint i32 %227, %218, !dbg !21
  %229 = xor i32 %228, %226, !dbg !21
  %230 = getelementptr half, ptr addrspace(3) @global_smem, i32 %229, !dbg !21
  %231 = getelementptr half, ptr addrspace(3) %230, i32 %222, !dbg !21
  %232 = shufflevector <2 x half> %96, <2 x half> %100, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %232, ptr addrspace(3) %231, align 8, !dbg !21
  %233 = or disjoint i32 %222, 4096, !dbg !21
  %234 = getelementptr half, ptr addrspace(3) %223, i32 %233, !dbg !21
  %235 = shufflevector <2 x half> %104, <2 x half> %108, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %235, ptr addrspace(3) %234, align 8, !dbg !21
  %236 = getelementptr half, ptr addrspace(3) %230, i32 %233, !dbg !21
  %237 = shufflevector <2 x half> %112, <2 x half> %116, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %237, ptr addrspace(3) %236, align 8, !dbg !21
  %238 = or disjoint i32 %222, 8192, !dbg !21
  %239 = getelementptr half, ptr addrspace(3) %223, i32 %238, !dbg !21
  %240 = shufflevector <2 x half> %120, <2 x half> %124, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %240, ptr addrspace(3) %239, align 8, !dbg !21
  %241 = getelementptr half, ptr addrspace(3) %230, i32 %238, !dbg !21
  %242 = shufflevector <2 x half> %128, <2 x half> %132, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %242, ptr addrspace(3) %241, align 8, !dbg !21
  %243 = or disjoint i32 %222, 12288, !dbg !21
  %244 = getelementptr half, ptr addrspace(3) %223, i32 %243, !dbg !21
  %245 = shufflevector <2 x half> %136, <2 x half> %140, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %245, ptr addrspace(3) %244, align 8, !dbg !21
  %246 = getelementptr half, ptr addrspace(3) %230, i32 %243, !dbg !21
  %247 = shufflevector <2 x half> %144, <2 x half> %148, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %247, ptr addrspace(3) %246, align 8, !dbg !21
  %248 = or disjoint i32 %222, 16384, !dbg !21
  %249 = getelementptr half, ptr addrspace(3) %223, i32 %248, !dbg !21
  %250 = shufflevector <2 x half> %152, <2 x half> %156, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %250, ptr addrspace(3) %249, align 8, !dbg !21
  %251 = getelementptr half, ptr addrspace(3) %230, i32 %248, !dbg !21
  %252 = shufflevector <2 x half> %160, <2 x half> %164, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %252, ptr addrspace(3) %251, align 8, !dbg !21
  %253 = or disjoint i32 %222, 20480, !dbg !21
  %254 = getelementptr half, ptr addrspace(3) %223, i32 %253, !dbg !21
  %255 = shufflevector <2 x half> %168, <2 x half> %172, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %255, ptr addrspace(3) %254, align 8, !dbg !21
  %256 = getelementptr half, ptr addrspace(3) %230, i32 %253, !dbg !21
  %257 = shufflevector <2 x half> %176, <2 x half> %180, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %257, ptr addrspace(3) %256, align 8, !dbg !21
  %258 = or disjoint i32 %222, 24576, !dbg !21
  %259 = getelementptr half, ptr addrspace(3) %223, i32 %258, !dbg !21
  %260 = shufflevector <2 x half> %184, <2 x half> %188, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %260, ptr addrspace(3) %259, align 8, !dbg !21
  %261 = getelementptr half, ptr addrspace(3) %230, i32 %258, !dbg !21
  %262 = shufflevector <2 x half> %192, <2 x half> %196, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %262, ptr addrspace(3) %261, align 8, !dbg !21
  %263 = or disjoint i32 %222, 28672, !dbg !21
  %264 = getelementptr half, ptr addrspace(3) %223, i32 %263, !dbg !21
  %265 = shufflevector <2 x half> %200, <2 x half> %204, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %265, ptr addrspace(3) %264, align 8, !dbg !21
  %266 = getelementptr half, ptr addrspace(3) %230, i32 %263, !dbg !21
  %267 = shufflevector <2 x half> %208, <2 x half> %212, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %267, ptr addrspace(3) %266, align 8, !dbg !21
  fence syncscope("workgroup") release, !dbg !21
  tail call void @llvm.amdgcn.s.barrier(), !dbg !21
  fence syncscope("workgroup") acquire, !dbg !21
  %268 = lshr i32 %29, 1, !dbg !21
  %269 = and i32 %268, 224, !dbg !21
  %270 = and i32 %29, 31, !dbg !21
  %271 = lshr i32 %29, 5, !dbg !21
  %272 = and i32 %271, 1, !dbg !21
  %273 = or disjoint i32 %269, %270, !dbg !21
  %274 = and i32 %29, 15, !dbg !21
  %275 = xor i32 %272, %274, !dbg !21
  %276 = shl nuw nsw i32 %275, 2, !dbg !21
  %277 = shl nuw nsw i32 %273, 7, !dbg !21
  %278 = or disjoint i32 %277, %276, !dbg !21
  %279 = or disjoint i32 %272, 2, !dbg !21
  %280 = xor i32 %279, %274, !dbg !21
  %281 = shl nuw nsw i32 %280, 2, !dbg !21
  %282 = or disjoint i32 %281, %277, !dbg !21
  %283 = or disjoint i32 %272, 4, !dbg !21
  %284 = xor i32 %283, %274, !dbg !21
  %285 = shl nuw nsw i32 %284, 2, !dbg !21
  %286 = or disjoint i32 %285, %277, !dbg !21
  %287 = or disjoint i32 %272, 6, !dbg !21
  %288 = xor i32 %287, %274, !dbg !21
  %289 = shl nuw nsw i32 %288, 2, !dbg !21
  %290 = or disjoint i32 %289, %277, !dbg !21
  %291 = or disjoint i32 %272, 8, !dbg !21
  %292 = xor i32 %291, %274, !dbg !21
  %293 = shl nuw nsw i32 %292, 2, !dbg !21
  %294 = or disjoint i32 %293, %277, !dbg !21
  %295 = or disjoint i32 %272, 10, !dbg !21
  %296 = xor i32 %295, %274, !dbg !21
  %297 = shl nuw nsw i32 %296, 2, !dbg !21
  %298 = or disjoint i32 %297, %277, !dbg !21
  %299 = or disjoint i32 %272, 12, !dbg !21
  %300 = xor i32 %299, %274, !dbg !21
  %301 = shl nuw nsw i32 %300, 2, !dbg !21
  %302 = or disjoint i32 %301, %277, !dbg !21
  %303 = or disjoint i32 %272, 14, !dbg !21
  %304 = xor i32 %303, %274, !dbg !21
  %305 = shl nuw nsw i32 %304, 2, !dbg !21
  %306 = or disjoint i32 %305, %277, !dbg !21
  %307 = or disjoint i32 %272, 16, !dbg !21
  %308 = xor i32 %307, %274, !dbg !21
  %309 = shl nuw nsw i32 %308, 2, !dbg !21
  %310 = or disjoint i32 %309, %277, !dbg !21
  %311 = or disjoint i32 %272, 18, !dbg !21
  %312 = xor i32 %311, %274, !dbg !21
  %313 = shl nuw nsw i32 %312, 2, !dbg !21
  %314 = or disjoint i32 %313, %277, !dbg !21
  %315 = or disjoint i32 %272, 20, !dbg !21
  %316 = xor i32 %315, %274, !dbg !21
  %317 = shl nuw nsw i32 %316, 2, !dbg !21
  %318 = or disjoint i32 %317, %277, !dbg !21
  %319 = or disjoint i32 %272, 22, !dbg !21
  %320 = xor i32 %319, %274, !dbg !21
  %321 = shl nuw nsw i32 %320, 2, !dbg !21
  %322 = or disjoint i32 %321, %277, !dbg !21
  %323 = or disjoint i32 %272, 24, !dbg !21
  %324 = xor i32 %323, %274, !dbg !21
  %325 = shl nuw nsw i32 %324, 2, !dbg !21
  %326 = or disjoint i32 %325, %277, !dbg !21
  %327 = or disjoint i32 %272, 26, !dbg !21
  %328 = xor i32 %327, %274, !dbg !21
  %329 = shl nuw nsw i32 %328, 2, !dbg !21
  %330 = or disjoint i32 %329, %277, !dbg !21
  %331 = or disjoint i32 %272, 28, !dbg !21
  %332 = xor i32 %331, %274, !dbg !21
  %333 = shl nuw nsw i32 %332, 2, !dbg !21
  %334 = or disjoint i32 %333, %277, !dbg !21
  %335 = or disjoint i32 %272, 30, !dbg !21
  %336 = xor i32 %335, %274, !dbg !21
  %337 = shl nuw nsw i32 %336, 2, !dbg !21
  %338 = or disjoint i32 %337, %277, !dbg !21
  %339 = getelementptr half, ptr addrspace(3) @global_smem, i32 %278, !dbg !21
  %340 = load <4 x half>, ptr addrspace(3) %339, align 8, !dbg !21
  %341 = getelementptr half, ptr addrspace(3) @global_smem, i32 %282, !dbg !21
  %342 = load <4 x half>, ptr addrspace(3) %341, align 8, !dbg !21
  %343 = getelementptr half, ptr addrspace(3) @global_smem, i32 %286, !dbg !21
  %344 = load <4 x half>, ptr addrspace(3) %343, align 8, !dbg !21
  %345 = getelementptr half, ptr addrspace(3) @global_smem, i32 %290, !dbg !21
  %346 = load <4 x half>, ptr addrspace(3) %345, align 8, !dbg !21
  %347 = getelementptr half, ptr addrspace(3) @global_smem, i32 %294, !dbg !21
  %348 = load <4 x half>, ptr addrspace(3) %347, align 8, !dbg !21
  %349 = getelementptr half, ptr addrspace(3) @global_smem, i32 %298, !dbg !21
  %350 = load <4 x half>, ptr addrspace(3) %349, align 8, !dbg !21
  %351 = getelementptr half, ptr addrspace(3) @global_smem, i32 %302, !dbg !21
  %352 = load <4 x half>, ptr addrspace(3) %351, align 8, !dbg !21
  %353 = getelementptr half, ptr addrspace(3) @global_smem, i32 %306, !dbg !21
  %354 = load <4 x half>, ptr addrspace(3) %353, align 8, !dbg !21
  %355 = getelementptr half, ptr addrspace(3) @global_smem, i32 %310, !dbg !21
  %356 = load <4 x half>, ptr addrspace(3) %355, align 8, !dbg !21
  %357 = getelementptr half, ptr addrspace(3) @global_smem, i32 %314, !dbg !21
  %358 = load <4 x half>, ptr addrspace(3) %357, align 8, !dbg !21
  %359 = getelementptr half, ptr addrspace(3) @global_smem, i32 %318, !dbg !21
  %360 = load <4 x half>, ptr addrspace(3) %359, align 8, !dbg !21
  %361 = getelementptr half, ptr addrspace(3) @global_smem, i32 %322, !dbg !21
  %362 = load <4 x half>, ptr addrspace(3) %361, align 8, !dbg !21
  %363 = getelementptr half, ptr addrspace(3) @global_smem, i32 %326, !dbg !21
  %364 = load <4 x half>, ptr addrspace(3) %363, align 8, !dbg !21
  %365 = getelementptr half, ptr addrspace(3) @global_smem, i32 %330, !dbg !21
  %366 = load <4 x half>, ptr addrspace(3) %365, align 8, !dbg !21
  %367 = getelementptr half, ptr addrspace(3) @global_smem, i32 %334, !dbg !21
  %368 = load <4 x half>, ptr addrspace(3) %367, align 8, !dbg !21
  %369 = getelementptr half, ptr addrspace(3) @global_smem, i32 %338, !dbg !21
  %370 = load <4 x half>, ptr addrspace(3) %369, align 8, !dbg !21
  %371 = mul nsw i64 %81, %40, !dbg !22
  %372 = mul nsw i64 %81, %41, !dbg !22
  %373 = mul nsw i64 %81, %42, !dbg !22
  %374 = mul nsw i64 %81, %43, !dbg !22
  %375 = icmp sgt i32 %20, 0, !dbg !23
  br i1 %375, label %.lr.ph, label %._crit_edge, !dbg !23

.lr.ph:                                           ; preds = %21
  %376 = mul nsw i64 %79, %40
  %377 = mul nsw i64 %79, %41
  %378 = mul nsw i64 %79, %42
  %379 = mul nsw i64 %79, %43
  %380 = shl nuw nsw i32 %270, 7
  %381 = or disjoint i32 %276, %380
  %382 = or disjoint i32 %281, %380
  %383 = or disjoint i32 %285, %380
  %384 = or disjoint i32 %289, %380
  %385 = or disjoint i32 %293, %380
  %386 = or disjoint i32 %297, %380
  %387 = or disjoint i32 %301, %380
  %388 = or disjoint i32 %305, %380
  %389 = or disjoint i32 %309, %380
  %390 = or disjoint i32 %313, %380
  %391 = or disjoint i32 %317, %380
  %392 = or disjoint i32 %321, %380
  %393 = or disjoint i32 %325, %380
  %394 = or disjoint i32 %329, %380
  %395 = or disjoint i32 %333, %380
  %396 = or disjoint i32 %337, %380
  %397 = or disjoint i32 %380, 4096
  %398 = or disjoint i32 %276, %397
  %399 = or disjoint i32 %281, %397
  %400 = or disjoint i32 %285, %397
  %401 = or disjoint i32 %289, %397
  %402 = or disjoint i32 %293, %397
  %403 = or disjoint i32 %297, %397
  %404 = or disjoint i32 %301, %397
  %405 = or disjoint i32 %305, %397
  %406 = or disjoint i32 %309, %397
  %407 = or disjoint i32 %313, %397
  %408 = or disjoint i32 %317, %397
  %409 = or disjoint i32 %321, %397
  %410 = or disjoint i32 %325, %397
  %411 = or disjoint i32 %329, %397
  %412 = or disjoint i32 %333, %397
  %413 = or disjoint i32 %337, %397
  %414 = or disjoint i32 %380, 8192
  %415 = or disjoint i32 %276, %414
  %416 = or disjoint i32 %281, %414
  %417 = or disjoint i32 %285, %414
  %418 = or disjoint i32 %289, %414
  %419 = or disjoint i32 %293, %414
  %420 = or disjoint i32 %297, %414
  %421 = or disjoint i32 %301, %414
  %422 = or disjoint i32 %305, %414
  %423 = or disjoint i32 %309, %414
  %424 = or disjoint i32 %313, %414
  %425 = or disjoint i32 %317, %414
  %426 = or disjoint i32 %321, %414
  %427 = or disjoint i32 %325, %414
  %428 = or disjoint i32 %329, %414
  %429 = or disjoint i32 %333, %414
  %430 = or disjoint i32 %337, %414
  %431 = or disjoint i32 %380, 12288
  %432 = or disjoint i32 %276, %431
  %433 = or disjoint i32 %281, %431
  %434 = or disjoint i32 %285, %431
  %435 = or disjoint i32 %289, %431
  %436 = or disjoint i32 %293, %431
  %437 = or disjoint i32 %297, %431
  %438 = or disjoint i32 %301, %431
  %439 = or disjoint i32 %305, %431
  %440 = or disjoint i32 %309, %431
  %441 = or disjoint i32 %313, %431
  %442 = or disjoint i32 %317, %431
  %443 = or disjoint i32 %321, %431
  %444 = or disjoint i32 %325, %431
  %445 = or disjoint i32 %329, %431
  %446 = or disjoint i32 %333, %431
  %447 = or disjoint i32 %337, %431
  %448 = getelementptr half, ptr addrspace(3) @global_smem, i32 %381
  %449 = getelementptr half, ptr addrspace(3) @global_smem, i32 %382
  %450 = getelementptr half, ptr addrspace(3) @global_smem, i32 %383
  %451 = getelementptr half, ptr addrspace(3) @global_smem, i32 %384
  %452 = getelementptr half, ptr addrspace(3) @global_smem, i32 %385
  %453 = getelementptr half, ptr addrspace(3) @global_smem, i32 %386
  %454 = getelementptr half, ptr addrspace(3) @global_smem, i32 %387
  %455 = getelementptr half, ptr addrspace(3) @global_smem, i32 %388
  %456 = getelementptr half, ptr addrspace(3) @global_smem, i32 %389
  %457 = getelementptr half, ptr addrspace(3) @global_smem, i32 %390
  %458 = getelementptr half, ptr addrspace(3) @global_smem, i32 %391
  %459 = getelementptr half, ptr addrspace(3) @global_smem, i32 %392
  %460 = getelementptr half, ptr addrspace(3) @global_smem, i32 %393
  %461 = getelementptr half, ptr addrspace(3) @global_smem, i32 %394
  %462 = getelementptr half, ptr addrspace(3) @global_smem, i32 %395
  %463 = getelementptr half, ptr addrspace(3) @global_smem, i32 %396
  %464 = getelementptr half, ptr addrspace(3) @global_smem, i32 %398
  %465 = getelementptr half, ptr addrspace(3) @global_smem, i32 %399
  %466 = getelementptr half, ptr addrspace(3) @global_smem, i32 %400
  %467 = getelementptr half, ptr addrspace(3) @global_smem, i32 %401
  %468 = getelementptr half, ptr addrspace(3) @global_smem, i32 %402
  %469 = getelementptr half, ptr addrspace(3) @global_smem, i32 %403
  %470 = getelementptr half, ptr addrspace(3) @global_smem, i32 %404
  %471 = getelementptr half, ptr addrspace(3) @global_smem, i32 %405
  %472 = getelementptr half, ptr addrspace(3) @global_smem, i32 %406
  %473 = getelementptr half, ptr addrspace(3) @global_smem, i32 %407
  %474 = getelementptr half, ptr addrspace(3) @global_smem, i32 %408
  %475 = getelementptr half, ptr addrspace(3) @global_smem, i32 %409
  %476 = getelementptr half, ptr addrspace(3) @global_smem, i32 %410
  %477 = getelementptr half, ptr addrspace(3) @global_smem, i32 %411
  %478 = getelementptr half, ptr addrspace(3) @global_smem, i32 %412
  %479 = getelementptr half, ptr addrspace(3) @global_smem, i32 %413
  %480 = getelementptr half, ptr addrspace(3) @global_smem, i32 %415
  %481 = getelementptr half, ptr addrspace(3) @global_smem, i32 %416
  %482 = getelementptr half, ptr addrspace(3) @global_smem, i32 %417
  %483 = getelementptr half, ptr addrspace(3) @global_smem, i32 %418
  %484 = getelementptr half, ptr addrspace(3) @global_smem, i32 %419
  %485 = getelementptr half, ptr addrspace(3) @global_smem, i32 %420
  %486 = getelementptr half, ptr addrspace(3) @global_smem, i32 %421
  %487 = getelementptr half, ptr addrspace(3) @global_smem, i32 %422
  %488 = getelementptr half, ptr addrspace(3) @global_smem, i32 %423
  %489 = getelementptr half, ptr addrspace(3) @global_smem, i32 %424
  %490 = getelementptr half, ptr addrspace(3) @global_smem, i32 %425
  %491 = getelementptr half, ptr addrspace(3) @global_smem, i32 %426
  %492 = getelementptr half, ptr addrspace(3) @global_smem, i32 %427
  %493 = getelementptr half, ptr addrspace(3) @global_smem, i32 %428
  %494 = getelementptr half, ptr addrspace(3) @global_smem, i32 %429
  %495 = getelementptr half, ptr addrspace(3) @global_smem, i32 %430
  %496 = getelementptr half, ptr addrspace(3) @global_smem, i32 %432
  %497 = getelementptr half, ptr addrspace(3) @global_smem, i32 %433
  %498 = getelementptr half, ptr addrspace(3) @global_smem, i32 %434
  %499 = getelementptr half, ptr addrspace(3) @global_smem, i32 %435
  %500 = getelementptr half, ptr addrspace(3) @global_smem, i32 %436
  %501 = getelementptr half, ptr addrspace(3) @global_smem, i32 %437
  %502 = getelementptr half, ptr addrspace(3) @global_smem, i32 %438
  %503 = getelementptr half, ptr addrspace(3) @global_smem, i32 %439
  %504 = getelementptr half, ptr addrspace(3) @global_smem, i32 %440
  %505 = getelementptr half, ptr addrspace(3) @global_smem, i32 %441
  %506 = getelementptr half, ptr addrspace(3) @global_smem, i32 %442
  %507 = getelementptr half, ptr addrspace(3) @global_smem, i32 %443
  %508 = getelementptr half, ptr addrspace(3) @global_smem, i32 %444
  %509 = getelementptr half, ptr addrspace(3) @global_smem, i32 %445
  %510 = getelementptr half, ptr addrspace(3) @global_smem, i32 %446
  %511 = getelementptr half, ptr addrspace(3) @global_smem, i32 %447
  %512 = shl i32 %29, 2
  %513 = xor i32 %512, 128
  br label %514, !dbg !23

514:                                              ; preds = %.lr.ph, %514
  %515 = phi i64 [ 0, %.lr.ph ], [ %1386, %514 ]
  %516 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %836, %514 ]
  %517 = phi float [ 1.000000e+00, %.lr.ph ], [ %1385, %514 ]
  %518 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1388, %514 ]
  %519 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1389, %514 ]
  %520 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1390, %514 ]
  %521 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1391, %514 ]
  %522 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1392, %514 ]
  %523 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1393, %514 ]
  %524 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1394, %514 ]
  %525 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1395, %514 ]
  %526 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1396, %514 ]
  %527 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1397, %514 ]
  %528 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1398, %514 ]
  %529 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1399, %514 ]
  %530 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1400, %514 ]
  %531 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1401, %514 ]
  %532 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1402, %514 ]
  %533 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1403, %514 ]
  %534 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1404, %514 ]
  %535 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1405, %514 ]
  %536 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1406, %514 ]
  %537 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1407, %514 ]
  %538 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1408, %514 ]
  %539 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1409, %514 ]
  %540 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1410, %514 ]
  %541 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1411, %514 ]
  %542 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1412, %514 ]
  %543 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1413, %514 ]
  %544 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1414, %514 ]
  %545 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1415, %514 ]
  %546 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1416, %514 ]
  %547 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1417, %514 ]
  %548 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1418, %514 ]
  %549 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1419, %514 ]
  %550 = mul i64 %515, %79, !dbg !24
  %551 = getelementptr half, ptr addrspace(1) %78, i64 %550, !dbg !24
  %552 = getelementptr half, ptr addrspace(1) %551, i64 %376, !dbg !24
  %553 = getelementptr half, ptr addrspace(1) %552, i64 %60, !dbg !24
  %554 = getelementptr half, ptr addrspace(1) %551, i64 %377, !dbg !24
  %555 = getelementptr half, ptr addrspace(1) %554, i64 %60, !dbg !24
  %556 = getelementptr half, ptr addrspace(1) %551, i64 %378, !dbg !24
  %557 = getelementptr half, ptr addrspace(1) %556, i64 %60, !dbg !24
  %558 = getelementptr half, ptr addrspace(1) %551, i64 %379, !dbg !24
  %559 = getelementptr half, ptr addrspace(1) %558, i64 %60, !dbg !24
  %unmaskedload8 = load <8 x half>, ptr addrspace(1) %553, align 16, !dbg !24
  %unmaskedload9 = load <8 x half>, ptr addrspace(1) %555, align 16, !dbg !24
  %unmaskedload10 = load <8 x half>, ptr addrspace(1) %557, align 16, !dbg !24
  %unmaskedload11 = load <8 x half>, ptr addrspace(1) %559, align 16, !dbg !24
  %560 = getelementptr half, ptr addrspace(1) %80, i64 %515, !dbg !22
  %561 = getelementptr half, ptr addrspace(1) %560, i64 %371, !dbg !22
  %562 = getelementptr half, ptr addrspace(1) %561, i64 %60, !dbg !22
  %563 = getelementptr half, ptr addrspace(1) %560, i64 %372, !dbg !22
  %564 = getelementptr half, ptr addrspace(1) %563, i64 %60, !dbg !22
  %565 = getelementptr half, ptr addrspace(1) %560, i64 %373, !dbg !22
  %566 = getelementptr half, ptr addrspace(1) %565, i64 %60, !dbg !22
  %567 = getelementptr half, ptr addrspace(1) %560, i64 %374, !dbg !22
  %568 = getelementptr half, ptr addrspace(1) %567, i64 %60, !dbg !22
  %unmaskedload12 = load <8 x half>, ptr addrspace(1) %562, align 16, !dbg !22
  %unmaskedload13 = load <8 x half>, ptr addrspace(1) %564, align 16, !dbg !22
  %unmaskedload14 = load <8 x half>, ptr addrspace(1) %566, align 16, !dbg !22
  %unmaskedload15 = load <8 x half>, ptr addrspace(1) %568, align 16, !dbg !22
  fence syncscope("workgroup") release, !dbg !24
  tail call void @llvm.amdgcn.s.barrier(), !dbg !24
  fence syncscope("workgroup") acquire, !dbg !24
  %569 = shufflevector <8 x half> %unmaskedload8, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !24
  store <4 x half> %569, ptr addrspace(3) %224, align 8, !dbg !24
  %570 = shufflevector <8 x half> %unmaskedload8, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !24
  store <4 x half> %570, ptr addrspace(3) %231, align 8, !dbg !24
  %571 = shufflevector <8 x half> %unmaskedload9, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !24
  store <4 x half> %571, ptr addrspace(3) %234, align 8, !dbg !24
  %572 = shufflevector <8 x half> %unmaskedload9, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !24
  store <4 x half> %572, ptr addrspace(3) %236, align 8, !dbg !24
  %573 = shufflevector <8 x half> %unmaskedload10, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !24
  store <4 x half> %573, ptr addrspace(3) %239, align 8, !dbg !24
  %574 = shufflevector <8 x half> %unmaskedload10, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !24
  store <4 x half> %574, ptr addrspace(3) %241, align 8, !dbg !24
  %575 = shufflevector <8 x half> %unmaskedload11, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !24
  store <4 x half> %575, ptr addrspace(3) %244, align 8, !dbg !24
  %576 = shufflevector <8 x half> %unmaskedload11, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !24
  store <4 x half> %576, ptr addrspace(3) %246, align 8, !dbg !24
  fence syncscope("workgroup") release, !dbg !24
  tail call void @llvm.amdgcn.s.barrier(), !dbg !24
  fence syncscope("workgroup") acquire, !dbg !24
  %577 = load <4 x half>, ptr addrspace(3) %448, align 8, !dbg !24
  %578 = load <4 x half>, ptr addrspace(3) %449, align 8, !dbg !24
  %579 = load <4 x half>, ptr addrspace(3) %450, align 8, !dbg !24
  %580 = load <4 x half>, ptr addrspace(3) %451, align 8, !dbg !24
  %581 = load <4 x half>, ptr addrspace(3) %452, align 8, !dbg !24
  %582 = load <4 x half>, ptr addrspace(3) %453, align 8, !dbg !24
  %583 = load <4 x half>, ptr addrspace(3) %454, align 8, !dbg !24
  %584 = load <4 x half>, ptr addrspace(3) %455, align 8, !dbg !24
  %585 = load <4 x half>, ptr addrspace(3) %456, align 8, !dbg !24
  %586 = load <4 x half>, ptr addrspace(3) %457, align 8, !dbg !24
  %587 = load <4 x half>, ptr addrspace(3) %458, align 8, !dbg !24
  %588 = load <4 x half>, ptr addrspace(3) %459, align 8, !dbg !24
  %589 = load <4 x half>, ptr addrspace(3) %460, align 8, !dbg !24
  %590 = load <4 x half>, ptr addrspace(3) %461, align 8, !dbg !24
  %591 = load <4 x half>, ptr addrspace(3) %462, align 8, !dbg !24
  %592 = load <4 x half>, ptr addrspace(3) %463, align 8, !dbg !24
  %593 = load <4 x half>, ptr addrspace(3) %464, align 8, !dbg !24
  %594 = load <4 x half>, ptr addrspace(3) %465, align 8, !dbg !24
  %595 = load <4 x half>, ptr addrspace(3) %466, align 8, !dbg !24
  %596 = load <4 x half>, ptr addrspace(3) %467, align 8, !dbg !24
  %597 = load <4 x half>, ptr addrspace(3) %468, align 8, !dbg !24
  %598 = load <4 x half>, ptr addrspace(3) %469, align 8, !dbg !24
  %599 = load <4 x half>, ptr addrspace(3) %470, align 8, !dbg !24
  %600 = load <4 x half>, ptr addrspace(3) %471, align 8, !dbg !24
  %601 = load <4 x half>, ptr addrspace(3) %472, align 8, !dbg !24
  %602 = load <4 x half>, ptr addrspace(3) %473, align 8, !dbg !24
  %603 = load <4 x half>, ptr addrspace(3) %474, align 8, !dbg !24
  %604 = load <4 x half>, ptr addrspace(3) %475, align 8, !dbg !24
  %605 = load <4 x half>, ptr addrspace(3) %476, align 8, !dbg !24
  %606 = load <4 x half>, ptr addrspace(3) %477, align 8, !dbg !24
  %607 = load <4 x half>, ptr addrspace(3) %478, align 8, !dbg !24
  %608 = load <4 x half>, ptr addrspace(3) %479, align 8, !dbg !24
  %609 = load <4 x half>, ptr addrspace(3) %480, align 8, !dbg !24
  %610 = load <4 x half>, ptr addrspace(3) %481, align 8, !dbg !24
  %611 = load <4 x half>, ptr addrspace(3) %482, align 8, !dbg !24
  %612 = load <4 x half>, ptr addrspace(3) %483, align 8, !dbg !24
  %613 = load <4 x half>, ptr addrspace(3) %484, align 8, !dbg !24
  %614 = load <4 x half>, ptr addrspace(3) %485, align 8, !dbg !24
  %615 = load <4 x half>, ptr addrspace(3) %486, align 8, !dbg !24
  %616 = load <4 x half>, ptr addrspace(3) %487, align 8, !dbg !24
  %617 = load <4 x half>, ptr addrspace(3) %488, align 8, !dbg !24
  %618 = load <4 x half>, ptr addrspace(3) %489, align 8, !dbg !24
  %619 = load <4 x half>, ptr addrspace(3) %490, align 8, !dbg !24
  %620 = load <4 x half>, ptr addrspace(3) %491, align 8, !dbg !24
  %621 = load <4 x half>, ptr addrspace(3) %492, align 8, !dbg !24
  %622 = load <4 x half>, ptr addrspace(3) %493, align 8, !dbg !24
  %623 = load <4 x half>, ptr addrspace(3) %494, align 8, !dbg !24
  %624 = load <4 x half>, ptr addrspace(3) %495, align 8, !dbg !24
  %625 = load <4 x half>, ptr addrspace(3) %496, align 8, !dbg !24
  %626 = load <4 x half>, ptr addrspace(3) %497, align 8, !dbg !24
  %627 = load <4 x half>, ptr addrspace(3) %498, align 8, !dbg !24
  %628 = load <4 x half>, ptr addrspace(3) %499, align 8, !dbg !24
  %629 = load <4 x half>, ptr addrspace(3) %500, align 8, !dbg !24
  %630 = load <4 x half>, ptr addrspace(3) %501, align 8, !dbg !24
  %631 = load <4 x half>, ptr addrspace(3) %502, align 8, !dbg !24
  %632 = load <4 x half>, ptr addrspace(3) %503, align 8, !dbg !24
  %633 = load <4 x half>, ptr addrspace(3) %504, align 8, !dbg !24
  %634 = load <4 x half>, ptr addrspace(3) %505, align 8, !dbg !24
  %635 = load <4 x half>, ptr addrspace(3) %506, align 8, !dbg !24
  %636 = load <4 x half>, ptr addrspace(3) %507, align 8, !dbg !24
  %637 = load <4 x half>, ptr addrspace(3) %508, align 8, !dbg !24
  %638 = load <4 x half>, ptr addrspace(3) %509, align 8, !dbg !24
  %639 = load <4 x half>, ptr addrspace(3) %510, align 8, !dbg !24
  %640 = load <4 x half>, ptr addrspace(3) %511, align 8, !dbg !24
  %641 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %577, <4 x half> %340, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !25
  %642 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %578, <4 x half> %342, <16 x float> %641, i32 0, i32 0, i32 0), !dbg !25
  %643 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %579, <4 x half> %344, <16 x float> %642, i32 0, i32 0, i32 0), !dbg !25
  %644 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %580, <4 x half> %346, <16 x float> %643, i32 0, i32 0, i32 0), !dbg !25
  %645 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %581, <4 x half> %348, <16 x float> %644, i32 0, i32 0, i32 0), !dbg !25
  %646 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %582, <4 x half> %350, <16 x float> %645, i32 0, i32 0, i32 0), !dbg !25
  %647 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %583, <4 x half> %352, <16 x float> %646, i32 0, i32 0, i32 0), !dbg !25
  %648 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %584, <4 x half> %354, <16 x float> %647, i32 0, i32 0, i32 0), !dbg !25
  %649 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %585, <4 x half> %356, <16 x float> %648, i32 0, i32 0, i32 0), !dbg !25
  %650 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %586, <4 x half> %358, <16 x float> %649, i32 0, i32 0, i32 0), !dbg !25
  %651 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %587, <4 x half> %360, <16 x float> %650, i32 0, i32 0, i32 0), !dbg !25
  %652 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %588, <4 x half> %362, <16 x float> %651, i32 0, i32 0, i32 0), !dbg !25
  %653 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %589, <4 x half> %364, <16 x float> %652, i32 0, i32 0, i32 0), !dbg !25
  %654 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %590, <4 x half> %366, <16 x float> %653, i32 0, i32 0, i32 0), !dbg !25
  %655 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %591, <4 x half> %368, <16 x float> %654, i32 0, i32 0, i32 0), !dbg !25
  %656 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %592, <4 x half> %370, <16 x float> %655, i32 0, i32 0, i32 0), !dbg !25
  %657 = extractelement <16 x float> %656, i64 0, !dbg !25
  %658 = extractelement <16 x float> %656, i64 1, !dbg !25
  %659 = extractelement <16 x float> %656, i64 2, !dbg !25
  %660 = extractelement <16 x float> %656, i64 3, !dbg !25
  %661 = extractelement <16 x float> %656, i64 4, !dbg !25
  %662 = extractelement <16 x float> %656, i64 5, !dbg !25
  %663 = extractelement <16 x float> %656, i64 6, !dbg !25
  %664 = extractelement <16 x float> %656, i64 7, !dbg !25
  %665 = extractelement <16 x float> %656, i64 8, !dbg !25
  %666 = extractelement <16 x float> %656, i64 9, !dbg !25
  %667 = extractelement <16 x float> %656, i64 10, !dbg !25
  %668 = extractelement <16 x float> %656, i64 11, !dbg !25
  %669 = extractelement <16 x float> %656, i64 12, !dbg !25
  %670 = extractelement <16 x float> %656, i64 13, !dbg !25
  %671 = extractelement <16 x float> %656, i64 14, !dbg !25
  %672 = extractelement <16 x float> %656, i64 15, !dbg !25
  %673 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %593, <4 x half> %340, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !25
  %674 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %594, <4 x half> %342, <16 x float> %673, i32 0, i32 0, i32 0), !dbg !25
  %675 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %595, <4 x half> %344, <16 x float> %674, i32 0, i32 0, i32 0), !dbg !25
  %676 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %596, <4 x half> %346, <16 x float> %675, i32 0, i32 0, i32 0), !dbg !25
  %677 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %597, <4 x half> %348, <16 x float> %676, i32 0, i32 0, i32 0), !dbg !25
  %678 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %598, <4 x half> %350, <16 x float> %677, i32 0, i32 0, i32 0), !dbg !25
  %679 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %599, <4 x half> %352, <16 x float> %678, i32 0, i32 0, i32 0), !dbg !25
  %680 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %600, <4 x half> %354, <16 x float> %679, i32 0, i32 0, i32 0), !dbg !25
  %681 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %601, <4 x half> %356, <16 x float> %680, i32 0, i32 0, i32 0), !dbg !25
  %682 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %602, <4 x half> %358, <16 x float> %681, i32 0, i32 0, i32 0), !dbg !25
  %683 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %603, <4 x half> %360, <16 x float> %682, i32 0, i32 0, i32 0), !dbg !25
  %684 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %604, <4 x half> %362, <16 x float> %683, i32 0, i32 0, i32 0), !dbg !25
  %685 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %605, <4 x half> %364, <16 x float> %684, i32 0, i32 0, i32 0), !dbg !25
  %686 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %606, <4 x half> %366, <16 x float> %685, i32 0, i32 0, i32 0), !dbg !25
  %687 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %607, <4 x half> %368, <16 x float> %686, i32 0, i32 0, i32 0), !dbg !25
  %688 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %608, <4 x half> %370, <16 x float> %687, i32 0, i32 0, i32 0), !dbg !25
  %689 = extractelement <16 x float> %688, i64 0, !dbg !25
  %690 = extractelement <16 x float> %688, i64 1, !dbg !25
  %691 = extractelement <16 x float> %688, i64 2, !dbg !25
  %692 = extractelement <16 x float> %688, i64 3, !dbg !25
  %693 = extractelement <16 x float> %688, i64 4, !dbg !25
  %694 = extractelement <16 x float> %688, i64 5, !dbg !25
  %695 = extractelement <16 x float> %688, i64 6, !dbg !25
  %696 = extractelement <16 x float> %688, i64 7, !dbg !25
  %697 = extractelement <16 x float> %688, i64 8, !dbg !25
  %698 = extractelement <16 x float> %688, i64 9, !dbg !25
  %699 = extractelement <16 x float> %688, i64 10, !dbg !25
  %700 = extractelement <16 x float> %688, i64 11, !dbg !25
  %701 = extractelement <16 x float> %688, i64 12, !dbg !25
  %702 = extractelement <16 x float> %688, i64 13, !dbg !25
  %703 = extractelement <16 x float> %688, i64 14, !dbg !25
  %704 = extractelement <16 x float> %688, i64 15, !dbg !25
  %705 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %609, <4 x half> %340, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !25
  %706 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %610, <4 x half> %342, <16 x float> %705, i32 0, i32 0, i32 0), !dbg !25
  %707 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %611, <4 x half> %344, <16 x float> %706, i32 0, i32 0, i32 0), !dbg !25
  %708 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %612, <4 x half> %346, <16 x float> %707, i32 0, i32 0, i32 0), !dbg !25
  %709 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %613, <4 x half> %348, <16 x float> %708, i32 0, i32 0, i32 0), !dbg !25
  %710 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %614, <4 x half> %350, <16 x float> %709, i32 0, i32 0, i32 0), !dbg !25
  %711 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %615, <4 x half> %352, <16 x float> %710, i32 0, i32 0, i32 0), !dbg !25
  %712 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %616, <4 x half> %354, <16 x float> %711, i32 0, i32 0, i32 0), !dbg !25
  %713 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %617, <4 x half> %356, <16 x float> %712, i32 0, i32 0, i32 0), !dbg !25
  %714 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %618, <4 x half> %358, <16 x float> %713, i32 0, i32 0, i32 0), !dbg !25
  %715 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %619, <4 x half> %360, <16 x float> %714, i32 0, i32 0, i32 0), !dbg !25
  %716 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %620, <4 x half> %362, <16 x float> %715, i32 0, i32 0, i32 0), !dbg !25
  %717 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %621, <4 x half> %364, <16 x float> %716, i32 0, i32 0, i32 0), !dbg !25
  %718 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %622, <4 x half> %366, <16 x float> %717, i32 0, i32 0, i32 0), !dbg !25
  %719 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %623, <4 x half> %368, <16 x float> %718, i32 0, i32 0, i32 0), !dbg !25
  %720 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %624, <4 x half> %370, <16 x float> %719, i32 0, i32 0, i32 0), !dbg !25
  %721 = extractelement <16 x float> %720, i64 0, !dbg !25
  %722 = extractelement <16 x float> %720, i64 1, !dbg !25
  %723 = extractelement <16 x float> %720, i64 2, !dbg !25
  %724 = extractelement <16 x float> %720, i64 3, !dbg !25
  %725 = extractelement <16 x float> %720, i64 4, !dbg !25
  %726 = extractelement <16 x float> %720, i64 5, !dbg !25
  %727 = extractelement <16 x float> %720, i64 6, !dbg !25
  %728 = extractelement <16 x float> %720, i64 7, !dbg !25
  %729 = extractelement <16 x float> %720, i64 8, !dbg !25
  %730 = extractelement <16 x float> %720, i64 9, !dbg !25
  %731 = extractelement <16 x float> %720, i64 10, !dbg !25
  %732 = extractelement <16 x float> %720, i64 11, !dbg !25
  %733 = extractelement <16 x float> %720, i64 12, !dbg !25
  %734 = extractelement <16 x float> %720, i64 13, !dbg !25
  %735 = extractelement <16 x float> %720, i64 14, !dbg !25
  %736 = extractelement <16 x float> %720, i64 15, !dbg !25
  %737 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %625, <4 x half> %340, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !25
  %738 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %626, <4 x half> %342, <16 x float> %737, i32 0, i32 0, i32 0), !dbg !25
  %739 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %627, <4 x half> %344, <16 x float> %738, i32 0, i32 0, i32 0), !dbg !25
  %740 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %628, <4 x half> %346, <16 x float> %739, i32 0, i32 0, i32 0), !dbg !25
  %741 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %629, <4 x half> %348, <16 x float> %740, i32 0, i32 0, i32 0), !dbg !25
  %742 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %630, <4 x half> %350, <16 x float> %741, i32 0, i32 0, i32 0), !dbg !25
  %743 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %631, <4 x half> %352, <16 x float> %742, i32 0, i32 0, i32 0), !dbg !25
  %744 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %632, <4 x half> %354, <16 x float> %743, i32 0, i32 0, i32 0), !dbg !25
  %745 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %633, <4 x half> %356, <16 x float> %744, i32 0, i32 0, i32 0), !dbg !25
  %746 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %634, <4 x half> %358, <16 x float> %745, i32 0, i32 0, i32 0), !dbg !25
  %747 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %635, <4 x half> %360, <16 x float> %746, i32 0, i32 0, i32 0), !dbg !25
  %748 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %636, <4 x half> %362, <16 x float> %747, i32 0, i32 0, i32 0), !dbg !25
  %749 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %637, <4 x half> %364, <16 x float> %748, i32 0, i32 0, i32 0), !dbg !25
  %750 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %638, <4 x half> %366, <16 x float> %749, i32 0, i32 0, i32 0), !dbg !25
  %751 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %639, <4 x half> %368, <16 x float> %750, i32 0, i32 0, i32 0), !dbg !25
  %752 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %640, <4 x half> %370, <16 x float> %751, i32 0, i32 0, i32 0), !dbg !25
  %753 = extractelement <16 x float> %752, i64 0, !dbg !25
  %754 = extractelement <16 x float> %752, i64 1, !dbg !25
  %755 = extractelement <16 x float> %752, i64 2, !dbg !25
  %756 = extractelement <16 x float> %752, i64 3, !dbg !25
  %757 = extractelement <16 x float> %752, i64 4, !dbg !25
  %758 = extractelement <16 x float> %752, i64 5, !dbg !25
  %759 = extractelement <16 x float> %752, i64 6, !dbg !25
  %760 = extractelement <16 x float> %752, i64 7, !dbg !25
  %761 = extractelement <16 x float> %752, i64 8, !dbg !25
  %762 = extractelement <16 x float> %752, i64 9, !dbg !25
  %763 = extractelement <16 x float> %752, i64 10, !dbg !25
  %764 = extractelement <16 x float> %752, i64 11, !dbg !25
  %765 = extractelement <16 x float> %752, i64 12, !dbg !25
  %766 = extractelement <16 x float> %752, i64 13, !dbg !25
  %767 = extractelement <16 x float> %752, i64 14, !dbg !25
  %768 = extractelement <16 x float> %752, i64 15, !dbg !25
  %769 = tail call float @llvm.maxnum.f32(float %657, float %658), !dbg !26
  %770 = tail call float @llvm.maxnum.f32(float %769, float %659), !dbg !26
  %771 = tail call float @llvm.maxnum.f32(float %770, float %660), !dbg !26
  %772 = tail call float @llvm.maxnum.f32(float %771, float %661), !dbg !26
  %773 = tail call float @llvm.maxnum.f32(float %772, float %662), !dbg !26
  %774 = tail call float @llvm.maxnum.f32(float %773, float %663), !dbg !26
  %775 = tail call float @llvm.maxnum.f32(float %774, float %664), !dbg !26
  %776 = tail call float @llvm.maxnum.f32(float %775, float %665), !dbg !26
  %777 = tail call float @llvm.maxnum.f32(float %776, float %666), !dbg !26
  %778 = tail call float @llvm.maxnum.f32(float %777, float %667), !dbg !26
  %779 = tail call float @llvm.maxnum.f32(float %778, float %668), !dbg !26
  %780 = tail call float @llvm.maxnum.f32(float %779, float %669), !dbg !26
  %781 = tail call float @llvm.maxnum.f32(float %780, float %670), !dbg !26
  %782 = tail call float @llvm.maxnum.f32(float %781, float %671), !dbg !26
  %783 = tail call float @llvm.maxnum.f32(float %782, float %672), !dbg !26
  %784 = tail call float @llvm.maxnum.f32(float %783, float %689), !dbg !26
  %785 = tail call float @llvm.maxnum.f32(float %784, float %690), !dbg !26
  %786 = tail call float @llvm.maxnum.f32(float %785, float %691), !dbg !26
  %787 = tail call float @llvm.maxnum.f32(float %786, float %692), !dbg !26
  %788 = tail call float @llvm.maxnum.f32(float %787, float %693), !dbg !26
  %789 = tail call float @llvm.maxnum.f32(float %788, float %694), !dbg !26
  %790 = tail call float @llvm.maxnum.f32(float %789, float %695), !dbg !26
  %791 = tail call float @llvm.maxnum.f32(float %790, float %696), !dbg !26
  %792 = tail call float @llvm.maxnum.f32(float %791, float %697), !dbg !26
  %793 = tail call float @llvm.maxnum.f32(float %792, float %698), !dbg !26
  %794 = tail call float @llvm.maxnum.f32(float %793, float %699), !dbg !26
  %795 = tail call float @llvm.maxnum.f32(float %794, float %700), !dbg !26
  %796 = tail call float @llvm.maxnum.f32(float %795, float %701), !dbg !26
  %797 = tail call float @llvm.maxnum.f32(float %796, float %702), !dbg !26
  %798 = tail call float @llvm.maxnum.f32(float %797, float %703), !dbg !26
  %799 = tail call float @llvm.maxnum.f32(float %798, float %704), !dbg !26
  %800 = tail call float @llvm.maxnum.f32(float %799, float %721), !dbg !26
  %801 = tail call float @llvm.maxnum.f32(float %800, float %722), !dbg !26
  %802 = tail call float @llvm.maxnum.f32(float %801, float %723), !dbg !26
  %803 = tail call float @llvm.maxnum.f32(float %802, float %724), !dbg !26
  %804 = tail call float @llvm.maxnum.f32(float %803, float %725), !dbg !26
  %805 = tail call float @llvm.maxnum.f32(float %804, float %726), !dbg !26
  %806 = tail call float @llvm.maxnum.f32(float %805, float %727), !dbg !26
  %807 = tail call float @llvm.maxnum.f32(float %806, float %728), !dbg !26
  %808 = tail call float @llvm.maxnum.f32(float %807, float %729), !dbg !26
  %809 = tail call float @llvm.maxnum.f32(float %808, float %730), !dbg !26
  %810 = tail call float @llvm.maxnum.f32(float %809, float %731), !dbg !26
  %811 = tail call float @llvm.maxnum.f32(float %810, float %732), !dbg !26
  %812 = tail call float @llvm.maxnum.f32(float %811, float %733), !dbg !26
  %813 = tail call float @llvm.maxnum.f32(float %812, float %734), !dbg !26
  %814 = tail call float @llvm.maxnum.f32(float %813, float %735), !dbg !26
  %815 = tail call float @llvm.maxnum.f32(float %814, float %736), !dbg !26
  %816 = tail call float @llvm.maxnum.f32(float %815, float %753), !dbg !26
  %817 = tail call float @llvm.maxnum.f32(float %816, float %754), !dbg !26
  %818 = tail call float @llvm.maxnum.f32(float %817, float %755), !dbg !26
  %819 = tail call float @llvm.maxnum.f32(float %818, float %756), !dbg !26
  %820 = tail call float @llvm.maxnum.f32(float %819, float %757), !dbg !26
  %821 = tail call float @llvm.maxnum.f32(float %820, float %758), !dbg !26
  %822 = tail call float @llvm.maxnum.f32(float %821, float %759), !dbg !26
  %823 = tail call float @llvm.maxnum.f32(float %822, float %760), !dbg !26
  %824 = tail call float @llvm.maxnum.f32(float %823, float %761), !dbg !26
  %825 = tail call float @llvm.maxnum.f32(float %824, float %762), !dbg !26
  %826 = tail call float @llvm.maxnum.f32(float %825, float %763), !dbg !26
  %827 = tail call float @llvm.maxnum.f32(float %826, float %764), !dbg !26
  %828 = tail call float @llvm.maxnum.f32(float %827, float %765), !dbg !26
  %829 = tail call float @llvm.maxnum.f32(float %828, float %766), !dbg !26
  %830 = tail call float @llvm.maxnum.f32(float %829, float %767), !dbg !26
  %831 = tail call float @llvm.maxnum.f32(float %830, float %768), !dbg !26
  %832 = bitcast float %831 to i32, !dbg !31
  %833 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %513, i32 %832), !dbg !31
  %834 = bitcast i32 %833 to float, !dbg !31
  %835 = tail call float @llvm.maxnum.f32(float %831, float %834), !dbg !26
  %836 = tail call float @llvm.maxnum.f32(float %516, float %835), !dbg !32
  %837 = fsub float %657, %836, !dbg !33
  %838 = fsub float %658, %836, !dbg !33
  %839 = fsub float %659, %836, !dbg !33
  %840 = fsub float %660, %836, !dbg !33
  %841 = fsub float %661, %836, !dbg !33
  %842 = fsub float %662, %836, !dbg !33
  %843 = fsub float %663, %836, !dbg !33
  %844 = fsub float %664, %836, !dbg !33
  %845 = fsub float %665, %836, !dbg !33
  %846 = fsub float %666, %836, !dbg !33
  %847 = fsub float %667, %836, !dbg !33
  %848 = fsub float %668, %836, !dbg !33
  %849 = fsub float %669, %836, !dbg !33
  %850 = fsub float %670, %836, !dbg !33
  %851 = fsub float %671, %836, !dbg !33
  %852 = fsub float %672, %836, !dbg !33
  %853 = fsub float %689, %836, !dbg !33
  %854 = fsub float %690, %836, !dbg !33
  %855 = fsub float %691, %836, !dbg !33
  %856 = fsub float %692, %836, !dbg !33
  %857 = fsub float %693, %836, !dbg !33
  %858 = fsub float %694, %836, !dbg !33
  %859 = fsub float %695, %836, !dbg !33
  %860 = fsub float %696, %836, !dbg !33
  %861 = fsub float %697, %836, !dbg !33
  %862 = fsub float %698, %836, !dbg !33
  %863 = fsub float %699, %836, !dbg !33
  %864 = fsub float %700, %836, !dbg !33
  %865 = fsub float %701, %836, !dbg !33
  %866 = fsub float %702, %836, !dbg !33
  %867 = fsub float %703, %836, !dbg !33
  %868 = fsub float %704, %836, !dbg !33
  %869 = fsub float %721, %836, !dbg !33
  %870 = fsub float %722, %836, !dbg !33
  %871 = fsub float %723, %836, !dbg !33
  %872 = fsub float %724, %836, !dbg !33
  %873 = fsub float %725, %836, !dbg !33
  %874 = fsub float %726, %836, !dbg !33
  %875 = fsub float %727, %836, !dbg !33
  %876 = fsub float %728, %836, !dbg !33
  %877 = fsub float %729, %836, !dbg !33
  %878 = fsub float %730, %836, !dbg !33
  %879 = fsub float %731, %836, !dbg !33
  %880 = fsub float %732, %836, !dbg !33
  %881 = fsub float %733, %836, !dbg !33
  %882 = fsub float %734, %836, !dbg !33
  %883 = fsub float %735, %836, !dbg !33
  %884 = fsub float %736, %836, !dbg !33
  %885 = fsub float %753, %836, !dbg !33
  %886 = fsub float %754, %836, !dbg !33
  %887 = fsub float %755, %836, !dbg !33
  %888 = fsub float %756, %836, !dbg !33
  %889 = fsub float %757, %836, !dbg !33
  %890 = fsub float %758, %836, !dbg !33
  %891 = fsub float %759, %836, !dbg !33
  %892 = fsub float %760, %836, !dbg !33
  %893 = fsub float %761, %836, !dbg !33
  %894 = fsub float %762, %836, !dbg !33
  %895 = fsub float %763, %836, !dbg !33
  %896 = fsub float %764, %836, !dbg !33
  %897 = fsub float %765, %836, !dbg !33
  %898 = fsub float %766, %836, !dbg !33
  %899 = fsub float %767, %836, !dbg !33
  %900 = fsub float %768, %836, !dbg !33
  %901 = tail call float @llvm.amdgcn.exp2.f32(float %837), !dbg !34
  %902 = tail call float @llvm.amdgcn.exp2.f32(float %838), !dbg !34
  %903 = tail call float @llvm.amdgcn.exp2.f32(float %839), !dbg !34
  %904 = tail call float @llvm.amdgcn.exp2.f32(float %840), !dbg !34
  %905 = tail call float @llvm.amdgcn.exp2.f32(float %841), !dbg !34
  %906 = tail call float @llvm.amdgcn.exp2.f32(float %842), !dbg !34
  %907 = tail call float @llvm.amdgcn.exp2.f32(float %843), !dbg !34
  %908 = tail call float @llvm.amdgcn.exp2.f32(float %844), !dbg !34
  %909 = tail call float @llvm.amdgcn.exp2.f32(float %845), !dbg !34
  %910 = tail call float @llvm.amdgcn.exp2.f32(float %846), !dbg !34
  %911 = tail call float @llvm.amdgcn.exp2.f32(float %847), !dbg !34
  %912 = tail call float @llvm.amdgcn.exp2.f32(float %848), !dbg !34
  %913 = tail call float @llvm.amdgcn.exp2.f32(float %849), !dbg !34
  %914 = tail call float @llvm.amdgcn.exp2.f32(float %850), !dbg !34
  %915 = tail call float @llvm.amdgcn.exp2.f32(float %851), !dbg !34
  %916 = tail call float @llvm.amdgcn.exp2.f32(float %852), !dbg !34
  %917 = tail call float @llvm.amdgcn.exp2.f32(float %853), !dbg !34
  %918 = tail call float @llvm.amdgcn.exp2.f32(float %854), !dbg !34
  %919 = tail call float @llvm.amdgcn.exp2.f32(float %855), !dbg !34
  %920 = tail call float @llvm.amdgcn.exp2.f32(float %856), !dbg !34
  %921 = tail call float @llvm.amdgcn.exp2.f32(float %857), !dbg !34
  %922 = tail call float @llvm.amdgcn.exp2.f32(float %858), !dbg !34
  %923 = tail call float @llvm.amdgcn.exp2.f32(float %859), !dbg !34
  %924 = tail call float @llvm.amdgcn.exp2.f32(float %860), !dbg !34
  %925 = tail call float @llvm.amdgcn.exp2.f32(float %861), !dbg !34
  %926 = tail call float @llvm.amdgcn.exp2.f32(float %862), !dbg !34
  %927 = tail call float @llvm.amdgcn.exp2.f32(float %863), !dbg !34
  %928 = tail call float @llvm.amdgcn.exp2.f32(float %864), !dbg !34
  %929 = tail call float @llvm.amdgcn.exp2.f32(float %865), !dbg !34
  %930 = tail call float @llvm.amdgcn.exp2.f32(float %866), !dbg !34
  %931 = tail call float @llvm.amdgcn.exp2.f32(float %867), !dbg !34
  %932 = tail call float @llvm.amdgcn.exp2.f32(float %868), !dbg !34
  %933 = tail call float @llvm.amdgcn.exp2.f32(float %869), !dbg !34
  %934 = tail call float @llvm.amdgcn.exp2.f32(float %870), !dbg !34
  %935 = tail call float @llvm.amdgcn.exp2.f32(float %871), !dbg !34
  %936 = tail call float @llvm.amdgcn.exp2.f32(float %872), !dbg !34
  %937 = tail call float @llvm.amdgcn.exp2.f32(float %873), !dbg !34
  %938 = tail call float @llvm.amdgcn.exp2.f32(float %874), !dbg !34
  %939 = tail call float @llvm.amdgcn.exp2.f32(float %875), !dbg !34
  %940 = tail call float @llvm.amdgcn.exp2.f32(float %876), !dbg !34
  %941 = tail call float @llvm.amdgcn.exp2.f32(float %877), !dbg !34
  %942 = tail call float @llvm.amdgcn.exp2.f32(float %878), !dbg !34
  %943 = tail call float @llvm.amdgcn.exp2.f32(float %879), !dbg !34
  %944 = tail call float @llvm.amdgcn.exp2.f32(float %880), !dbg !34
  %945 = tail call float @llvm.amdgcn.exp2.f32(float %881), !dbg !34
  %946 = tail call float @llvm.amdgcn.exp2.f32(float %882), !dbg !34
  %947 = tail call float @llvm.amdgcn.exp2.f32(float %883), !dbg !34
  %948 = tail call float @llvm.amdgcn.exp2.f32(float %884), !dbg !34
  %949 = tail call float @llvm.amdgcn.exp2.f32(float %885), !dbg !34
  %950 = tail call float @llvm.amdgcn.exp2.f32(float %886), !dbg !34
  %951 = tail call float @llvm.amdgcn.exp2.f32(float %887), !dbg !34
  %952 = tail call float @llvm.amdgcn.exp2.f32(float %888), !dbg !34
  %953 = tail call float @llvm.amdgcn.exp2.f32(float %889), !dbg !34
  %954 = tail call float @llvm.amdgcn.exp2.f32(float %890), !dbg !34
  %955 = tail call float @llvm.amdgcn.exp2.f32(float %891), !dbg !34
  %956 = tail call float @llvm.amdgcn.exp2.f32(float %892), !dbg !34
  %957 = tail call float @llvm.amdgcn.exp2.f32(float %893), !dbg !34
  %958 = tail call float @llvm.amdgcn.exp2.f32(float %894), !dbg !34
  %959 = tail call float @llvm.amdgcn.exp2.f32(float %895), !dbg !34
  %960 = tail call float @llvm.amdgcn.exp2.f32(float %896), !dbg !34
  %961 = tail call float @llvm.amdgcn.exp2.f32(float %897), !dbg !34
  %962 = tail call float @llvm.amdgcn.exp2.f32(float %898), !dbg !34
  %963 = tail call float @llvm.amdgcn.exp2.f32(float %899), !dbg !34
  %964 = tail call float @llvm.amdgcn.exp2.f32(float %900), !dbg !34
  %965 = fsub float %516, %836, !dbg !35
  %966 = tail call float @llvm.amdgcn.exp2.f32(float %965), !dbg !36
  %967 = insertelement <2 x float> poison, float %966, i64 0, !dbg !37
  %968 = shufflevector <2 x float> %967, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !37
  %969 = fmul <2 x float> %542, %968, !dbg !37
  %970 = fmul <2 x float> %543, %968, !dbg !37
  %971 = fmul <2 x float> %544, %968, !dbg !37
  %972 = fmul <2 x float> %545, %968, !dbg !37
  %973 = fmul <2 x float> %546, %968, !dbg !37
  %974 = fmul <2 x float> %547, %968, !dbg !37
  %975 = fmul <2 x float> %548, %968, !dbg !37
  %976 = fmul <2 x float> %549, %968, !dbg !37
  %977 = fmul <2 x float> %534, %968, !dbg !37
  %978 = fmul <2 x float> %535, %968, !dbg !37
  %979 = fmul <2 x float> %536, %968, !dbg !37
  %980 = fmul <2 x float> %537, %968, !dbg !37
  %981 = fmul <2 x float> %538, %968, !dbg !37
  %982 = fmul <2 x float> %539, %968, !dbg !37
  %983 = fmul <2 x float> %540, %968, !dbg !37
  %984 = fmul <2 x float> %541, %968, !dbg !37
  %985 = fmul <2 x float> %526, %968, !dbg !37
  %986 = fmul <2 x float> %527, %968, !dbg !37
  %987 = fmul <2 x float> %528, %968, !dbg !37
  %988 = fmul <2 x float> %529, %968, !dbg !37
  %989 = fmul <2 x float> %530, %968, !dbg !37
  %990 = fmul <2 x float> %531, %968, !dbg !37
  %991 = fmul <2 x float> %532, %968, !dbg !37
  %992 = fmul <2 x float> %533, %968, !dbg !37
  %993 = fmul <2 x float> %518, %968, !dbg !37
  %994 = fmul <2 x float> %519, %968, !dbg !37
  %995 = fmul <2 x float> %520, %968, !dbg !37
  %996 = fmul <2 x float> %521, %968, !dbg !37
  %997 = fmul <2 x float> %522, %968, !dbg !37
  %998 = fmul <2 x float> %523, %968, !dbg !37
  %999 = fmul <2 x float> %524, %968, !dbg !37
  %1000 = fmul <2 x float> %525, %968, !dbg !37
  %1001 = fptrunc float %901 to half, !dbg !38
  %1002 = fptrunc float %902 to half, !dbg !38
  %1003 = fptrunc float %903 to half, !dbg !38
  %1004 = fptrunc float %904 to half, !dbg !38
  %1005 = fptrunc float %905 to half, !dbg !38
  %1006 = fptrunc float %906 to half, !dbg !38
  %1007 = fptrunc float %907 to half, !dbg !38
  %1008 = fptrunc float %908 to half, !dbg !38
  %1009 = fptrunc float %909 to half, !dbg !38
  %1010 = fptrunc float %910 to half, !dbg !38
  %1011 = fptrunc float %911 to half, !dbg !38
  %1012 = fptrunc float %912 to half, !dbg !38
  %1013 = fptrunc float %913 to half, !dbg !38
  %1014 = fptrunc float %914 to half, !dbg !38
  %1015 = fptrunc float %915 to half, !dbg !38
  %1016 = fptrunc float %916 to half, !dbg !38
  %1017 = fptrunc float %917 to half, !dbg !38
  %1018 = fptrunc float %918 to half, !dbg !38
  %1019 = fptrunc float %919 to half, !dbg !38
  %1020 = fptrunc float %920 to half, !dbg !38
  %1021 = fptrunc float %921 to half, !dbg !38
  %1022 = fptrunc float %922 to half, !dbg !38
  %1023 = fptrunc float %923 to half, !dbg !38
  %1024 = fptrunc float %924 to half, !dbg !38
  %1025 = fptrunc float %925 to half, !dbg !38
  %1026 = fptrunc float %926 to half, !dbg !38
  %1027 = fptrunc float %927 to half, !dbg !38
  %1028 = fptrunc float %928 to half, !dbg !38
  %1029 = fptrunc float %929 to half, !dbg !38
  %1030 = fptrunc float %930 to half, !dbg !38
  %1031 = fptrunc float %931 to half, !dbg !38
  %1032 = fptrunc float %932 to half, !dbg !38
  %1033 = fptrunc float %933 to half, !dbg !38
  %1034 = fptrunc float %934 to half, !dbg !38
  %1035 = fptrunc float %935 to half, !dbg !38
  %1036 = fptrunc float %936 to half, !dbg !38
  %1037 = fptrunc float %937 to half, !dbg !38
  %1038 = fptrunc float %938 to half, !dbg !38
  %1039 = fptrunc float %939 to half, !dbg !38
  %1040 = fptrunc float %940 to half, !dbg !38
  %1041 = fptrunc float %941 to half, !dbg !38
  %1042 = fptrunc float %942 to half, !dbg !38
  %1043 = fptrunc float %943 to half, !dbg !38
  %1044 = fptrunc float %944 to half, !dbg !38
  %1045 = fptrunc float %945 to half, !dbg !38
  %1046 = fptrunc float %946 to half, !dbg !38
  %1047 = fptrunc float %947 to half, !dbg !38
  %1048 = fptrunc float %948 to half, !dbg !38
  %1049 = fptrunc float %949 to half, !dbg !38
  %1050 = fptrunc float %950 to half, !dbg !38
  %1051 = fptrunc float %951 to half, !dbg !38
  %1052 = fptrunc float %952 to half, !dbg !38
  %1053 = fptrunc float %953 to half, !dbg !38
  %1054 = fptrunc float %954 to half, !dbg !38
  %1055 = fptrunc float %955 to half, !dbg !38
  %1056 = fptrunc float %956 to half, !dbg !38
  %1057 = fptrunc float %957 to half, !dbg !38
  %1058 = fptrunc float %958 to half, !dbg !38
  %1059 = fptrunc float %959 to half, !dbg !38
  %1060 = fptrunc float %960 to half, !dbg !38
  %1061 = fptrunc float %961 to half, !dbg !38
  %1062 = fptrunc float %962 to half, !dbg !38
  %1063 = fptrunc float %963 to half, !dbg !38
  %1064 = fptrunc float %964 to half, !dbg !38
  fence syncscope("workgroup") release, !dbg !22
  tail call void @llvm.amdgcn.s.barrier(), !dbg !22
  fence syncscope("workgroup") acquire, !dbg !22
  %1065 = shufflevector <8 x half> %unmaskedload12, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !22
  store <4 x half> %1065, ptr addrspace(3) %224, align 8, !dbg !22
  %1066 = shufflevector <8 x half> %unmaskedload12, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !22
  store <4 x half> %1066, ptr addrspace(3) %231, align 8, !dbg !22
  %1067 = shufflevector <8 x half> %unmaskedload13, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !22
  store <4 x half> %1067, ptr addrspace(3) %234, align 8, !dbg !22
  %1068 = shufflevector <8 x half> %unmaskedload13, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !22
  store <4 x half> %1068, ptr addrspace(3) %236, align 8, !dbg !22
  %1069 = shufflevector <8 x half> %unmaskedload14, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !22
  store <4 x half> %1069, ptr addrspace(3) %239, align 8, !dbg !22
  %1070 = shufflevector <8 x half> %unmaskedload14, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !22
  store <4 x half> %1070, ptr addrspace(3) %241, align 8, !dbg !22
  %1071 = shufflevector <8 x half> %unmaskedload15, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !22
  store <4 x half> %1071, ptr addrspace(3) %244, align 8, !dbg !22
  %1072 = shufflevector <8 x half> %unmaskedload15, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !22
  store <4 x half> %1072, ptr addrspace(3) %246, align 8, !dbg !22
  fence syncscope("workgroup") release, !dbg !22
  tail call void @llvm.amdgcn.s.barrier(), !dbg !22
  fence syncscope("workgroup") acquire, !dbg !22
  %1073 = load <4 x half>, ptr addrspace(3) %448, align 8, !dbg !22
  %1074 = load <4 x half>, ptr addrspace(3) %449, align 8, !dbg !22
  %1075 = load <4 x half>, ptr addrspace(3) %450, align 8, !dbg !22
  %1076 = load <4 x half>, ptr addrspace(3) %451, align 8, !dbg !22
  %1077 = load <4 x half>, ptr addrspace(3) %452, align 8, !dbg !22
  %1078 = load <4 x half>, ptr addrspace(3) %453, align 8, !dbg !22
  %1079 = load <4 x half>, ptr addrspace(3) %454, align 8, !dbg !22
  %1080 = load <4 x half>, ptr addrspace(3) %455, align 8, !dbg !22
  %1081 = load <4 x half>, ptr addrspace(3) %456, align 8, !dbg !22
  %1082 = load <4 x half>, ptr addrspace(3) %457, align 8, !dbg !22
  %1083 = load <4 x half>, ptr addrspace(3) %458, align 8, !dbg !22
  %1084 = load <4 x half>, ptr addrspace(3) %459, align 8, !dbg !22
  %1085 = load <4 x half>, ptr addrspace(3) %460, align 8, !dbg !22
  %1086 = load <4 x half>, ptr addrspace(3) %461, align 8, !dbg !22
  %1087 = load <4 x half>, ptr addrspace(3) %462, align 8, !dbg !22
  %1088 = load <4 x half>, ptr addrspace(3) %463, align 8, !dbg !22
  %1089 = load <4 x half>, ptr addrspace(3) %464, align 8, !dbg !22
  %1090 = load <4 x half>, ptr addrspace(3) %465, align 8, !dbg !22
  %1091 = load <4 x half>, ptr addrspace(3) %466, align 8, !dbg !22
  %1092 = load <4 x half>, ptr addrspace(3) %467, align 8, !dbg !22
  %1093 = load <4 x half>, ptr addrspace(3) %468, align 8, !dbg !22
  %1094 = load <4 x half>, ptr addrspace(3) %469, align 8, !dbg !22
  %1095 = load <4 x half>, ptr addrspace(3) %470, align 8, !dbg !22
  %1096 = load <4 x half>, ptr addrspace(3) %471, align 8, !dbg !22
  %1097 = load <4 x half>, ptr addrspace(3) %472, align 8, !dbg !22
  %1098 = load <4 x half>, ptr addrspace(3) %473, align 8, !dbg !22
  %1099 = load <4 x half>, ptr addrspace(3) %474, align 8, !dbg !22
  %1100 = load <4 x half>, ptr addrspace(3) %475, align 8, !dbg !22
  %1101 = load <4 x half>, ptr addrspace(3) %476, align 8, !dbg !22
  %1102 = load <4 x half>, ptr addrspace(3) %477, align 8, !dbg !22
  %1103 = load <4 x half>, ptr addrspace(3) %478, align 8, !dbg !22
  %1104 = load <4 x half>, ptr addrspace(3) %479, align 8, !dbg !22
  %1105 = load <4 x half>, ptr addrspace(3) %480, align 8, !dbg !22
  %1106 = load <4 x half>, ptr addrspace(3) %481, align 8, !dbg !22
  %1107 = load <4 x half>, ptr addrspace(3) %482, align 8, !dbg !22
  %1108 = load <4 x half>, ptr addrspace(3) %483, align 8, !dbg !22
  %1109 = load <4 x half>, ptr addrspace(3) %484, align 8, !dbg !22
  %1110 = load <4 x half>, ptr addrspace(3) %485, align 8, !dbg !22
  %1111 = load <4 x half>, ptr addrspace(3) %486, align 8, !dbg !22
  %1112 = load <4 x half>, ptr addrspace(3) %487, align 8, !dbg !22
  %1113 = load <4 x half>, ptr addrspace(3) %488, align 8, !dbg !22
  %1114 = load <4 x half>, ptr addrspace(3) %489, align 8, !dbg !22
  %1115 = load <4 x half>, ptr addrspace(3) %490, align 8, !dbg !22
  %1116 = load <4 x half>, ptr addrspace(3) %491, align 8, !dbg !22
  %1117 = load <4 x half>, ptr addrspace(3) %492, align 8, !dbg !22
  %1118 = load <4 x half>, ptr addrspace(3) %493, align 8, !dbg !22
  %1119 = load <4 x half>, ptr addrspace(3) %494, align 8, !dbg !22
  %1120 = load <4 x half>, ptr addrspace(3) %495, align 8, !dbg !22
  %1121 = load <4 x half>, ptr addrspace(3) %496, align 8, !dbg !22
  %1122 = load <4 x half>, ptr addrspace(3) %497, align 8, !dbg !22
  %1123 = load <4 x half>, ptr addrspace(3) %498, align 8, !dbg !22
  %1124 = load <4 x half>, ptr addrspace(3) %499, align 8, !dbg !22
  %1125 = load <4 x half>, ptr addrspace(3) %500, align 8, !dbg !22
  %1126 = load <4 x half>, ptr addrspace(3) %501, align 8, !dbg !22
  %1127 = load <4 x half>, ptr addrspace(3) %502, align 8, !dbg !22
  %1128 = load <4 x half>, ptr addrspace(3) %503, align 8, !dbg !22
  %1129 = load <4 x half>, ptr addrspace(3) %504, align 8, !dbg !22
  %1130 = load <4 x half>, ptr addrspace(3) %505, align 8, !dbg !22
  %1131 = load <4 x half>, ptr addrspace(3) %506, align 8, !dbg !22
  %1132 = load <4 x half>, ptr addrspace(3) %507, align 8, !dbg !22
  %1133 = load <4 x half>, ptr addrspace(3) %508, align 8, !dbg !22
  %1134 = load <4 x half>, ptr addrspace(3) %509, align 8, !dbg !22
  %1135 = load <4 x half>, ptr addrspace(3) %510, align 8, !dbg !22
  %1136 = load <4 x half>, ptr addrspace(3) %511, align 8, !dbg !22
  %1137 = insertelement <4 x half> poison, half %1001, i64 0, !dbg !39
  %1138 = insertelement <4 x half> %1137, half %1002, i64 1, !dbg !39
  %1139 = insertelement <4 x half> %1138, half %1003, i64 2, !dbg !39
  %1140 = insertelement <4 x half> %1139, half %1004, i64 3, !dbg !39
  %1141 = insertelement <4 x half> poison, half %1005, i64 0, !dbg !39
  %1142 = insertelement <4 x half> %1141, half %1006, i64 1, !dbg !39
  %1143 = insertelement <4 x half> %1142, half %1007, i64 2, !dbg !39
  %1144 = insertelement <4 x half> %1143, half %1008, i64 3, !dbg !39
  %1145 = insertelement <4 x half> poison, half %1009, i64 0, !dbg !39
  %1146 = insertelement <4 x half> %1145, half %1010, i64 1, !dbg !39
  %1147 = insertelement <4 x half> %1146, half %1011, i64 2, !dbg !39
  %1148 = insertelement <4 x half> %1147, half %1012, i64 3, !dbg !39
  %1149 = insertelement <4 x half> poison, half %1013, i64 0, !dbg !39
  %1150 = insertelement <4 x half> %1149, half %1014, i64 1, !dbg !39
  %1151 = insertelement <4 x half> %1150, half %1015, i64 2, !dbg !39
  %1152 = insertelement <4 x half> %1151, half %1016, i64 3, !dbg !39
  %1153 = insertelement <4 x half> poison, half %1017, i64 0, !dbg !39
  %1154 = insertelement <4 x half> %1153, half %1018, i64 1, !dbg !39
  %1155 = insertelement <4 x half> %1154, half %1019, i64 2, !dbg !39
  %1156 = insertelement <4 x half> %1155, half %1020, i64 3, !dbg !39
  %1157 = insertelement <4 x half> poison, half %1021, i64 0, !dbg !39
  %1158 = insertelement <4 x half> %1157, half %1022, i64 1, !dbg !39
  %1159 = insertelement <4 x half> %1158, half %1023, i64 2, !dbg !39
  %1160 = insertelement <4 x half> %1159, half %1024, i64 3, !dbg !39
  %1161 = insertelement <4 x half> poison, half %1025, i64 0, !dbg !39
  %1162 = insertelement <4 x half> %1161, half %1026, i64 1, !dbg !39
  %1163 = insertelement <4 x half> %1162, half %1027, i64 2, !dbg !39
  %1164 = insertelement <4 x half> %1163, half %1028, i64 3, !dbg !39
  %1165 = insertelement <4 x half> poison, half %1029, i64 0, !dbg !39
  %1166 = insertelement <4 x half> %1165, half %1030, i64 1, !dbg !39
  %1167 = insertelement <4 x half> %1166, half %1031, i64 2, !dbg !39
  %1168 = insertelement <4 x half> %1167, half %1032, i64 3, !dbg !39
  %1169 = insertelement <4 x half> poison, half %1033, i64 0, !dbg !39
  %1170 = insertelement <4 x half> %1169, half %1034, i64 1, !dbg !39
  %1171 = insertelement <4 x half> %1170, half %1035, i64 2, !dbg !39
  %1172 = insertelement <4 x half> %1171, half %1036, i64 3, !dbg !39
  %1173 = insertelement <4 x half> poison, half %1037, i64 0, !dbg !39
  %1174 = insertelement <4 x half> %1173, half %1038, i64 1, !dbg !39
  %1175 = insertelement <4 x half> %1174, half %1039, i64 2, !dbg !39
  %1176 = insertelement <4 x half> %1175, half %1040, i64 3, !dbg !39
  %1177 = insertelement <4 x half> poison, half %1041, i64 0, !dbg !39
  %1178 = insertelement <4 x half> %1177, half %1042, i64 1, !dbg !39
  %1179 = insertelement <4 x half> %1178, half %1043, i64 2, !dbg !39
  %1180 = insertelement <4 x half> %1179, half %1044, i64 3, !dbg !39
  %1181 = insertelement <4 x half> poison, half %1045, i64 0, !dbg !39
  %1182 = insertelement <4 x half> %1181, half %1046, i64 1, !dbg !39
  %1183 = insertelement <4 x half> %1182, half %1047, i64 2, !dbg !39
  %1184 = insertelement <4 x half> %1183, half %1048, i64 3, !dbg !39
  %1185 = insertelement <4 x half> poison, half %1049, i64 0, !dbg !39
  %1186 = insertelement <4 x half> %1185, half %1050, i64 1, !dbg !39
  %1187 = insertelement <4 x half> %1186, half %1051, i64 2, !dbg !39
  %1188 = insertelement <4 x half> %1187, half %1052, i64 3, !dbg !39
  %1189 = insertelement <4 x half> poison, half %1053, i64 0, !dbg !39
  %1190 = insertelement <4 x half> %1189, half %1054, i64 1, !dbg !39
  %1191 = insertelement <4 x half> %1190, half %1055, i64 2, !dbg !39
  %1192 = insertelement <4 x half> %1191, half %1056, i64 3, !dbg !39
  %1193 = insertelement <4 x half> poison, half %1057, i64 0, !dbg !39
  %1194 = insertelement <4 x half> %1193, half %1058, i64 1, !dbg !39
  %1195 = insertelement <4 x half> %1194, half %1059, i64 2, !dbg !39
  %1196 = insertelement <4 x half> %1195, half %1060, i64 3, !dbg !39
  %1197 = insertelement <4 x half> poison, half %1061, i64 0, !dbg !39
  %1198 = insertelement <4 x half> %1197, half %1062, i64 1, !dbg !39
  %1199 = insertelement <4 x half> %1198, half %1063, i64 2, !dbg !39
  %1200 = insertelement <4 x half> %1199, half %1064, i64 3, !dbg !39
  %1201 = shufflevector <2 x float> %969, <2 x float> %970, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1202 = shufflevector <2 x float> %971, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1203 = shufflevector <16 x float> %1201, <16 x float> %1202, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1204 = shufflevector <2 x float> %972, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1205 = shufflevector <16 x float> %1203, <16 x float> %1204, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1206 = shufflevector <2 x float> %973, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1207 = shufflevector <16 x float> %1205, <16 x float> %1206, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1208 = shufflevector <2 x float> %974, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1209 = shufflevector <16 x float> %1207, <16 x float> %1208, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1210 = shufflevector <2 x float> %975, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1211 = shufflevector <16 x float> %1209, <16 x float> %1210, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !39
  %1212 = shufflevector <2 x float> %976, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1213 = shufflevector <16 x float> %1211, <16 x float> %1212, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !39
  %1214 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1073, <4 x half> %1140, <16 x float> %1213, i32 0, i32 0, i32 0), !dbg !39
  %1215 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1074, <4 x half> %1144, <16 x float> %1214, i32 0, i32 0, i32 0), !dbg !39
  %1216 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1075, <4 x half> %1148, <16 x float> %1215, i32 0, i32 0, i32 0), !dbg !39
  %1217 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1076, <4 x half> %1152, <16 x float> %1216, i32 0, i32 0, i32 0), !dbg !39
  %1218 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1077, <4 x half> %1156, <16 x float> %1217, i32 0, i32 0, i32 0), !dbg !39
  %1219 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1078, <4 x half> %1160, <16 x float> %1218, i32 0, i32 0, i32 0), !dbg !39
  %1220 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1079, <4 x half> %1164, <16 x float> %1219, i32 0, i32 0, i32 0), !dbg !39
  %1221 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1080, <4 x half> %1168, <16 x float> %1220, i32 0, i32 0, i32 0), !dbg !39
  %1222 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1081, <4 x half> %1172, <16 x float> %1221, i32 0, i32 0, i32 0), !dbg !39
  %1223 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1082, <4 x half> %1176, <16 x float> %1222, i32 0, i32 0, i32 0), !dbg !39
  %1224 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1083, <4 x half> %1180, <16 x float> %1223, i32 0, i32 0, i32 0), !dbg !39
  %1225 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1084, <4 x half> %1184, <16 x float> %1224, i32 0, i32 0, i32 0), !dbg !39
  %1226 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1085, <4 x half> %1188, <16 x float> %1225, i32 0, i32 0, i32 0), !dbg !39
  %1227 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1086, <4 x half> %1192, <16 x float> %1226, i32 0, i32 0, i32 0), !dbg !39
  %1228 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1087, <4 x half> %1196, <16 x float> %1227, i32 0, i32 0, i32 0), !dbg !39
  %1229 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1088, <4 x half> %1200, <16 x float> %1228, i32 0, i32 0, i32 0), !dbg !39
  %1230 = shufflevector <2 x float> %977, <2 x float> %978, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1231 = shufflevector <2 x float> %979, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1232 = shufflevector <16 x float> %1230, <16 x float> %1231, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1233 = shufflevector <2 x float> %980, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1234 = shufflevector <16 x float> %1232, <16 x float> %1233, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1235 = shufflevector <2 x float> %981, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1236 = shufflevector <16 x float> %1234, <16 x float> %1235, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1237 = shufflevector <2 x float> %982, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1238 = shufflevector <16 x float> %1236, <16 x float> %1237, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1239 = shufflevector <2 x float> %983, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1240 = shufflevector <16 x float> %1238, <16 x float> %1239, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !39
  %1241 = shufflevector <2 x float> %984, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1242 = shufflevector <16 x float> %1240, <16 x float> %1241, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !39
  %1243 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1089, <4 x half> %1140, <16 x float> %1242, i32 0, i32 0, i32 0), !dbg !39
  %1244 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1090, <4 x half> %1144, <16 x float> %1243, i32 0, i32 0, i32 0), !dbg !39
  %1245 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1091, <4 x half> %1148, <16 x float> %1244, i32 0, i32 0, i32 0), !dbg !39
  %1246 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1092, <4 x half> %1152, <16 x float> %1245, i32 0, i32 0, i32 0), !dbg !39
  %1247 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1093, <4 x half> %1156, <16 x float> %1246, i32 0, i32 0, i32 0), !dbg !39
  %1248 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1094, <4 x half> %1160, <16 x float> %1247, i32 0, i32 0, i32 0), !dbg !39
  %1249 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1095, <4 x half> %1164, <16 x float> %1248, i32 0, i32 0, i32 0), !dbg !39
  %1250 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1096, <4 x half> %1168, <16 x float> %1249, i32 0, i32 0, i32 0), !dbg !39
  %1251 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1097, <4 x half> %1172, <16 x float> %1250, i32 0, i32 0, i32 0), !dbg !39
  %1252 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1098, <4 x half> %1176, <16 x float> %1251, i32 0, i32 0, i32 0), !dbg !39
  %1253 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1099, <4 x half> %1180, <16 x float> %1252, i32 0, i32 0, i32 0), !dbg !39
  %1254 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1100, <4 x half> %1184, <16 x float> %1253, i32 0, i32 0, i32 0), !dbg !39
  %1255 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1101, <4 x half> %1188, <16 x float> %1254, i32 0, i32 0, i32 0), !dbg !39
  %1256 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1102, <4 x half> %1192, <16 x float> %1255, i32 0, i32 0, i32 0), !dbg !39
  %1257 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1103, <4 x half> %1196, <16 x float> %1256, i32 0, i32 0, i32 0), !dbg !39
  %1258 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1104, <4 x half> %1200, <16 x float> %1257, i32 0, i32 0, i32 0), !dbg !39
  %1259 = shufflevector <2 x float> %985, <2 x float> %986, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1260 = shufflevector <2 x float> %987, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1261 = shufflevector <16 x float> %1259, <16 x float> %1260, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1262 = shufflevector <2 x float> %988, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1263 = shufflevector <16 x float> %1261, <16 x float> %1262, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1264 = shufflevector <2 x float> %989, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1265 = shufflevector <16 x float> %1263, <16 x float> %1264, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1266 = shufflevector <2 x float> %990, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1267 = shufflevector <16 x float> %1265, <16 x float> %1266, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1268 = shufflevector <2 x float> %991, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1269 = shufflevector <16 x float> %1267, <16 x float> %1268, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !39
  %1270 = shufflevector <2 x float> %992, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1271 = shufflevector <16 x float> %1269, <16 x float> %1270, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !39
  %1272 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1105, <4 x half> %1140, <16 x float> %1271, i32 0, i32 0, i32 0), !dbg !39
  %1273 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1106, <4 x half> %1144, <16 x float> %1272, i32 0, i32 0, i32 0), !dbg !39
  %1274 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1107, <4 x half> %1148, <16 x float> %1273, i32 0, i32 0, i32 0), !dbg !39
  %1275 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1108, <4 x half> %1152, <16 x float> %1274, i32 0, i32 0, i32 0), !dbg !39
  %1276 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1109, <4 x half> %1156, <16 x float> %1275, i32 0, i32 0, i32 0), !dbg !39
  %1277 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1110, <4 x half> %1160, <16 x float> %1276, i32 0, i32 0, i32 0), !dbg !39
  %1278 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1111, <4 x half> %1164, <16 x float> %1277, i32 0, i32 0, i32 0), !dbg !39
  %1279 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1112, <4 x half> %1168, <16 x float> %1278, i32 0, i32 0, i32 0), !dbg !39
  %1280 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1113, <4 x half> %1172, <16 x float> %1279, i32 0, i32 0, i32 0), !dbg !39
  %1281 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1114, <4 x half> %1176, <16 x float> %1280, i32 0, i32 0, i32 0), !dbg !39
  %1282 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1115, <4 x half> %1180, <16 x float> %1281, i32 0, i32 0, i32 0), !dbg !39
  %1283 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1116, <4 x half> %1184, <16 x float> %1282, i32 0, i32 0, i32 0), !dbg !39
  %1284 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1117, <4 x half> %1188, <16 x float> %1283, i32 0, i32 0, i32 0), !dbg !39
  %1285 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1118, <4 x half> %1192, <16 x float> %1284, i32 0, i32 0, i32 0), !dbg !39
  %1286 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1119, <4 x half> %1196, <16 x float> %1285, i32 0, i32 0, i32 0), !dbg !39
  %1287 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1120, <4 x half> %1200, <16 x float> %1286, i32 0, i32 0, i32 0), !dbg !39
  %1288 = shufflevector <2 x float> %993, <2 x float> %994, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1289 = shufflevector <2 x float> %995, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1290 = shufflevector <16 x float> %1288, <16 x float> %1289, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1291 = shufflevector <2 x float> %996, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1292 = shufflevector <16 x float> %1290, <16 x float> %1291, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1293 = shufflevector <2 x float> %997, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1294 = shufflevector <16 x float> %1292, <16 x float> %1293, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1295 = shufflevector <2 x float> %998, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1296 = shufflevector <16 x float> %1294, <16 x float> %1295, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1297 = shufflevector <2 x float> %999, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1298 = shufflevector <16 x float> %1296, <16 x float> %1297, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !39
  %1299 = shufflevector <2 x float> %1000, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %1300 = shufflevector <16 x float> %1298, <16 x float> %1299, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !39
  %1301 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1121, <4 x half> %1140, <16 x float> %1300, i32 0, i32 0, i32 0), !dbg !39
  %1302 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1122, <4 x half> %1144, <16 x float> %1301, i32 0, i32 0, i32 0), !dbg !39
  %1303 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1123, <4 x half> %1148, <16 x float> %1302, i32 0, i32 0, i32 0), !dbg !39
  %1304 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1124, <4 x half> %1152, <16 x float> %1303, i32 0, i32 0, i32 0), !dbg !39
  %1305 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1125, <4 x half> %1156, <16 x float> %1304, i32 0, i32 0, i32 0), !dbg !39
  %1306 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1126, <4 x half> %1160, <16 x float> %1305, i32 0, i32 0, i32 0), !dbg !39
  %1307 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1127, <4 x half> %1164, <16 x float> %1306, i32 0, i32 0, i32 0), !dbg !39
  %1308 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1128, <4 x half> %1168, <16 x float> %1307, i32 0, i32 0, i32 0), !dbg !39
  %1309 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1129, <4 x half> %1172, <16 x float> %1308, i32 0, i32 0, i32 0), !dbg !39
  %1310 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1130, <4 x half> %1176, <16 x float> %1309, i32 0, i32 0, i32 0), !dbg !39
  %1311 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1131, <4 x half> %1180, <16 x float> %1310, i32 0, i32 0, i32 0), !dbg !39
  %1312 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1132, <4 x half> %1184, <16 x float> %1311, i32 0, i32 0, i32 0), !dbg !39
  %1313 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1133, <4 x half> %1188, <16 x float> %1312, i32 0, i32 0, i32 0), !dbg !39
  %1314 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1134, <4 x half> %1192, <16 x float> %1313, i32 0, i32 0, i32 0), !dbg !39
  %1315 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1135, <4 x half> %1196, <16 x float> %1314, i32 0, i32 0, i32 0), !dbg !39
  %1316 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1136, <4 x half> %1200, <16 x float> %1315, i32 0, i32 0, i32 0), !dbg !39
  %1317 = fadd float %901, %902, !dbg !40
  %1318 = fadd float %903, %1317, !dbg !40
  %1319 = fadd float %904, %1318, !dbg !40
  %1320 = fadd float %905, %1319, !dbg !40
  %1321 = fadd float %906, %1320, !dbg !40
  %1322 = fadd float %907, %1321, !dbg !40
  %1323 = fadd float %908, %1322, !dbg !40
  %1324 = fadd float %909, %1323, !dbg !40
  %1325 = fadd float %910, %1324, !dbg !40
  %1326 = fadd float %911, %1325, !dbg !40
  %1327 = fadd float %912, %1326, !dbg !40
  %1328 = fadd float %913, %1327, !dbg !40
  %1329 = fadd float %914, %1328, !dbg !40
  %1330 = fadd float %915, %1329, !dbg !40
  %1331 = fadd float %916, %1330, !dbg !40
  %1332 = fadd float %917, %1331, !dbg !40
  %1333 = fadd float %918, %1332, !dbg !40
  %1334 = fadd float %919, %1333, !dbg !40
  %1335 = fadd float %920, %1334, !dbg !40
  %1336 = fadd float %921, %1335, !dbg !40
  %1337 = fadd float %922, %1336, !dbg !40
  %1338 = fadd float %923, %1337, !dbg !40
  %1339 = fadd float %924, %1338, !dbg !40
  %1340 = fadd float %925, %1339, !dbg !40
  %1341 = fadd float %926, %1340, !dbg !40
  %1342 = fadd float %927, %1341, !dbg !40
  %1343 = fadd float %928, %1342, !dbg !40
  %1344 = fadd float %929, %1343, !dbg !40
  %1345 = fadd float %930, %1344, !dbg !40
  %1346 = fadd float %931, %1345, !dbg !40
  %1347 = fadd float %932, %1346, !dbg !40
  %1348 = fadd float %933, %1347, !dbg !40
  %1349 = fadd float %934, %1348, !dbg !40
  %1350 = fadd float %935, %1349, !dbg !40
  %1351 = fadd float %936, %1350, !dbg !40
  %1352 = fadd float %937, %1351, !dbg !40
  %1353 = fadd float %938, %1352, !dbg !40
  %1354 = fadd float %939, %1353, !dbg !40
  %1355 = fadd float %940, %1354, !dbg !40
  %1356 = fadd float %941, %1355, !dbg !40
  %1357 = fadd float %942, %1356, !dbg !40
  %1358 = fadd float %943, %1357, !dbg !40
  %1359 = fadd float %944, %1358, !dbg !40
  %1360 = fadd float %945, %1359, !dbg !40
  %1361 = fadd float %946, %1360, !dbg !40
  %1362 = fadd float %947, %1361, !dbg !40
  %1363 = fadd float %948, %1362, !dbg !40
  %1364 = fadd float %949, %1363, !dbg !40
  %1365 = fadd float %950, %1364, !dbg !40
  %1366 = fadd float %951, %1365, !dbg !40
  %1367 = fadd float %952, %1366, !dbg !40
  %1368 = fadd float %953, %1367, !dbg !40
  %1369 = fadd float %954, %1368, !dbg !40
  %1370 = fadd float %955, %1369, !dbg !40
  %1371 = fadd float %956, %1370, !dbg !40
  %1372 = fadd float %957, %1371, !dbg !40
  %1373 = fadd float %958, %1372, !dbg !40
  %1374 = fadd float %959, %1373, !dbg !40
  %1375 = fadd float %960, %1374, !dbg !40
  %1376 = fadd float %961, %1375, !dbg !40
  %1377 = fadd float %962, %1376, !dbg !40
  %1378 = fadd float %963, %1377, !dbg !40
  %1379 = fadd float %964, %1378, !dbg !40
  %1380 = bitcast float %1379 to i32, !dbg !42
  %1381 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %513, i32 %1380), !dbg !42
  %1382 = bitcast i32 %1381 to float, !dbg !42
  %1383 = fadd float %1379, %1382, !dbg !40
  %1384 = fmul float %517, %966, !dbg !43
  %1385 = fadd float %1384, %1383, !dbg !44
  %1386 = add i64 %515, 128, !dbg !45
  %indvars = trunc i64 %1386 to i32, !dbg !23
  %1387 = icmp sgt i32 %20, %indvars, !dbg !23
  %1388 = shufflevector <16 x float> %1316, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1389 = shufflevector <16 x float> %1316, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1390 = shufflevector <16 x float> %1316, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1391 = shufflevector <16 x float> %1316, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1392 = shufflevector <16 x float> %1316, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1393 = shufflevector <16 x float> %1316, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1394 = shufflevector <16 x float> %1316, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1395 = shufflevector <16 x float> %1316, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1396 = shufflevector <16 x float> %1287, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1397 = shufflevector <16 x float> %1287, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1398 = shufflevector <16 x float> %1287, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1399 = shufflevector <16 x float> %1287, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1400 = shufflevector <16 x float> %1287, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1401 = shufflevector <16 x float> %1287, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1402 = shufflevector <16 x float> %1287, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1403 = shufflevector <16 x float> %1287, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1404 = shufflevector <16 x float> %1258, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1405 = shufflevector <16 x float> %1258, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1406 = shufflevector <16 x float> %1258, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1407 = shufflevector <16 x float> %1258, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1408 = shufflevector <16 x float> %1258, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1409 = shufflevector <16 x float> %1258, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1410 = shufflevector <16 x float> %1258, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1411 = shufflevector <16 x float> %1258, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1412 = shufflevector <16 x float> %1229, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1413 = shufflevector <16 x float> %1229, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1414 = shufflevector <16 x float> %1229, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1415 = shufflevector <16 x float> %1229, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1416 = shufflevector <16 x float> %1229, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1417 = shufflevector <16 x float> %1229, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1418 = shufflevector <16 x float> %1229, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1419 = shufflevector <16 x float> %1229, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %1387, label %514, label %._crit_edge.loopexit, !dbg !23

._crit_edge.loopexit:                             ; preds = %514
  %1420 = extractelement <16 x float> %1316, i64 15, !dbg !39
  %1421 = extractelement <16 x float> %1316, i64 14, !dbg !39
  %1422 = extractelement <16 x float> %1316, i64 13, !dbg !39
  %1423 = extractelement <16 x float> %1316, i64 12, !dbg !39
  %1424 = extractelement <16 x float> %1316, i64 11, !dbg !39
  %1425 = extractelement <16 x float> %1316, i64 10, !dbg !39
  %1426 = extractelement <16 x float> %1316, i64 9, !dbg !39
  %1427 = extractelement <16 x float> %1316, i64 8, !dbg !39
  %1428 = extractelement <16 x float> %1316, i64 7, !dbg !39
  %1429 = extractelement <16 x float> %1316, i64 6, !dbg !39
  %1430 = extractelement <16 x float> %1316, i64 5, !dbg !39
  %1431 = extractelement <16 x float> %1316, i64 4, !dbg !39
  %1432 = extractelement <16 x float> %1316, i64 3, !dbg !39
  %1433 = extractelement <16 x float> %1316, i64 2, !dbg !39
  %1434 = extractelement <16 x float> %1316, i64 1, !dbg !39
  %1435 = extractelement <16 x float> %1316, i64 0, !dbg !39
  %1436 = extractelement <16 x float> %1287, i64 15, !dbg !39
  %1437 = extractelement <16 x float> %1287, i64 14, !dbg !39
  %1438 = extractelement <16 x float> %1287, i64 13, !dbg !39
  %1439 = extractelement <16 x float> %1287, i64 12, !dbg !39
  %1440 = extractelement <16 x float> %1287, i64 11, !dbg !39
  %1441 = extractelement <16 x float> %1287, i64 10, !dbg !39
  %1442 = extractelement <16 x float> %1287, i64 9, !dbg !39
  %1443 = extractelement <16 x float> %1287, i64 8, !dbg !39
  %1444 = extractelement <16 x float> %1287, i64 7, !dbg !39
  %1445 = extractelement <16 x float> %1287, i64 6, !dbg !39
  %1446 = extractelement <16 x float> %1287, i64 5, !dbg !39
  %1447 = extractelement <16 x float> %1287, i64 4, !dbg !39
  %1448 = extractelement <16 x float> %1287, i64 3, !dbg !39
  %1449 = extractelement <16 x float> %1287, i64 2, !dbg !39
  %1450 = extractelement <16 x float> %1287, i64 1, !dbg !39
  %1451 = extractelement <16 x float> %1287, i64 0, !dbg !39
  %1452 = extractelement <16 x float> %1258, i64 15, !dbg !39
  %1453 = extractelement <16 x float> %1258, i64 14, !dbg !39
  %1454 = extractelement <16 x float> %1258, i64 13, !dbg !39
  %1455 = extractelement <16 x float> %1258, i64 12, !dbg !39
  %1456 = extractelement <16 x float> %1258, i64 11, !dbg !39
  %1457 = extractelement <16 x float> %1258, i64 10, !dbg !39
  %1458 = extractelement <16 x float> %1258, i64 9, !dbg !39
  %1459 = extractelement <16 x float> %1258, i64 8, !dbg !39
  %1460 = extractelement <16 x float> %1258, i64 7, !dbg !39
  %1461 = extractelement <16 x float> %1258, i64 6, !dbg !39
  %1462 = extractelement <16 x float> %1258, i64 5, !dbg !39
  %1463 = extractelement <16 x float> %1258, i64 4, !dbg !39
  %1464 = extractelement <16 x float> %1258, i64 3, !dbg !39
  %1465 = extractelement <16 x float> %1258, i64 2, !dbg !39
  %1466 = extractelement <16 x float> %1258, i64 1, !dbg !39
  %1467 = extractelement <16 x float> %1258, i64 0, !dbg !39
  %1468 = extractelement <16 x float> %1229, i64 15, !dbg !39
  %1469 = extractelement <16 x float> %1229, i64 14, !dbg !39
  %1470 = extractelement <16 x float> %1229, i64 13, !dbg !39
  %1471 = extractelement <16 x float> %1229, i64 12, !dbg !39
  %1472 = extractelement <16 x float> %1229, i64 11, !dbg !39
  %1473 = extractelement <16 x float> %1229, i64 10, !dbg !39
  %1474 = extractelement <16 x float> %1229, i64 9, !dbg !39
  %1475 = extractelement <16 x float> %1229, i64 8, !dbg !39
  %1476 = extractelement <16 x float> %1229, i64 7, !dbg !39
  %1477 = extractelement <16 x float> %1229, i64 6, !dbg !39
  %1478 = extractelement <16 x float> %1229, i64 5, !dbg !39
  %1479 = extractelement <16 x float> %1229, i64 4, !dbg !39
  %1480 = extractelement <16 x float> %1229, i64 3, !dbg !39
  %1481 = extractelement <16 x float> %1229, i64 2, !dbg !39
  %1482 = extractelement <16 x float> %1229, i64 1, !dbg !39
  %1483 = extractelement <16 x float> %1229, i64 0, !dbg !39
  br label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %21
  %1484 = phi float [ 0.000000e+00, %21 ], [ %1483, %._crit_edge.loopexit ]
  %1485 = phi float [ 0.000000e+00, %21 ], [ %1482, %._crit_edge.loopexit ]
  %1486 = phi float [ 0.000000e+00, %21 ], [ %1481, %._crit_edge.loopexit ]
  %1487 = phi float [ 0.000000e+00, %21 ], [ %1480, %._crit_edge.loopexit ]
  %1488 = phi float [ 0.000000e+00, %21 ], [ %1479, %._crit_edge.loopexit ]
  %1489 = phi float [ 0.000000e+00, %21 ], [ %1478, %._crit_edge.loopexit ]
  %1490 = phi float [ 0.000000e+00, %21 ], [ %1477, %._crit_edge.loopexit ]
  %1491 = phi float [ 0.000000e+00, %21 ], [ %1476, %._crit_edge.loopexit ]
  %1492 = phi float [ 0.000000e+00, %21 ], [ %1475, %._crit_edge.loopexit ]
  %1493 = phi float [ 0.000000e+00, %21 ], [ %1474, %._crit_edge.loopexit ]
  %1494 = phi float [ 0.000000e+00, %21 ], [ %1473, %._crit_edge.loopexit ]
  %1495 = phi float [ 0.000000e+00, %21 ], [ %1472, %._crit_edge.loopexit ]
  %1496 = phi float [ 0.000000e+00, %21 ], [ %1471, %._crit_edge.loopexit ]
  %1497 = phi float [ 0.000000e+00, %21 ], [ %1470, %._crit_edge.loopexit ]
  %1498 = phi float [ 0.000000e+00, %21 ], [ %1469, %._crit_edge.loopexit ]
  %1499 = phi float [ 0.000000e+00, %21 ], [ %1468, %._crit_edge.loopexit ]
  %1500 = phi float [ 0.000000e+00, %21 ], [ %1467, %._crit_edge.loopexit ]
  %1501 = phi float [ 0.000000e+00, %21 ], [ %1466, %._crit_edge.loopexit ]
  %1502 = phi float [ 0.000000e+00, %21 ], [ %1465, %._crit_edge.loopexit ]
  %1503 = phi float [ 0.000000e+00, %21 ], [ %1464, %._crit_edge.loopexit ]
  %1504 = phi float [ 0.000000e+00, %21 ], [ %1463, %._crit_edge.loopexit ]
  %1505 = phi float [ 0.000000e+00, %21 ], [ %1462, %._crit_edge.loopexit ]
  %1506 = phi float [ 0.000000e+00, %21 ], [ %1461, %._crit_edge.loopexit ]
  %1507 = phi float [ 0.000000e+00, %21 ], [ %1460, %._crit_edge.loopexit ]
  %1508 = phi float [ 0.000000e+00, %21 ], [ %1459, %._crit_edge.loopexit ]
  %1509 = phi float [ 0.000000e+00, %21 ], [ %1458, %._crit_edge.loopexit ]
  %1510 = phi float [ 0.000000e+00, %21 ], [ %1457, %._crit_edge.loopexit ]
  %1511 = phi float [ 0.000000e+00, %21 ], [ %1456, %._crit_edge.loopexit ]
  %1512 = phi float [ 0.000000e+00, %21 ], [ %1455, %._crit_edge.loopexit ]
  %1513 = phi float [ 0.000000e+00, %21 ], [ %1454, %._crit_edge.loopexit ]
  %1514 = phi float [ 0.000000e+00, %21 ], [ %1453, %._crit_edge.loopexit ]
  %1515 = phi float [ 0.000000e+00, %21 ], [ %1452, %._crit_edge.loopexit ]
  %1516 = phi float [ 0.000000e+00, %21 ], [ %1451, %._crit_edge.loopexit ]
  %1517 = phi float [ 0.000000e+00, %21 ], [ %1450, %._crit_edge.loopexit ]
  %1518 = phi float [ 0.000000e+00, %21 ], [ %1449, %._crit_edge.loopexit ]
  %1519 = phi float [ 0.000000e+00, %21 ], [ %1448, %._crit_edge.loopexit ]
  %1520 = phi float [ 0.000000e+00, %21 ], [ %1447, %._crit_edge.loopexit ]
  %1521 = phi float [ 0.000000e+00, %21 ], [ %1446, %._crit_edge.loopexit ]
  %1522 = phi float [ 0.000000e+00, %21 ], [ %1445, %._crit_edge.loopexit ]
  %1523 = phi float [ 0.000000e+00, %21 ], [ %1444, %._crit_edge.loopexit ]
  %1524 = phi float [ 0.000000e+00, %21 ], [ %1443, %._crit_edge.loopexit ]
  %1525 = phi float [ 0.000000e+00, %21 ], [ %1442, %._crit_edge.loopexit ]
  %1526 = phi float [ 0.000000e+00, %21 ], [ %1441, %._crit_edge.loopexit ]
  %1527 = phi float [ 0.000000e+00, %21 ], [ %1440, %._crit_edge.loopexit ]
  %1528 = phi float [ 0.000000e+00, %21 ], [ %1439, %._crit_edge.loopexit ]
  %1529 = phi float [ 0.000000e+00, %21 ], [ %1438, %._crit_edge.loopexit ]
  %1530 = phi float [ 0.000000e+00, %21 ], [ %1437, %._crit_edge.loopexit ]
  %1531 = phi float [ 0.000000e+00, %21 ], [ %1436, %._crit_edge.loopexit ]
  %1532 = phi float [ 0.000000e+00, %21 ], [ %1435, %._crit_edge.loopexit ]
  %1533 = phi float [ 0.000000e+00, %21 ], [ %1434, %._crit_edge.loopexit ]
  %1534 = phi float [ 0.000000e+00, %21 ], [ %1433, %._crit_edge.loopexit ]
  %1535 = phi float [ 0.000000e+00, %21 ], [ %1432, %._crit_edge.loopexit ]
  %1536 = phi float [ 0.000000e+00, %21 ], [ %1431, %._crit_edge.loopexit ]
  %1537 = phi float [ 0.000000e+00, %21 ], [ %1430, %._crit_edge.loopexit ]
  %1538 = phi float [ 0.000000e+00, %21 ], [ %1429, %._crit_edge.loopexit ]
  %1539 = phi float [ 0.000000e+00, %21 ], [ %1428, %._crit_edge.loopexit ]
  %1540 = phi float [ 0.000000e+00, %21 ], [ %1427, %._crit_edge.loopexit ]
  %1541 = phi float [ 0.000000e+00, %21 ], [ %1426, %._crit_edge.loopexit ]
  %1542 = phi float [ 0.000000e+00, %21 ], [ %1425, %._crit_edge.loopexit ]
  %1543 = phi float [ 0.000000e+00, %21 ], [ %1424, %._crit_edge.loopexit ]
  %1544 = phi float [ 0.000000e+00, %21 ], [ %1423, %._crit_edge.loopexit ]
  %1545 = phi float [ 0.000000e+00, %21 ], [ %1422, %._crit_edge.loopexit ]
  %1546 = phi float [ 0.000000e+00, %21 ], [ %1421, %._crit_edge.loopexit ]
  %1547 = phi float [ 0.000000e+00, %21 ], [ %1420, %._crit_edge.loopexit ]
  %.lcssa = phi float [ 1.000000e+00, %21 ], [ %1385, %._crit_edge.loopexit ]
  %1548 = lshr exact i32 %30, 3, !dbg !14
  %1549 = or disjoint i32 %1548, 120, !dbg !14
  %1550 = zext nneg i32 %1549 to i64, !dbg !14
  %1551 = or disjoint i32 %1548, 112, !dbg !14
  %1552 = zext nneg i32 %1551 to i64, !dbg !14
  %1553 = or disjoint i32 %1548, 104, !dbg !14
  %1554 = zext nneg i32 %1553 to i64, !dbg !14
  %1555 = or disjoint i32 %1548, 96, !dbg !14
  %1556 = zext nneg i32 %1555 to i64, !dbg !14
  %1557 = or disjoint i32 %1548, 88, !dbg !14
  %1558 = zext nneg i32 %1557 to i64, !dbg !14
  %1559 = or disjoint i32 %1548, 80, !dbg !14
  %1560 = zext nneg i32 %1559 to i64, !dbg !14
  %1561 = or disjoint i32 %1548, 72, !dbg !14
  %1562 = zext nneg i32 %1561 to i64, !dbg !14
  %1563 = or disjoint i32 %1548, 64, !dbg !14
  %1564 = zext nneg i32 %1563 to i64, !dbg !14
  %1565 = or disjoint i32 %1548, 56, !dbg !14
  %1566 = zext nneg i32 %1565 to i64, !dbg !14
  %1567 = or disjoint i32 %1548, 48, !dbg !14
  %1568 = zext nneg i32 %1567 to i64, !dbg !14
  %1569 = or disjoint i32 %1548, 40, !dbg !14
  %1570 = zext nneg i32 %1569 to i64, !dbg !14
  %1571 = or disjoint i32 %1548, 32, !dbg !14
  %1572 = zext nneg i32 %1571 to i64, !dbg !14
  %1573 = or disjoint i32 %1548, 24, !dbg !14
  %1574 = zext nneg i32 %1573 to i64, !dbg !14
  %1575 = or disjoint i32 %1548, 16, !dbg !14
  %1576 = zext nneg i32 %1575 to i64, !dbg !14
  %1577 = or disjoint i32 %1548, 8, !dbg !14
  %1578 = zext nneg i32 %1577 to i64, !dbg !14
  %1579 = zext nneg i32 %1548 to i64, !dbg !14
  %1580 = zext nneg i32 %273 to i64, !dbg !14
  %1581 = fdiv float %1484, %.lcssa, !dbg !46
  %1582 = fdiv float %1485, %.lcssa, !dbg !46
  %1583 = fdiv float %1486, %.lcssa, !dbg !46
  %1584 = fdiv float %1487, %.lcssa, !dbg !46
  %1585 = fdiv float %1488, %.lcssa, !dbg !46
  %1586 = fdiv float %1489, %.lcssa, !dbg !46
  %1587 = fdiv float %1490, %.lcssa, !dbg !46
  %1588 = fdiv float %1491, %.lcssa, !dbg !46
  %1589 = fdiv float %1492, %.lcssa, !dbg !46
  %1590 = fdiv float %1493, %.lcssa, !dbg !46
  %1591 = fdiv float %1494, %.lcssa, !dbg !46
  %1592 = fdiv float %1495, %.lcssa, !dbg !46
  %1593 = fdiv float %1496, %.lcssa, !dbg !46
  %1594 = fdiv float %1497, %.lcssa, !dbg !46
  %1595 = fdiv float %1498, %.lcssa, !dbg !46
  %1596 = fdiv float %1499, %.lcssa, !dbg !46
  %1597 = fdiv float %1500, %.lcssa, !dbg !46
  %1598 = fdiv float %1501, %.lcssa, !dbg !46
  %1599 = fdiv float %1502, %.lcssa, !dbg !46
  %1600 = fdiv float %1503, %.lcssa, !dbg !46
  %1601 = fdiv float %1504, %.lcssa, !dbg !46
  %1602 = fdiv float %1505, %.lcssa, !dbg !46
  %1603 = fdiv float %1506, %.lcssa, !dbg !46
  %1604 = fdiv float %1507, %.lcssa, !dbg !46
  %1605 = fdiv float %1508, %.lcssa, !dbg !46
  %1606 = fdiv float %1509, %.lcssa, !dbg !46
  %1607 = fdiv float %1510, %.lcssa, !dbg !46
  %1608 = fdiv float %1511, %.lcssa, !dbg !46
  %1609 = fdiv float %1512, %.lcssa, !dbg !46
  %1610 = fdiv float %1513, %.lcssa, !dbg !46
  %1611 = fdiv float %1514, %.lcssa, !dbg !46
  %1612 = fdiv float %1515, %.lcssa, !dbg !46
  %1613 = fdiv float %1516, %.lcssa, !dbg !46
  %1614 = fdiv float %1517, %.lcssa, !dbg !46
  %1615 = fdiv float %1518, %.lcssa, !dbg !46
  %1616 = fdiv float %1519, %.lcssa, !dbg !46
  %1617 = fdiv float %1520, %.lcssa, !dbg !46
  %1618 = fdiv float %1521, %.lcssa, !dbg !46
  %1619 = fdiv float %1522, %.lcssa, !dbg !46
  %1620 = fdiv float %1523, %.lcssa, !dbg !46
  %1621 = fdiv float %1524, %.lcssa, !dbg !46
  %1622 = fdiv float %1525, %.lcssa, !dbg !46
  %1623 = fdiv float %1526, %.lcssa, !dbg !46
  %1624 = fdiv float %1527, %.lcssa, !dbg !46
  %1625 = fdiv float %1528, %.lcssa, !dbg !46
  %1626 = fdiv float %1529, %.lcssa, !dbg !46
  %1627 = fdiv float %1530, %.lcssa, !dbg !46
  %1628 = fdiv float %1531, %.lcssa, !dbg !46
  %1629 = fdiv float %1532, %.lcssa, !dbg !46
  %1630 = fdiv float %1533, %.lcssa, !dbg !46
  %1631 = fdiv float %1534, %.lcssa, !dbg !46
  %1632 = fdiv float %1535, %.lcssa, !dbg !46
  %1633 = fdiv float %1536, %.lcssa, !dbg !46
  %1634 = fdiv float %1537, %.lcssa, !dbg !46
  %1635 = fdiv float %1538, %.lcssa, !dbg !46
  %1636 = fdiv float %1539, %.lcssa, !dbg !46
  %1637 = fdiv float %1540, %.lcssa, !dbg !46
  %1638 = fdiv float %1541, %.lcssa, !dbg !46
  %1639 = fdiv float %1542, %.lcssa, !dbg !46
  %1640 = fdiv float %1543, %.lcssa, !dbg !46
  %1641 = fdiv float %1544, %.lcssa, !dbg !46
  %1642 = fdiv float %1545, %.lcssa, !dbg !46
  %1643 = fdiv float %1546, %.lcssa, !dbg !46
  %1644 = fdiv float %1547, %.lcssa, !dbg !46
  %1645 = getelementptr half, ptr addrspace(1) %5, i64 %24, !dbg !47
  %1646 = sext i32 %17 to i64, !dbg !48
  %1647 = fptrunc float %1581 to half, !dbg !49
  %1648 = fptrunc float %1582 to half, !dbg !49
  %1649 = fptrunc float %1583 to half, !dbg !49
  %1650 = fptrunc float %1584 to half, !dbg !49
  %1651 = fptrunc float %1585 to half, !dbg !49
  %1652 = fptrunc float %1586 to half, !dbg !49
  %1653 = fptrunc float %1587 to half, !dbg !49
  %1654 = fptrunc float %1588 to half, !dbg !49
  %1655 = fptrunc float %1589 to half, !dbg !49
  %1656 = fptrunc float %1590 to half, !dbg !49
  %1657 = fptrunc float %1591 to half, !dbg !49
  %1658 = fptrunc float %1592 to half, !dbg !49
  %1659 = fptrunc float %1593 to half, !dbg !49
  %1660 = fptrunc float %1594 to half, !dbg !49
  %1661 = fptrunc float %1595 to half, !dbg !49
  %1662 = fptrunc float %1596 to half, !dbg !49
  %1663 = fptrunc float %1597 to half, !dbg !49
  %1664 = fptrunc float %1598 to half, !dbg !49
  %1665 = fptrunc float %1599 to half, !dbg !49
  %1666 = fptrunc float %1600 to half, !dbg !49
  %1667 = fptrunc float %1601 to half, !dbg !49
  %1668 = fptrunc float %1602 to half, !dbg !49
  %1669 = fptrunc float %1603 to half, !dbg !49
  %1670 = fptrunc float %1604 to half, !dbg !49
  %1671 = fptrunc float %1605 to half, !dbg !49
  %1672 = fptrunc float %1606 to half, !dbg !49
  %1673 = fptrunc float %1607 to half, !dbg !49
  %1674 = fptrunc float %1608 to half, !dbg !49
  %1675 = fptrunc float %1609 to half, !dbg !49
  %1676 = fptrunc float %1610 to half, !dbg !49
  %1677 = fptrunc float %1611 to half, !dbg !49
  %1678 = fptrunc float %1612 to half, !dbg !49
  %1679 = fptrunc float %1613 to half, !dbg !49
  %1680 = fptrunc float %1614 to half, !dbg !49
  %1681 = fptrunc float %1615 to half, !dbg !49
  %1682 = fptrunc float %1616 to half, !dbg !49
  %1683 = fptrunc float %1617 to half, !dbg !49
  %1684 = fptrunc float %1618 to half, !dbg !49
  %1685 = fptrunc float %1619 to half, !dbg !49
  %1686 = fptrunc float %1620 to half, !dbg !49
  %1687 = fptrunc float %1621 to half, !dbg !49
  %1688 = fptrunc float %1622 to half, !dbg !49
  %1689 = fptrunc float %1623 to half, !dbg !49
  %1690 = fptrunc float %1624 to half, !dbg !49
  %1691 = fptrunc float %1625 to half, !dbg !49
  %1692 = fptrunc float %1626 to half, !dbg !49
  %1693 = fptrunc float %1627 to half, !dbg !49
  %1694 = fptrunc float %1628 to half, !dbg !49
  %1695 = fptrunc float %1629 to half, !dbg !49
  %1696 = fptrunc float %1630 to half, !dbg !49
  %1697 = fptrunc float %1631 to half, !dbg !49
  %1698 = fptrunc float %1632 to half, !dbg !49
  %1699 = fptrunc float %1633 to half, !dbg !49
  %1700 = fptrunc float %1634 to half, !dbg !49
  %1701 = fptrunc float %1635 to half, !dbg !49
  %1702 = fptrunc float %1636 to half, !dbg !49
  %1703 = fptrunc float %1637 to half, !dbg !49
  %1704 = fptrunc float %1638 to half, !dbg !49
  %1705 = fptrunc float %1639 to half, !dbg !49
  %1706 = fptrunc float %1640 to half, !dbg !49
  %1707 = fptrunc float %1641 to half, !dbg !49
  %1708 = fptrunc float %1642 to half, !dbg !49
  %1709 = fptrunc float %1643 to half, !dbg !49
  %1710 = fptrunc float %1644 to half, !dbg !49
  %1711 = mul nsw i64 %1646, %28, !dbg !50
  %1712 = mul nsw i64 %1646, %1580, !dbg !50
  %1713 = getelementptr half, ptr addrspace(1) %1645, i64 %1711, !dbg !50
  %1714 = getelementptr half, ptr addrspace(1) %1713, i64 %1712, !dbg !50
  %1715 = getelementptr half, ptr addrspace(1) %1714, i64 %1579, !dbg !50
  %1716 = getelementptr half, ptr addrspace(1) %1714, i64 %1578, !dbg !50
  %1717 = getelementptr half, ptr addrspace(1) %1714, i64 %1576, !dbg !50
  %1718 = getelementptr half, ptr addrspace(1) %1714, i64 %1574, !dbg !50
  %1719 = getelementptr half, ptr addrspace(1) %1714, i64 %1572, !dbg !50
  %1720 = getelementptr half, ptr addrspace(1) %1714, i64 %1570, !dbg !50
  %1721 = getelementptr half, ptr addrspace(1) %1714, i64 %1568, !dbg !50
  %1722 = getelementptr half, ptr addrspace(1) %1714, i64 %1566, !dbg !50
  %1723 = getelementptr half, ptr addrspace(1) %1714, i64 %1564, !dbg !50
  %1724 = getelementptr half, ptr addrspace(1) %1714, i64 %1562, !dbg !50
  %1725 = getelementptr half, ptr addrspace(1) %1714, i64 %1560, !dbg !50
  %1726 = getelementptr half, ptr addrspace(1) %1714, i64 %1558, !dbg !50
  %1727 = getelementptr half, ptr addrspace(1) %1714, i64 %1556, !dbg !50
  %1728 = getelementptr half, ptr addrspace(1) %1714, i64 %1554, !dbg !50
  %1729 = getelementptr half, ptr addrspace(1) %1714, i64 %1552, !dbg !50
  %1730 = getelementptr half, ptr addrspace(1) %1714, i64 %1550, !dbg !50
  %1731 = insertelement <4 x half> poison, half %1647, i64 0, !dbg !50
  %1732 = insertelement <4 x half> %1731, half %1648, i64 1, !dbg !50
  %1733 = insertelement <4 x half> %1732, half %1649, i64 2, !dbg !50
  %1734 = insertelement <4 x half> %1733, half %1650, i64 3, !dbg !50
  store <4 x half> %1734, ptr addrspace(1) %1715, align 16, !dbg !50
  %1735 = insertelement <4 x half> poison, half %1651, i64 0, !dbg !50
  %1736 = insertelement <4 x half> %1735, half %1652, i64 1, !dbg !50
  %1737 = insertelement <4 x half> %1736, half %1653, i64 2, !dbg !50
  %1738 = insertelement <4 x half> %1737, half %1654, i64 3, !dbg !50
  store <4 x half> %1738, ptr addrspace(1) %1716, align 16, !dbg !50
  %1739 = insertelement <4 x half> poison, half %1655, i64 0, !dbg !50
  %1740 = insertelement <4 x half> %1739, half %1656, i64 1, !dbg !50
  %1741 = insertelement <4 x half> %1740, half %1657, i64 2, !dbg !50
  %1742 = insertelement <4 x half> %1741, half %1658, i64 3, !dbg !50
  store <4 x half> %1742, ptr addrspace(1) %1717, align 16, !dbg !50
  %1743 = insertelement <4 x half> poison, half %1659, i64 0, !dbg !50
  %1744 = insertelement <4 x half> %1743, half %1660, i64 1, !dbg !50
  %1745 = insertelement <4 x half> %1744, half %1661, i64 2, !dbg !50
  %1746 = insertelement <4 x half> %1745, half %1662, i64 3, !dbg !50
  store <4 x half> %1746, ptr addrspace(1) %1718, align 16, !dbg !50
  %1747 = insertelement <4 x half> poison, half %1663, i64 0, !dbg !50
  %1748 = insertelement <4 x half> %1747, half %1664, i64 1, !dbg !50
  %1749 = insertelement <4 x half> %1748, half %1665, i64 2, !dbg !50
  %1750 = insertelement <4 x half> %1749, half %1666, i64 3, !dbg !50
  store <4 x half> %1750, ptr addrspace(1) %1719, align 16, !dbg !50
  %1751 = insertelement <4 x half> poison, half %1667, i64 0, !dbg !50
  %1752 = insertelement <4 x half> %1751, half %1668, i64 1, !dbg !50
  %1753 = insertelement <4 x half> %1752, half %1669, i64 2, !dbg !50
  %1754 = insertelement <4 x half> %1753, half %1670, i64 3, !dbg !50
  store <4 x half> %1754, ptr addrspace(1) %1720, align 16, !dbg !50
  %1755 = insertelement <4 x half> poison, half %1671, i64 0, !dbg !50
  %1756 = insertelement <4 x half> %1755, half %1672, i64 1, !dbg !50
  %1757 = insertelement <4 x half> %1756, half %1673, i64 2, !dbg !50
  %1758 = insertelement <4 x half> %1757, half %1674, i64 3, !dbg !50
  store <4 x half> %1758, ptr addrspace(1) %1721, align 16, !dbg !50
  %1759 = insertelement <4 x half> poison, half %1675, i64 0, !dbg !50
  %1760 = insertelement <4 x half> %1759, half %1676, i64 1, !dbg !50
  %1761 = insertelement <4 x half> %1760, half %1677, i64 2, !dbg !50
  %1762 = insertelement <4 x half> %1761, half %1678, i64 3, !dbg !50
  store <4 x half> %1762, ptr addrspace(1) %1722, align 16, !dbg !50
  %1763 = insertelement <4 x half> poison, half %1679, i64 0, !dbg !50
  %1764 = insertelement <4 x half> %1763, half %1680, i64 1, !dbg !50
  %1765 = insertelement <4 x half> %1764, half %1681, i64 2, !dbg !50
  %1766 = insertelement <4 x half> %1765, half %1682, i64 3, !dbg !50
  store <4 x half> %1766, ptr addrspace(1) %1723, align 16, !dbg !50
  %1767 = insertelement <4 x half> poison, half %1683, i64 0, !dbg !50
  %1768 = insertelement <4 x half> %1767, half %1684, i64 1, !dbg !50
  %1769 = insertelement <4 x half> %1768, half %1685, i64 2, !dbg !50
  %1770 = insertelement <4 x half> %1769, half %1686, i64 3, !dbg !50
  store <4 x half> %1770, ptr addrspace(1) %1724, align 16, !dbg !50
  %1771 = insertelement <4 x half> poison, half %1687, i64 0, !dbg !50
  %1772 = insertelement <4 x half> %1771, half %1688, i64 1, !dbg !50
  %1773 = insertelement <4 x half> %1772, half %1689, i64 2, !dbg !50
  %1774 = insertelement <4 x half> %1773, half %1690, i64 3, !dbg !50
  store <4 x half> %1774, ptr addrspace(1) %1725, align 16, !dbg !50
  %1775 = insertelement <4 x half> poison, half %1691, i64 0, !dbg !50
  %1776 = insertelement <4 x half> %1775, half %1692, i64 1, !dbg !50
  %1777 = insertelement <4 x half> %1776, half %1693, i64 2, !dbg !50
  %1778 = insertelement <4 x half> %1777, half %1694, i64 3, !dbg !50
  store <4 x half> %1778, ptr addrspace(1) %1726, align 16, !dbg !50
  %1779 = insertelement <4 x half> poison, half %1695, i64 0, !dbg !50
  %1780 = insertelement <4 x half> %1779, half %1696, i64 1, !dbg !50
  %1781 = insertelement <4 x half> %1780, half %1697, i64 2, !dbg !50
  %1782 = insertelement <4 x half> %1781, half %1698, i64 3, !dbg !50
  store <4 x half> %1782, ptr addrspace(1) %1727, align 16, !dbg !50
  %1783 = insertelement <4 x half> poison, half %1699, i64 0, !dbg !50
  %1784 = insertelement <4 x half> %1783, half %1700, i64 1, !dbg !50
  %1785 = insertelement <4 x half> %1784, half %1701, i64 2, !dbg !50
  %1786 = insertelement <4 x half> %1785, half %1702, i64 3, !dbg !50
  store <4 x half> %1786, ptr addrspace(1) %1728, align 16, !dbg !50
  %1787 = insertelement <4 x half> poison, half %1703, i64 0, !dbg !50
  %1788 = insertelement <4 x half> %1787, half %1704, i64 1, !dbg !50
  %1789 = insertelement <4 x half> %1788, half %1705, i64 2, !dbg !50
  %1790 = insertelement <4 x half> %1789, half %1706, i64 3, !dbg !50
  store <4 x half> %1790, ptr addrspace(1) %1729, align 16, !dbg !50
  %1791 = insertelement <4 x half> poison, half %1707, i64 0, !dbg !50
  %1792 = insertelement <4 x half> %1791, half %1708, i64 1, !dbg !50
  %1793 = insertelement <4 x half> %1792, half %1709, i64 2, !dbg !50
  %1794 = insertelement <4 x half> %1793, half %1710, i64 3, !dbg !50
  store <4 x half> %1794, ptr addrspace(1) %1730, align 16, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half>, <4 x half>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,512" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="2" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "06-fused-attention-fwd-transV.py", directory: "/amd_fork/triton/python/perf-kernels")
!4 = !DISubprogram(name: "llvm.amdgcn.exp2.f32", linkageName: "llvm.amdgcn.exp2.f32", scope: !3, file: !3, line: 108, type: !5, scopeLine: 108, spFlags: DISPFlagOptimized)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = distinct !DISubprogram(name: "_attn_fwd", linkageName: "_attn_fwd", scope: !3, file: !3, line: 39, type: !5, scopeLine: 39, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DILocation(line: 71, column: 27, scope: !7)
!9 = !DILocation(line: 72, column: 26, scope: !7)
!10 = !DILocation(line: 73, column: 45, scope: !7)
!11 = !DILocation(line: 70, column: 28, scope: !7)
!12 = !DILocation(line: 74, column: 55, scope: !7)
!13 = !DILocation(line: 74, column: 105, scope: !7)
!14 = !DILocation(line: 90, column: 16, scope: !7)
!15 = !DILocation(line: 75, column: 45, scope: !7)
!16 = !DILocation(line: 76, column: 89, scope: !7)
!17 = !DILocation(line: 77, column: 45, scope: !7)
!18 = !DILocation(line: 78, column: 89, scope: !7)
!19 = !DILocation(line: 89, column: 26, scope: !7)
!20 = !DILocation(line: 94, column: 13, scope: !7)
!21 = !DILocation(line: 94, column: 26, scope: !7)
!22 = !DILocation(line: 113, column: 24, scope: !7)
!23 = !DILocation(line: 97, column: 33, scope: !7)
!24 = !DILocation(line: 100, column: 20, scope: !7)
!25 = !DILocation(line: 104, column: 24, scope: !7)
!26 = !DILocation(line: 163, column: 27, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/triton/python/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 106, column: 42, scope: !7)
!31 = !DILocation(line: 184, column: 40, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 106, column: 31, scope: !7)
!33 = !DILocation(line: 107, column: 18, scope: !7)
!34 = !DILocation(line: 108, column: 25, scope: !7)
!35 = !DILocation(line: 110, column: 35, scope: !7)
!36 = !DILocation(line: 110, column: 29, scope: !7)
!37 = !DILocation(line: 111, column: 20, scope: !7)
!38 = !DILocation(line: 114, column: 27, scope: !7)
!39 = !DILocation(line: 114, column: 37, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !41)
!41 = !DILocation(line: 116, column: 25, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !41)
!43 = !DILocation(line: 117, column: 20, scope: !7)
!44 = !DILocation(line: 117, column: 28, scope: !7)
!45 = !DILocation(line: 121, column: 46, scope: !7)
!46 = !DILocation(line: 122, column: 16, scope: !7)
!47 = !DILocation(line: 124, column: 47, scope: !7)
!48 = !DILocation(line: 125, column: 105, scope: !7)
!49 = !DILocation(line: 126, column: 33, scope: !7)
!50 = !DILocation(line: 126, column: 26, scope: !7)
!51 = !DILocation(line: 126, column: 4, scope: !7)
