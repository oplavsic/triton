#loc = loc("/triton/python/tutorials/06-fused-attention.py":100:0)
#loc1 = loc(unknown)
#loc25 = loc("/triton/python/tutorials/06-fused-attention.py":171:74)
#loc32 = loc("/triton/python/tutorials/06-fused-attention.py":55:46)
#loc39 = loc("/triton/python/tutorials/06-fused-attention.py":58:25)
#loc53 = loc("/triton/python/tutorials/06-fused-attention.py":180:66)
#loc64 = loc("/triton/python/tutorials/06-fused-attention.py":52:46)
#loc86 = loc(callsite(#loc1 at #loc32))
#loc93 = loc(callsite(#loc1 at #loc39))
#loc122 = loc(callsite(#loc1 at #loc64))
#loc139 = loc(callsite(#loc86 at #loc25))
#loc142 = loc(callsite(#loc93 at #loc25))
#loc145 = loc(callsite(#loc122 at #loc53))
#loc148 = loc(callsite(#loc93 at #loc53))
module {
  tt.func public @_attn_fwd(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg3: f32 loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg15: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg17: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg18: i32 loc("/triton/python/tutorials/06-fused-attention.py":100:0), %arg19: i32 {tt.divisibility = 16 : i32} loc("/triton/python/tutorials/06-fused-attention.py":100:0)) attributes {noinline = false} {
    %c64_i64 = arith.constant 64 : i64 loc(#loc1)
    %c0_i64 = arith.constant 0 : i64 loc(#loc1)
    %cst = arith.constant dense<1.000000e+00> : tensor<64xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0xFF800000> : tensor<64xf32> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<-1.000000e+06> : tensor<64x64xf32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %cst_3 = arith.constant 1.44269502 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %arg18 : i32 loc(#loc4)
    %3 = arith.remsi %1, %arg18 : i32 loc(#loc5)
    %4 = arith.extsi %2 : i32 to i64 loc(#loc6)
    %5 = arith.extsi %arg6 : i32 to i64 loc(#loc7)
    %6 = arith.muli %4, %5 : i64 loc(#loc7)
    %7 = arith.extsi %3 : i32 to i64 loc(#loc8)
    %8 = arith.extsi %arg7 : i32 to i64 loc(#loc9)
    %9 = arith.muli %7, %8 : i64 loc(#loc9)
    %10 = arith.addi %6, %9 : i64 loc(#loc10)
    %11 = tt.addptr %arg0, %10 : !tt.ptr<f16>, i64 loc(#loc11)
    %12 = arith.muli %0, %c64_i32 : i32 loc(#loc12)
    %13 = arith.extsi %arg8 : i32 to i64 loc(#loc13)
    %14 = arith.extsi %12 : i32 to i64 loc(#loc13)
    %15 = tt.addptr %arg2, %10 : !tt.ptr<f16>, i64 loc(#loc14)
    %16 = arith.extsi %arg14 : i32 to i64 loc(#loc15)
    %17 = tt.addptr %arg1, %10 : !tt.ptr<f16>, i64 loc(#loc16)
    %18 = arith.extsi %arg11 : i32 to i64 loc(#loc17)
    %19 = tt.addptr %arg5, %10 : !tt.ptr<f16>, i64 loc(#loc18)
    %20 = arith.extsi %arg17 : i32 to i64 loc(#loc19)
    %21 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc20)
    %22 = tt.splat %12 : i32 -> tensor<64xi32> loc(#loc21)
    %23 = arith.addi %22, %21 : tensor<64xi32> loc(#loc21)
    %24 = arith.mulf %arg3, %cst_3 : f32 loc(#loc22)
    %25 = tt.splat %11 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>> loc(#loc23)
    %26 = tt.splat %14 : i64 -> tensor<64xi64> loc(#loc23)
    %27 = arith.extsi %21 : tensor<64xi32> to tensor<64xi64> loc(#loc23)
    %28 = arith.addi %26, %27 : tensor<64xi64> loc(#loc23)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<64xi64> -> tensor<64x1xi64> loc(#loc23)
    %30 = tt.splat %13 : i64 -> tensor<64x1xi64> loc(#loc23)
    %31 = arith.muli %29, %30 : tensor<64x1xi64> loc(#loc23)
    %32 = tt.broadcast %31 : tensor<64x1xi64> -> tensor<64x64xi64> loc(#loc23)
    %33 = tt.expand_dims %27 {axis = 0 : i32} : tensor<64xi64> -> tensor<1x64xi64> loc(#loc23)
    %34 = tt.broadcast %33 : tensor<1x64xi64> -> tensor<64x64xi64> loc(#loc23)
    %35 = arith.addi %32, %34 : tensor<64x64xi64> loc(#loc23)
    %36 = tt.addptr %25, %35 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi64> loc(#loc23)
    %37 = tt.load %36 : tensor<64x64x!tt.ptr<f16>> loc(#loc23)
    %38 = tt.splat %17 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>> loc(#loc79)
    %39 = tt.expand_dims %27 {axis = 1 : i32} : tensor<64xi64> -> tensor<64x1xi64> loc(#loc79)
    %40 = tt.broadcast %39 : tensor<64x1xi64> -> tensor<64x64xi64> loc(#loc79)
    %41 = tt.splat %18 : i64 -> tensor<1x64xi64> loc(#loc79)
    %42 = tt.splat %24 : f32 -> tensor<64xf32> loc(#loc80)
    %43 = tt.splat %24 : f32 -> tensor<64x64xf32> loc(#loc81)
    %44 = tt.splat %15 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>> loc(#loc82)
    %45 = tt.splat %16 : i64 -> tensor<64x1xi64> loc(#loc82)
    %46:5 = scf.for %arg20 = %c0_i32 to %12 step %c64_i32 iter_args(%arg21 = %cst, %arg22 = %cst_2, %arg23 = %cst_0, %arg24 = %c0_i64, %arg25 = %c0_i64) -> (tensor<64xf32>, tensor<64x64xf32>, tensor<64xf32>, i64, i64)  : i32 {
      %78 = tt.splat %arg25 : i64 -> tensor<64xi64> loc(#loc79)
      %79 = arith.addi %78, %27 : tensor<64xi64> loc(#loc79)
      %80 = tt.expand_dims %79 {axis = 0 : i32} : tensor<64xi64> -> tensor<1x64xi64> loc(#loc79)
      %81 = arith.muli %80, %41 : tensor<1x64xi64> loc(#loc79)
      %82 = tt.broadcast %81 : tensor<1x64xi64> -> tensor<64x64xi64> loc(#loc79)
      %83 = arith.addi %40, %82 : tensor<64x64xi64> loc(#loc79)
      %84 = tt.addptr %38, %83 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi64> loc(#loc79)
      %85 = tt.load %84 : tensor<64x64x!tt.ptr<f16>> loc(#loc79)
      %86 = tt.dot %37, %85, %cst_2 : tensor<64x64xf16> * tensor<64x64xf16> -> tensor<64x64xf32> loc(#loc84)
      %87 = "tt.reduce"(%86) <{axis = 1 : i32}> ({
      ^bb0(%arg26: f32 loc(callsite(#loc86 at #loc25)), %arg27: f32 loc(callsite(#loc86 at #loc25))):
        %115 = arith.maxnumf %arg26, %arg27 : f32 loc(#loc149)
        tt.reduce.return %115 : f32 loc(#loc138)
      }) : (tensor<64x64xf32>) -> tensor<64xf32> loc(#loc138)
      %88 = arith.mulf %87, %42 : tensor<64xf32> loc(#loc80)
      %89 = arith.maxnumf %arg23, %88 : tensor<64xf32> loc(#loc88)
      %90 = arith.mulf %86, %43 : tensor<64x64xf32> loc(#loc81)
      %91 = tt.expand_dims %89 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc89)
      %92 = tt.broadcast %91 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc90)
      %93 = arith.subf %90, %92 : tensor<64x64xf32> loc(#loc90)
      %94 = math.exp2 %93 : tensor<64x64xf32> loc(#loc91)
      %95 = "tt.reduce"(%94) <{axis = 1 : i32}> ({
      ^bb0(%arg26: f32 loc(callsite(#loc93 at #loc25)), %arg27: f32 loc(callsite(#loc93 at #loc25))):
        %115 = arith.addf %arg26, %arg27 : f32 loc(#loc150)
        tt.reduce.return %115 : f32 loc(#loc141)
      }) : (tensor<64x64xf32>) -> tensor<64xf32> loc(#loc141)
      %96 = arith.subf %arg23, %89 : tensor<64xf32> loc(#loc95)
      %97 = math.exp2 %96 : tensor<64xf32> loc(#loc96)
      %98 = arith.mulf %arg21, %97 : tensor<64xf32> loc(#loc97)
      %99 = arith.addf %98, %95 : tensor<64xf32> loc(#loc98)
      %100 = tt.expand_dims %97 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc99)
      %101 = tt.broadcast %100 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc100)
      %102 = arith.mulf %arg22, %101 : tensor<64x64xf32> loc(#loc100)
      %103 = tt.splat %arg24 : i64 -> tensor<64xi64> loc(#loc82)
      %104 = arith.addi %103, %27 : tensor<64xi64> loc(#loc82)
      %105 = tt.expand_dims %104 {axis = 1 : i32} : tensor<64xi64> -> tensor<64x1xi64> loc(#loc82)
      %106 = arith.muli %105, %45 : tensor<64x1xi64> loc(#loc82)
      %107 = tt.broadcast %106 : tensor<64x1xi64> -> tensor<64x64xi64> loc(#loc82)
      %108 = arith.addi %107, %34 : tensor<64x64xi64> loc(#loc82)
      %109 = tt.addptr %44, %108 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi64> loc(#loc82)
      %110 = tt.load %109 : tensor<64x64x!tt.ptr<f16>> loc(#loc82)
      %111 = arith.truncf %94 : tensor<64x64xf32> to tensor<64x64xf16> loc(#loc101)
      %112 = tt.dot %111, %110, %102 : tensor<64x64xf16> * tensor<64x64xf16> -> tensor<64x64xf32> loc(#loc102)
      %113 = arith.addi %arg24, %c64_i64 : i64 loc(#loc103)
      %114 = arith.addi %arg25, %c64_i64 : i64 loc(#loc104)
      scf.yield %99, %112, %89, %113, %114 : tensor<64xf32>, tensor<64x64xf32>, tensor<64xf32>, i64, i64 loc(#loc105)
    } loc(#loc83)
    %47 = arith.muli %0, %c64_i32 {tt.divisibility = dense<64> : tensor<1xi32>} : i32 loc(#loc106)
    %48 = arith.addi %0, %c1_i32 : i32 loc(#loc107)
    %49 = arith.muli %48, %c64_i32 : i32 loc(#loc108)
    %50 = arith.extsi %47 : i32 to i64 loc(#loc109)
    %51 = tt.splat %17 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>> loc(#loc110)
    %52 = tt.expand_dims %27 {axis = 1 : i32} : tensor<64xi64> -> tensor<64x1xi64> loc(#loc110)
    %53 = tt.broadcast %52 : tensor<64x1xi64> -> tensor<64x64xi64> loc(#loc110)
    %54 = tt.splat %18 : i64 -> tensor<1x64xi64> loc(#loc110)
    %55 = tt.expand_dims %23 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc111)
    %56 = tt.expand_dims %21 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc112)
    %57 = tt.broadcast %55 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc113)
    %58 = tt.splat %24 : f32 -> tensor<64x64xf32> loc(#loc114)
    %59 = tt.splat %15 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>> loc(#loc115)
    %60 = tt.splat %16 : i64 -> tensor<64x1xi64> loc(#loc115)
    %61:5 = scf.for %arg20 = %47 to %49 step %c64_i32 iter_args(%arg21 = %46#0, %arg22 = %46#1, %arg23 = %46#2, %arg24 = %50, %arg25 = %50) -> (tensor<64xf32>, tensor<64x64xf32>, tensor<64xf32>, i64, i64)  : i32 {
      %78 = tt.splat %arg25 : i64 -> tensor<64xi64> loc(#loc110)
      %79 = arith.addi %78, %27 : tensor<64xi64> loc(#loc110)
      %80 = tt.expand_dims %79 {axis = 0 : i32} : tensor<64xi64> -> tensor<1x64xi64> loc(#loc110)
      %81 = arith.muli %80, %54 : tensor<1x64xi64> loc(#loc110)
      %82 = tt.broadcast %81 : tensor<1x64xi64> -> tensor<64x64xi64> loc(#loc110)
      %83 = arith.addi %53, %82 : tensor<64x64xi64> loc(#loc110)
      %84 = tt.addptr %51, %83 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi64> loc(#loc110)
      %85 = tt.load %84 : tensor<64x64x!tt.ptr<f16>> loc(#loc110)
      %86 = tt.dot %37, %85, %cst_2 : tensor<64x64xf16> * tensor<64x64xf16> -> tensor<64x64xf32> loc(#loc117)
      %87 = tt.splat %arg20 : i32 -> tensor<1x64xi32> loc(#loc118)
      %88 = arith.addi %87, %56 : tensor<1x64xi32> loc(#loc118)
      %89 = tt.broadcast %88 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc113)
      %90 = arith.cmpi sge, %57, %89 : tensor<64x64xi32> loc(#loc113)
      %91 = arith.mulf %86, %58 : tensor<64x64xf32> loc(#loc114)
      %92 = arith.select %90, %cst_2, %cst_1 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc119)
      %93 = arith.addf %91, %92 : tensor<64x64xf32> loc(#loc120)
      %94 = "tt.reduce"(%93) <{axis = 1 : i32}> ({
      ^bb0(%arg26: f32 loc(callsite(#loc122 at #loc53)), %arg27: f32 loc(callsite(#loc122 at #loc53))):
        %120 = arith.maxnumf %arg26, %arg27 : f32 loc(#loc151)
        tt.reduce.return %120 : f32 loc(#loc144)
      }) : (tensor<64x64xf32>) -> tensor<64xf32> loc(#loc144)
      %95 = arith.maxnumf %arg23, %94 : tensor<64xf32> loc(#loc123)
      %96 = tt.expand_dims %95 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc124)
      %97 = tt.broadcast %96 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc125)
      %98 = arith.subf %93, %97 : tensor<64x64xf32> loc(#loc125)
      %99 = math.exp2 %98 : tensor<64x64xf32> loc(#loc126)
      %100 = "tt.reduce"(%99) <{axis = 1 : i32}> ({
      ^bb0(%arg26: f32 loc(callsite(#loc93 at #loc53)), %arg27: f32 loc(callsite(#loc93 at #loc53))):
        %120 = arith.addf %arg26, %arg27 : f32 loc(#loc152)
        tt.reduce.return %120 : f32 loc(#loc147)
      }) : (tensor<64x64xf32>) -> tensor<64xf32> loc(#loc147)
      %101 = arith.subf %arg23, %95 : tensor<64xf32> loc(#loc127)
      %102 = math.exp2 %101 : tensor<64xf32> loc(#loc128)
      %103 = arith.mulf %arg21, %102 : tensor<64xf32> loc(#loc129)
      %104 = arith.addf %103, %100 : tensor<64xf32> loc(#loc130)
      %105 = tt.expand_dims %102 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc131)
      %106 = tt.broadcast %105 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc132)
      %107 = arith.mulf %arg22, %106 : tensor<64x64xf32> loc(#loc132)
      %108 = tt.splat %arg24 : i64 -> tensor<64xi64> loc(#loc115)
      %109 = arith.addi %108, %27 : tensor<64xi64> loc(#loc115)
      %110 = tt.expand_dims %109 {axis = 1 : i32} : tensor<64xi64> -> tensor<64x1xi64> loc(#loc115)
      %111 = arith.muli %110, %60 : tensor<64x1xi64> loc(#loc115)
      %112 = tt.broadcast %111 : tensor<64x1xi64> -> tensor<64x64xi64> loc(#loc115)
      %113 = arith.addi %112, %34 : tensor<64x64xi64> loc(#loc115)
      %114 = tt.addptr %59, %113 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi64> loc(#loc115)
      %115 = tt.load %114 : tensor<64x64x!tt.ptr<f16>> loc(#loc115)
      %116 = arith.truncf %99 : tensor<64x64xf32> to tensor<64x64xf16> loc(#loc133)
      %117 = tt.dot %116, %115, %107 : tensor<64x64xf16> * tensor<64x64xf16> -> tensor<64x64xf32> loc(#loc134)
      %118 = arith.addi %arg24, %c64_i64 : i64 loc(#loc135)
      %119 = arith.addi %arg25, %c64_i64 : i64 loc(#loc136)
      scf.yield %104, %117, %95, %118, %119 : tensor<64xf32>, tensor<64x64xf32>, tensor<64xf32>, i64, i64 loc(#loc137)
    } loc(#loc116)
    %62 = math.log2 %61#0 : tensor<64xf32> loc(#loc68)
    %63 = arith.addf %61#2, %62 : tensor<64xf32> loc(#loc69)
    %64 = tt.expand_dims %61#0 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc70)
    %65 = tt.broadcast %64 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc71)
    %66 = arith.divf %61#1, %65 : tensor<64x64xf32> loc(#loc71)
    %67 = arith.muli %1, %arg19 : i32 loc(#loc72)
    %68 = tt.addptr %arg4, %67 : !tt.ptr<f32>, i32 loc(#loc73)
    %69 = tt.splat %68 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>> loc(#loc74)
    %70 = tt.addptr %69, %23 : tensor<64x!tt.ptr<f32>>, tensor<64xi32> loc(#loc74)
    tt.store %70, %63 : tensor<64x!tt.ptr<f32>> loc(#loc75)
    %71 = arith.truncf %66 : tensor<64x64xf32> to tensor<64x64xf16> loc(#loc76)
    %72 = tt.splat %19 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>> loc(#loc77)
    %73 = tt.splat %20 : i64 -> tensor<64x1xi64> loc(#loc77)
    %74 = arith.muli %29, %73 : tensor<64x1xi64> loc(#loc77)
    %75 = tt.broadcast %74 : tensor<64x1xi64> -> tensor<64x64xi64> loc(#loc77)
    %76 = arith.addi %75, %34 : tensor<64x64xi64> loc(#loc77)
    %77 = tt.addptr %72, %76 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi64> loc(#loc77)
    tt.store %77, %71 : tensor<64x64x!tt.ptr<f16>> loc(#loc77)
    tt.return loc(#loc78)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/triton/python/tutorials/06-fused-attention.py":112:28)
#loc3 = loc("/triton/python/tutorials/06-fused-attention.py":113:27)
#loc4 = loc("/triton/python/tutorials/06-fused-attention.py":114:22)
#loc5 = loc("/triton/python/tutorials/06-fused-attention.py":115:21)
#loc6 = loc("/triton/python/tutorials/06-fused-attention.py":116:26)
#loc7 = loc("/triton/python/tutorials/06-fused-attention.py":116:38)
#loc8 = loc("/triton/python/tutorials/06-fused-attention.py":116:59)
#loc9 = loc("/triton/python/tutorials/06-fused-attention.py":116:71)
#loc10 = loc("/triton/python/tutorials/06-fused-attention.py":116:50)
#loc11 = loc("/triton/python/tutorials/06-fused-attention.py":120:17)
#loc12 = loc("/triton/python/tutorials/06-fused-attention.py":123:27)
#loc13 = loc("/triton/python/tutorials/06-fused-attention.py":125:8)
#loc14 = loc("/triton/python/tutorials/06-fused-attention.py":129:17)
#loc15 = loc("/triton/python/tutorials/06-fused-attention.py":134:8)
#loc16 = loc("/triton/python/tutorials/06-fused-attention.py":137:17)
#loc17 = loc("/triton/python/tutorials/06-fused-attention.py":142:8)
#loc18 = loc("/triton/python/tutorials/06-fused-attention.py":145:19)
#loc19 = loc("/triton/python/tutorials/06-fused-attention.py":150:8)
#loc20 = loc("/triton/python/tutorials/06-fused-attention.py":153:46)
#loc21 = loc("/triton/python/tutorials/06-fused-attention.py":153:33)
#loc22 = loc("/triton/python/tutorials/06-fused-attention.py":161:16)
#loc23 = loc("/triton/python/tutorials/06-fused-attention.py":163:16)
#loc24 = loc("/triton/python/tutorials/06-fused-attention.py":47:20)
#loc26 = loc("/triton/python/tutorials/06-fused-attention.py":55:51)
#loc27 = loc("/triton/python/tutorials/06-fused-attention.py":56:22)
#loc28 = loc("/triton/python/tutorials/06-fused-attention.py":65:20)
#loc29 = loc("/triton/python/tutorials/06-fused-attention.py":44:33)
#loc30 = loc("/triton/python/tutorials/06-fused-attention.py":48:23)
#loc31 = loc("/triton/python/triton/language/standard.py":184:40)
#loc33 = loc("/triton/python/triton/language/standard.py":163:27)
#loc34 = loc("/triton/python/tutorials/06-fused-attention.py":55:35)
#loc35 = loc("/triton/python/tutorials/06-fused-attention.py":56:38)
#loc36 = loc("/triton/python/tutorials/06-fused-attention.py":56:33)
#loc37 = loc("/triton/python/tutorials/06-fused-attention.py":57:25)
#loc38 = loc("/triton/python/triton/language/standard.py":267:36)
#loc40 = loc("/triton/python/triton/language/standard.py":256:15)
#loc41 = loc("/triton/python/tutorials/06-fused-attention.py":60:35)
#loc42 = loc("/triton/python/tutorials/06-fused-attention.py":60:29)
#loc43 = loc("/triton/python/tutorials/06-fused-attention.py":61:20)
#loc44 = loc("/triton/python/tutorials/06-fused-attention.py":61:28)
#loc45 = loc("/triton/python/tutorials/06-fused-attention.py":63:26)
#loc46 = loc("/triton/python/tutorials/06-fused-attention.py":63:20)
#loc47 = loc("/triton/python/tutorials/06-fused-attention.py":69:21)
#loc48 = loc("/triton/python/tutorials/06-fused-attention.py":70:27)
#loc49 = loc("/triton/python/tutorials/06-fused-attention.py":73:46)
#loc50 = loc("/triton/python/tutorials/06-fused-attention.py":74:46)
#loc51 = loc("/triton/python/tutorials/06-fused-attention.py":74:8)
#loc52 = loc("/triton/python/tutorials/06-fused-attention.py":36:27)
#loc54 = loc("/triton/python/tutorials/06-fused-attention.py":36:47)
#loc55 = loc("/triton/python/tutorials/06-fused-attention.py":36:52)
#loc56 = loc("/triton/python/tutorials/06-fused-attention.py":41:42)
#loc57 = loc("/triton/python/tutorials/06-fused-attention.py":50:26)
#loc58 = loc("/triton/python/tutorials/06-fused-attention.py":50:56)
#loc59 = loc("/triton/python/tutorials/06-fused-attention.py":50:39)
#loc60 = loc("/triton/python/tutorials/06-fused-attention.py":51:22)
#loc61 = loc("/triton/python/tutorials/06-fused-attention.py":50:49)
#loc62 = loc("/triton/python/tutorials/06-fused-attention.py":51:51)
#loc63 = loc("/triton/python/tutorials/06-fused-attention.py":51:33)
#loc65 = loc("/triton/python/tutorials/06-fused-attention.py":52:35)
#loc66 = loc("/triton/python/tutorials/06-fused-attention.py":53:23)
#loc67 = loc("/triton/python/tutorials/06-fused-attention.py":53:18)
#loc68 = loc("/triton/python/tutorials/06-fused-attention.py":183:24)
#loc69 = loc("/triton/python/tutorials/06-fused-attention.py":183:11)
#loc70 = loc("/triton/python/tutorials/06-fused-attention.py":184:20)
#loc71 = loc("/triton/python/tutorials/06-fused-attention.py":184:16)
#loc72 = loc("/triton/python/tutorials/06-fused-attention.py":185:26)
#loc73 = loc("/triton/python/tutorials/06-fused-attention.py":185:17)
#loc74 = loc("/triton/python/tutorials/06-fused-attention.py":185:34)
#loc75 = loc("/triton/python/tutorials/06-fused-attention.py":186:21)
#loc76 = loc("/triton/python/tutorials/06-fused-attention.py":187:33)
#loc77 = loc("/triton/python/tutorials/06-fused-attention.py":187:26)
#loc78 = loc("/triton/python/tutorials/06-fused-attention.py":187:4)
#loc79 = loc(callsite(#loc24 at #loc25))
#loc80 = loc(callsite(#loc26 at #loc25))
#loc81 = loc(callsite(#loc27 at #loc25))
#loc82 = loc(callsite(#loc28 at #loc25))
#loc83 = loc(callsite(#loc29 at #loc25))
#loc84 = loc(callsite(#loc30 at #loc25))
#loc85 = loc(callsite(#loc31 at #loc32))
#loc87 = loc(callsite(#loc33 at #loc31))
#loc88 = loc(callsite(#loc34 at #loc25))
#loc89 = loc(callsite(#loc35 at #loc25))
#loc90 = loc(callsite(#loc36 at #loc25))
#loc91 = loc(callsite(#loc37 at #loc25))
#loc92 = loc(callsite(#loc38 at #loc39))
#loc94 = loc(callsite(#loc40 at #loc38))
#loc95 = loc(callsite(#loc41 at #loc25))
#loc96 = loc(callsite(#loc42 at #loc25))
#loc97 = loc(callsite(#loc43 at #loc25))
#loc98 = loc(callsite(#loc44 at #loc25))
#loc99 = loc(callsite(#loc45 at #loc25))
#loc100 = loc(callsite(#loc46 at #loc25))
#loc101 = loc(callsite(#loc47 at #loc25))
#loc102 = loc(callsite(#loc48 at #loc25))
#loc103 = loc(callsite(#loc49 at #loc25))
#loc104 = loc(callsite(#loc50 at #loc25))
#loc105 = loc(callsite(#loc51 at #loc25))
#loc106 = loc(callsite(#loc52 at #loc53))
#loc107 = loc(callsite(#loc54 at #loc53))
#loc108 = loc(callsite(#loc55 at #loc53))
#loc109 = loc(callsite(#loc56 at #loc53))
#loc110 = loc(callsite(#loc24 at #loc53))
#loc111 = loc(callsite(#loc57 at #loc53))
#loc112 = loc(callsite(#loc58 at #loc53))
#loc113 = loc(callsite(#loc59 at #loc53))
#loc114 = loc(callsite(#loc60 at #loc53))
#loc115 = loc(callsite(#loc28 at #loc53))
#loc116 = loc(callsite(#loc29 at #loc53))
#loc117 = loc(callsite(#loc30 at #loc53))
#loc118 = loc(callsite(#loc61 at #loc53))
#loc119 = loc(callsite(#loc62 at #loc53))
#loc120 = loc(callsite(#loc63 at #loc53))
#loc121 = loc(callsite(#loc31 at #loc64))
#loc123 = loc(callsite(#loc65 at #loc53))
#loc124 = loc(callsite(#loc66 at #loc53))
#loc125 = loc(callsite(#loc67 at #loc53))
#loc126 = loc(callsite(#loc37 at #loc53))
#loc127 = loc(callsite(#loc41 at #loc53))
#loc128 = loc(callsite(#loc42 at #loc53))
#loc129 = loc(callsite(#loc43 at #loc53))
#loc130 = loc(callsite(#loc44 at #loc53))
#loc131 = loc(callsite(#loc45 at #loc53))
#loc132 = loc(callsite(#loc46 at #loc53))
#loc133 = loc(callsite(#loc47 at #loc53))
#loc134 = loc(callsite(#loc48 at #loc53))
#loc135 = loc(callsite(#loc49 at #loc53))
#loc136 = loc(callsite(#loc50 at #loc53))
#loc137 = loc(callsite(#loc51 at #loc53))
#loc138 = loc(callsite(#loc85 at #loc25))
#loc140 = loc(callsite(#loc87 at #loc32))
#loc141 = loc(callsite(#loc92 at #loc25))
#loc143 = loc(callsite(#loc94 at #loc39))
#loc144 = loc(callsite(#loc121 at #loc53))
#loc146 = loc(callsite(#loc87 at #loc64))
#loc147 = loc(callsite(#loc92 at #loc53))
#loc149 = loc(callsite(#loc140 at #loc25))
#loc150 = loc(callsite(#loc143 at #loc25))
#loc151 = loc(callsite(#loc146 at #loc53))
#loc152 = loc(callsite(#loc143 at #loc53))
