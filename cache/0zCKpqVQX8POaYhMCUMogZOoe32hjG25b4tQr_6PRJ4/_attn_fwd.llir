; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !6 float @llvm.amdgcn.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_attn_fwd(ptr addrspace(1) nocapture readonly %0, ptr addrspace(1) nocapture readonly %1, ptr addrspace(1) nocapture readonly %2, float %3, ptr addrspace(1) nocapture writeonly %4, ptr addrspace(1) nocapture writeonly %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19) local_unnamed_addr #1 !dbg !9 {
  %21 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !10
  %.frozen = freeze i32 %18, !dbg !11
  %22 = sdiv i32 %21, %.frozen, !dbg !11
  %23 = sext i32 %22 to i64, !dbg !12
  %24 = sext i32 %6 to i64, !dbg !13
  %25 = mul nsw i64 %23, %24, !dbg !13
  %26 = mul i32 %22, %.frozen, !dbg !14
  %.decomposed = sub i32 %21, %26, !dbg !14
  %27 = sext i32 %.decomposed to i64, !dbg !15
  %28 = sext i32 %7 to i64, !dbg !16
  %29 = mul nsw i64 %27, %28, !dbg !16
  %30 = add nsw i64 %29, %25, !dbg !17
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !18
  %32 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !19
  %33 = shl i32 %32, 7, !dbg !20
  %34 = sext i32 %33 to i64, !dbg !21
  %35 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !22
  %36 = and i32 %35, 63, !dbg !22
  %37 = and i32 %35, 32, !dbg !22
  %38 = lshr exact i32 %37, 3, !dbg !22
  %39 = lshr i32 %35, 3, !dbg !22
  %40 = and i32 %39, 27, !dbg !22
  %41 = or disjoint i32 %40, %38, !dbg !22
  %42 = or disjoint i32 %41, 32, !dbg !22
  %43 = or disjoint i32 %41, 64, !dbg !22
  %44 = or disjoint i32 %41, 96, !dbg !22
  %45 = zext nneg i32 %41 to i64, !dbg !23
  %46 = zext nneg i32 %42 to i64, !dbg !23
  %47 = zext nneg i32 %43 to i64, !dbg !23
  %48 = zext nneg i32 %44 to i64, !dbg !23
  %49 = or disjoint i64 %45, %34, !dbg !23
  %50 = or disjoint i64 %46, %34, !dbg !23
  %51 = or disjoint i64 %47, %34, !dbg !23
  %52 = or disjoint i64 %48, %34, !dbg !23
  %53 = sext i32 %8 to i64, !dbg !21
  %54 = mul nsw i64 %49, %53, !dbg !23
  %55 = mul nsw i64 %50, %53, !dbg !23
  %56 = mul nsw i64 %51, %53, !dbg !23
  %57 = mul nsw i64 %52, %53, !dbg !23
  %58 = shl i32 %35, 3, !dbg !24
  %59 = and i32 %58, 56, !dbg !24
  %60 = zext nneg i32 %59 to i64, !dbg !23
  %61 = getelementptr half, ptr addrspace(1) %31, i64 %54, !dbg !23
  %62 = getelementptr half, ptr addrspace(1) %61, i64 %60, !dbg !23
  %63 = getelementptr half, ptr addrspace(1) %31, i64 %55, !dbg !23
  %64 = getelementptr half, ptr addrspace(1) %63, i64 %60, !dbg !23
  %65 = getelementptr half, ptr addrspace(1) %31, i64 %56, !dbg !23
  %66 = getelementptr half, ptr addrspace(1) %65, i64 %60, !dbg !23
  %67 = getelementptr half, ptr addrspace(1) %31, i64 %57, !dbg !23
  %68 = getelementptr half, ptr addrspace(1) %67, i64 %60, !dbg !23
  %69 = load <8 x half>, ptr addrspace(1) %62, align 16, !dbg !23
  %70 = load <8 x half>, ptr addrspace(1) %64, align 16, !dbg !23
  %71 = load <8 x half>, ptr addrspace(1) %66, align 16, !dbg !23
  %72 = load <8 x half>, ptr addrspace(1) %68, align 16, !dbg !23
  %73 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !25
  %74 = sext i32 %14 to i64, !dbg !26
  %75 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !27
  %76 = sext i32 %11 to i64, !dbg !28
  %77 = and i32 %35, 31, !dbg !22
  %78 = lshr i32 %35, 1, !dbg !22
  %79 = and i32 %78, 32, !dbg !22
  %80 = and i32 %78, 96, !dbg !22
  %81 = or disjoint i32 %80, %77, !dbg !22
  %82 = and i32 %35, 127, !dbg !22
  %83 = or disjoint i32 %81, %33, !dbg !29
  %84 = or disjoint i32 %33, %82, !dbg !29
  %85 = or disjoint i32 %38, 8, !dbg !24
  %86 = or disjoint i32 %38, 16, !dbg !24
  %87 = or disjoint i32 %38, 24, !dbg !24
  %88 = or disjoint i32 %38, 32, !dbg !24
  %89 = or disjoint i32 %38, 40, !dbg !24
  %90 = or disjoint i32 %38, 48, !dbg !24
  %91 = or disjoint i32 %38, 56, !dbg !24
  %92 = fmul float %3, 0x3FF7154760000000, !dbg !30
  %93 = and i32 %78, 4, !dbg !23
  %94 = or disjoint i32 %59, %93, !dbg !23
  %95 = and i32 %78, 8, !dbg !23
  %96 = lshr exact i32 %37, 1, !dbg !23
  %97 = or disjoint i32 %96, %95, !dbg !23
  %98 = or disjoint i32 %97, %79, !dbg !23
  %99 = xor i32 %98, %94, !dbg !23
  %100 = shl nuw nsw i32 %41, 6, !dbg !23
  %101 = or disjoint i32 %99, %100, !dbg !23
  %102 = zext nneg i32 %101 to i64, !dbg !23
  %103 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %102, !dbg !23
  %104 = shufflevector <8 x half> %69, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %104, ptr addrspace(3) %103, align 8, !dbg !23
  %105 = or disjoint i32 %59, 4, !dbg !23
  %106 = or disjoint i32 %97, %93, !dbg !23
  %107 = or disjoint i32 %106, %79, !dbg !23
  %108 = xor i32 %107, %105, !dbg !23
  %109 = or disjoint i32 %108, %100, !dbg !23
  %110 = zext nneg i32 %109 to i64, !dbg !23
  %111 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %110, !dbg !23
  %112 = shufflevector <8 x half> %69, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %112, ptr addrspace(3) %111, align 8, !dbg !23
  %113 = or disjoint i32 %100, 2048, !dbg !23
  %114 = or disjoint i32 %99, %113, !dbg !23
  %115 = zext nneg i32 %114 to i64, !dbg !23
  %116 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %115, !dbg !23
  %117 = shufflevector <8 x half> %70, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %117, ptr addrspace(3) %116, align 8, !dbg !23
  %118 = or disjoint i32 %108, %113, !dbg !23
  %119 = zext nneg i32 %118 to i64, !dbg !23
  %120 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %119, !dbg !23
  %121 = shufflevector <8 x half> %70, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %121, ptr addrspace(3) %120, align 8, !dbg !23
  %122 = or disjoint i32 %100, 4096, !dbg !23
  %123 = or disjoint i32 %99, %122, !dbg !23
  %124 = zext nneg i32 %123 to i64, !dbg !23
  %125 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %124, !dbg !23
  %126 = shufflevector <8 x half> %71, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %126, ptr addrspace(3) %125, align 8, !dbg !23
  %127 = or disjoint i32 %108, %122, !dbg !23
  %128 = zext nneg i32 %127 to i64, !dbg !23
  %129 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %128, !dbg !23
  %130 = shufflevector <8 x half> %71, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %130, ptr addrspace(3) %129, align 8, !dbg !23
  %131 = or disjoint i32 %100, 6144, !dbg !23
  %132 = or disjoint i32 %99, %131, !dbg !23
  %133 = zext nneg i32 %132 to i64, !dbg !23
  %134 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %133, !dbg !23
  %135 = shufflevector <8 x half> %72, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %135, ptr addrspace(3) %134, align 8, !dbg !23
  %136 = or disjoint i32 %108, %131, !dbg !23
  %137 = zext nneg i32 %136 to i64, !dbg !23
  %138 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %137, !dbg !23
  %139 = shufflevector <8 x half> %72, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %139, ptr addrspace(3) %138, align 8, !dbg !23
  fence syncscope("workgroup") release, !dbg !23
  tail call void @llvm.amdgcn.s.barrier(), !dbg !23
  fence syncscope("workgroup") acquire, !dbg !23
  %140 = icmp ugt i32 %36, 31, !dbg !23
  %141 = zext i1 %140 to i32, !dbg !23
  %142 = and i32 %35, 15, !dbg !23
  %143 = xor i32 %142, %141, !dbg !23
  %144 = shl nuw nsw i32 %143, 2, !dbg !23
  %145 = shl nuw nsw i32 %81, 6, !dbg !23
  %146 = or disjoint i32 %144, %145, !dbg !23
  %147 = or disjoint i32 %141, 2, !dbg !23
  %148 = xor i32 %147, %142, !dbg !23
  %149 = shl nuw nsw i32 %148, 2, !dbg !23
  %150 = or disjoint i32 %149, %145, !dbg !23
  %151 = or disjoint i32 %141, 4, !dbg !23
  %152 = xor i32 %151, %142, !dbg !23
  %153 = shl nuw nsw i32 %152, 2, !dbg !23
  %154 = or disjoint i32 %153, %145, !dbg !23
  %155 = or disjoint i32 %141, 6, !dbg !23
  %156 = xor i32 %155, %142, !dbg !23
  %157 = shl nuw nsw i32 %156, 2, !dbg !23
  %158 = or disjoint i32 %157, %145, !dbg !23
  %159 = or disjoint i32 %141, 8, !dbg !23
  %160 = xor i32 %159, %142, !dbg !23
  %161 = shl nuw nsw i32 %160, 2, !dbg !23
  %162 = or disjoint i32 %161, %145, !dbg !23
  %163 = or disjoint i32 %141, 10, !dbg !23
  %164 = xor i32 %163, %142, !dbg !23
  %165 = shl nuw nsw i32 %164, 2, !dbg !23
  %166 = or disjoint i32 %165, %145, !dbg !23
  %167 = or disjoint i32 %141, 12, !dbg !23
  %168 = xor i32 %167, %142, !dbg !23
  %169 = shl nuw nsw i32 %168, 2, !dbg !23
  %170 = or disjoint i32 %169, %145, !dbg !23
  %171 = or disjoint i32 %141, 14, !dbg !23
  %172 = xor i32 %171, %142, !dbg !23
  %173 = shl nuw nsw i32 %172, 2, !dbg !23
  %174 = or disjoint i32 %173, %145, !dbg !23
  %175 = zext nneg i32 %146 to i64, !dbg !23
  %176 = getelementptr half, ptr addrspace(3) @global_smem, i64 %175, !dbg !23
  %177 = load <4 x half>, ptr addrspace(3) %176, align 8, !dbg !23
  %178 = zext nneg i32 %150 to i64, !dbg !23
  %179 = getelementptr half, ptr addrspace(3) @global_smem, i64 %178, !dbg !23
  %180 = load <4 x half>, ptr addrspace(3) %179, align 8, !dbg !23
  %181 = zext nneg i32 %154 to i64, !dbg !23
  %182 = getelementptr half, ptr addrspace(3) @global_smem, i64 %181, !dbg !23
  %183 = load <4 x half>, ptr addrspace(3) %182, align 8, !dbg !23
  %184 = zext nneg i32 %158 to i64, !dbg !23
  %185 = getelementptr half, ptr addrspace(3) @global_smem, i64 %184, !dbg !23
  %186 = load <4 x half>, ptr addrspace(3) %185, align 8, !dbg !23
  %187 = zext nneg i32 %162 to i64, !dbg !23
  %188 = getelementptr half, ptr addrspace(3) @global_smem, i64 %187, !dbg !23
  %189 = load <4 x half>, ptr addrspace(3) %188, align 8, !dbg !23
  %190 = zext nneg i32 %166 to i64, !dbg !23
  %191 = getelementptr half, ptr addrspace(3) @global_smem, i64 %190, !dbg !23
  %192 = load <4 x half>, ptr addrspace(3) %191, align 8, !dbg !23
  %193 = zext nneg i32 %170 to i64, !dbg !23
  %194 = getelementptr half, ptr addrspace(3) @global_smem, i64 %193, !dbg !23
  %195 = load <4 x half>, ptr addrspace(3) %194, align 8, !dbg !23
  %196 = zext nneg i32 %174 to i64, !dbg !23
  %197 = getelementptr half, ptr addrspace(3) @global_smem, i64 %196, !dbg !23
  %198 = load <4 x half>, ptr addrspace(3) %197, align 8, !dbg !23
  %invariant.gep = getelementptr half, ptr addrspace(1) %73, i64 %60, !dbg !31
  %invariant.gep42 = getelementptr half, ptr addrspace(1) %75, i64 %60, !dbg !31
  %199 = icmp sgt i32 %33, 0, !dbg !31
  br i1 %199, label %.lr.ph, label %._crit_edge, !dbg !31

.lr.ph:                                           ; preds = %20
  %200 = shl nuw nsw i32 %77, 6
  %201 = or disjoint i32 %144, %200
  %202 = or disjoint i32 %149, %200
  %203 = or disjoint i32 %153, %200
  %204 = or disjoint i32 %157, %200
  %205 = or disjoint i32 %161, %200
  %206 = or disjoint i32 %165, %200
  %207 = or disjoint i32 %169, %200
  %208 = or disjoint i32 %173, %200
  %209 = or disjoint i32 %200, 2048
  %210 = or disjoint i32 %144, %209
  %211 = or disjoint i32 %149, %209
  %212 = or disjoint i32 %153, %209
  %213 = or disjoint i32 %157, %209
  %214 = or disjoint i32 %161, %209
  %215 = or disjoint i32 %165, %209
  %216 = or disjoint i32 %169, %209
  %217 = or disjoint i32 %173, %209
  %218 = zext nneg i32 %201 to i64
  %219 = getelementptr half, ptr addrspace(3) @global_smem, i64 %218
  %220 = zext nneg i32 %202 to i64
  %221 = getelementptr half, ptr addrspace(3) @global_smem, i64 %220
  %222 = zext nneg i32 %203 to i64
  %223 = getelementptr half, ptr addrspace(3) @global_smem, i64 %222
  %224 = zext nneg i32 %204 to i64
  %225 = getelementptr half, ptr addrspace(3) @global_smem, i64 %224
  %226 = zext nneg i32 %205 to i64
  %227 = getelementptr half, ptr addrspace(3) @global_smem, i64 %226
  %228 = zext nneg i32 %206 to i64
  %229 = getelementptr half, ptr addrspace(3) @global_smem, i64 %228
  %230 = zext nneg i32 %207 to i64
  %231 = getelementptr half, ptr addrspace(3) @global_smem, i64 %230
  %232 = zext nneg i32 %208 to i64
  %233 = getelementptr half, ptr addrspace(3) @global_smem, i64 %232
  %234 = zext nneg i32 %210 to i64
  %235 = getelementptr half, ptr addrspace(3) @global_smem, i64 %234
  %236 = zext nneg i32 %211 to i64
  %237 = getelementptr half, ptr addrspace(3) @global_smem, i64 %236
  %238 = zext nneg i32 %212 to i64
  %239 = getelementptr half, ptr addrspace(3) @global_smem, i64 %238
  %240 = zext nneg i32 %213 to i64
  %241 = getelementptr half, ptr addrspace(3) @global_smem, i64 %240
  %242 = zext nneg i32 %214 to i64
  %243 = getelementptr half, ptr addrspace(3) @global_smem, i64 %242
  %244 = zext nneg i32 %215 to i64
  %245 = getelementptr half, ptr addrspace(3) @global_smem, i64 %244
  %246 = zext nneg i32 %216 to i64
  %247 = getelementptr half, ptr addrspace(3) @global_smem, i64 %246
  %248 = zext nneg i32 %217 to i64
  %249 = getelementptr half, ptr addrspace(3) @global_smem, i64 %248
  %250 = shl i32 %35, 2
  %251 = xor i32 %250, 128
  %252 = or disjoint i32 %100, %59
  %253 = zext nneg i32 %252 to i64
  %254 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %253
  %255 = or disjoint i32 %113, %59
  %256 = zext nneg i32 %255 to i64
  %257 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %256
  %258 = shl nuw nsw i32 %36, 3
  %259 = and i32 %258, 256
  %260 = or disjoint i32 %259, %77
  %261 = or disjoint i32 %260, 64
  %262 = or disjoint i32 %260, 128
  %263 = or disjoint i32 %260, 192
  %264 = or disjoint i32 %260, 512
  %265 = or disjoint i32 %260, 576
  %266 = or disjoint i32 %260, 640
  %267 = or disjoint i32 %260, 704
  %268 = or disjoint i32 %260, 1024
  %269 = or disjoint i32 %260, 1088
  %270 = or disjoint i32 %260, 1152
  %271 = or disjoint i32 %260, 1216
  %272 = or disjoint i32 %260, 1536
  %273 = or disjoint i32 %260, 1600
  %274 = or disjoint i32 %260, 1664
  %275 = or disjoint i32 %260, 1728
  %276 = or disjoint i32 %260, 2048
  %277 = or disjoint i32 %260, 2112
  %278 = or disjoint i32 %260, 2176
  %279 = or disjoint i32 %260, 2240
  %280 = or disjoint i32 %260, 2560
  %281 = or disjoint i32 %260, 2624
  %282 = or disjoint i32 %260, 2688
  %283 = or disjoint i32 %260, 2752
  %284 = or disjoint i32 %260, 3072
  %285 = or disjoint i32 %260, 3136
  %286 = or disjoint i32 %260, 3200
  %287 = or disjoint i32 %260, 3264
  %288 = or disjoint i32 %260, 3584
  %289 = or disjoint i32 %260, 3648
  %290 = or disjoint i32 %260, 3712
  %291 = or disjoint i32 %260, 3776
  %292 = or disjoint i32 %260, 32
  %293 = or disjoint i32 %260, 96
  %294 = or disjoint i32 %260, 160
  %295 = or disjoint i32 %260, 224
  %296 = or disjoint i32 %260, 544
  %297 = or disjoint i32 %260, 608
  %298 = or disjoint i32 %260, 672
  %299 = or disjoint i32 %260, 736
  %300 = or disjoint i32 %260, 1056
  %301 = or disjoint i32 %260, 1120
  %302 = or disjoint i32 %260, 1184
  %303 = or disjoint i32 %260, 1248
  %304 = or disjoint i32 %260, 1568
  %305 = or disjoint i32 %260, 1632
  %306 = or disjoint i32 %260, 1696
  %307 = or disjoint i32 %260, 1760
  %308 = or disjoint i32 %260, 2080
  %309 = or disjoint i32 %260, 2144
  %310 = or disjoint i32 %260, 2208
  %311 = or disjoint i32 %260, 2272
  %312 = or disjoint i32 %260, 2592
  %313 = or disjoint i32 %260, 2656
  %314 = or disjoint i32 %260, 2720
  %315 = or disjoint i32 %260, 2784
  %316 = or disjoint i32 %260, 3104
  %317 = or disjoint i32 %260, 3168
  %318 = or disjoint i32 %260, 3232
  %319 = or disjoint i32 %260, 3296
  %320 = or disjoint i32 %260, 3616
  %321 = or disjoint i32 %260, 3680
  %322 = or disjoint i32 %260, 3744
  %323 = or disjoint i32 %260, 3808
  %324 = zext nneg i32 %260 to i64
  %325 = getelementptr half, ptr addrspace(3) @global_smem, i64 %324
  %326 = zext nneg i32 %261 to i64
  %327 = getelementptr half, ptr addrspace(3) @global_smem, i64 %326
  %328 = zext nneg i32 %262 to i64
  %329 = getelementptr half, ptr addrspace(3) @global_smem, i64 %328
  %330 = zext nneg i32 %263 to i64
  %331 = getelementptr half, ptr addrspace(3) @global_smem, i64 %330
  %332 = zext nneg i32 %264 to i64
  %333 = getelementptr half, ptr addrspace(3) @global_smem, i64 %332
  %334 = zext nneg i32 %265 to i64
  %335 = getelementptr half, ptr addrspace(3) @global_smem, i64 %334
  %336 = zext nneg i32 %266 to i64
  %337 = getelementptr half, ptr addrspace(3) @global_smem, i64 %336
  %338 = zext nneg i32 %267 to i64
  %339 = getelementptr half, ptr addrspace(3) @global_smem, i64 %338
  %340 = zext nneg i32 %268 to i64
  %341 = getelementptr half, ptr addrspace(3) @global_smem, i64 %340
  %342 = zext nneg i32 %269 to i64
  %343 = getelementptr half, ptr addrspace(3) @global_smem, i64 %342
  %344 = zext nneg i32 %270 to i64
  %345 = getelementptr half, ptr addrspace(3) @global_smem, i64 %344
  %346 = zext nneg i32 %271 to i64
  %347 = getelementptr half, ptr addrspace(3) @global_smem, i64 %346
  %348 = zext nneg i32 %272 to i64
  %349 = getelementptr half, ptr addrspace(3) @global_smem, i64 %348
  %350 = zext nneg i32 %273 to i64
  %351 = getelementptr half, ptr addrspace(3) @global_smem, i64 %350
  %352 = zext nneg i32 %274 to i64
  %353 = getelementptr half, ptr addrspace(3) @global_smem, i64 %352
  %354 = zext nneg i32 %275 to i64
  %355 = getelementptr half, ptr addrspace(3) @global_smem, i64 %354
  %356 = zext nneg i32 %276 to i64
  %357 = getelementptr half, ptr addrspace(3) @global_smem, i64 %356
  %358 = zext nneg i32 %277 to i64
  %359 = getelementptr half, ptr addrspace(3) @global_smem, i64 %358
  %360 = zext nneg i32 %278 to i64
  %361 = getelementptr half, ptr addrspace(3) @global_smem, i64 %360
  %362 = zext nneg i32 %279 to i64
  %363 = getelementptr half, ptr addrspace(3) @global_smem, i64 %362
  %364 = zext nneg i32 %280 to i64
  %365 = getelementptr half, ptr addrspace(3) @global_smem, i64 %364
  %366 = zext nneg i32 %281 to i64
  %367 = getelementptr half, ptr addrspace(3) @global_smem, i64 %366
  %368 = zext nneg i32 %282 to i64
  %369 = getelementptr half, ptr addrspace(3) @global_smem, i64 %368
  %370 = zext nneg i32 %283 to i64
  %371 = getelementptr half, ptr addrspace(3) @global_smem, i64 %370
  %372 = zext nneg i32 %284 to i64
  %373 = getelementptr half, ptr addrspace(3) @global_smem, i64 %372
  %374 = zext nneg i32 %285 to i64
  %375 = getelementptr half, ptr addrspace(3) @global_smem, i64 %374
  %376 = zext nneg i32 %286 to i64
  %377 = getelementptr half, ptr addrspace(3) @global_smem, i64 %376
  %378 = zext nneg i32 %287 to i64
  %379 = getelementptr half, ptr addrspace(3) @global_smem, i64 %378
  %380 = zext nneg i32 %288 to i64
  %381 = getelementptr half, ptr addrspace(3) @global_smem, i64 %380
  %382 = zext nneg i32 %289 to i64
  %383 = getelementptr half, ptr addrspace(3) @global_smem, i64 %382
  %384 = zext nneg i32 %290 to i64
  %385 = getelementptr half, ptr addrspace(3) @global_smem, i64 %384
  %386 = zext nneg i32 %291 to i64
  %387 = getelementptr half, ptr addrspace(3) @global_smem, i64 %386
  %388 = zext nneg i32 %292 to i64
  %389 = getelementptr half, ptr addrspace(3) @global_smem, i64 %388
  %390 = zext nneg i32 %293 to i64
  %391 = getelementptr half, ptr addrspace(3) @global_smem, i64 %390
  %392 = zext nneg i32 %294 to i64
  %393 = getelementptr half, ptr addrspace(3) @global_smem, i64 %392
  %394 = zext nneg i32 %295 to i64
  %395 = getelementptr half, ptr addrspace(3) @global_smem, i64 %394
  %396 = zext nneg i32 %296 to i64
  %397 = getelementptr half, ptr addrspace(3) @global_smem, i64 %396
  %398 = zext nneg i32 %297 to i64
  %399 = getelementptr half, ptr addrspace(3) @global_smem, i64 %398
  %400 = zext nneg i32 %298 to i64
  %401 = getelementptr half, ptr addrspace(3) @global_smem, i64 %400
  %402 = zext nneg i32 %299 to i64
  %403 = getelementptr half, ptr addrspace(3) @global_smem, i64 %402
  %404 = zext nneg i32 %300 to i64
  %405 = getelementptr half, ptr addrspace(3) @global_smem, i64 %404
  %406 = zext nneg i32 %301 to i64
  %407 = getelementptr half, ptr addrspace(3) @global_smem, i64 %406
  %408 = zext nneg i32 %302 to i64
  %409 = getelementptr half, ptr addrspace(3) @global_smem, i64 %408
  %410 = zext nneg i32 %303 to i64
  %411 = getelementptr half, ptr addrspace(3) @global_smem, i64 %410
  %412 = zext nneg i32 %304 to i64
  %413 = getelementptr half, ptr addrspace(3) @global_smem, i64 %412
  %414 = zext nneg i32 %305 to i64
  %415 = getelementptr half, ptr addrspace(3) @global_smem, i64 %414
  %416 = zext nneg i32 %306 to i64
  %417 = getelementptr half, ptr addrspace(3) @global_smem, i64 %416
  %418 = zext nneg i32 %307 to i64
  %419 = getelementptr half, ptr addrspace(3) @global_smem, i64 %418
  %420 = zext nneg i32 %308 to i64
  %421 = getelementptr half, ptr addrspace(3) @global_smem, i64 %420
  %422 = zext nneg i32 %309 to i64
  %423 = getelementptr half, ptr addrspace(3) @global_smem, i64 %422
  %424 = zext nneg i32 %310 to i64
  %425 = getelementptr half, ptr addrspace(3) @global_smem, i64 %424
  %426 = zext nneg i32 %311 to i64
  %427 = getelementptr half, ptr addrspace(3) @global_smem, i64 %426
  %428 = zext nneg i32 %312 to i64
  %429 = getelementptr half, ptr addrspace(3) @global_smem, i64 %428
  %430 = zext nneg i32 %313 to i64
  %431 = getelementptr half, ptr addrspace(3) @global_smem, i64 %430
  %432 = zext nneg i32 %314 to i64
  %433 = getelementptr half, ptr addrspace(3) @global_smem, i64 %432
  %434 = zext nneg i32 %315 to i64
  %435 = getelementptr half, ptr addrspace(3) @global_smem, i64 %434
  %436 = zext nneg i32 %316 to i64
  %437 = getelementptr half, ptr addrspace(3) @global_smem, i64 %436
  %438 = zext nneg i32 %317 to i64
  %439 = getelementptr half, ptr addrspace(3) @global_smem, i64 %438
  %440 = zext nneg i32 %318 to i64
  %441 = getelementptr half, ptr addrspace(3) @global_smem, i64 %440
  %442 = zext nneg i32 %319 to i64
  %443 = getelementptr half, ptr addrspace(3) @global_smem, i64 %442
  %444 = zext nneg i32 %320 to i64
  %445 = getelementptr half, ptr addrspace(3) @global_smem, i64 %444
  %446 = zext nneg i32 %321 to i64
  %447 = getelementptr half, ptr addrspace(3) @global_smem, i64 %446
  %448 = zext nneg i32 %322 to i64
  %449 = getelementptr half, ptr addrspace(3) @global_smem, i64 %448
  %450 = zext nneg i32 %323 to i64
  %451 = getelementptr half, ptr addrspace(3) @global_smem, i64 %450
  br label %452, !dbg !31

452:                                              ; preds = %.lr.ph, %452
  %453 = phi i64 [ 0, %.lr.ph ], [ %990, %452 ]
  %454 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %586, %452 ]
  %455 = phi float [ 1.000000e+00, %.lr.ph ], [ %721, %452 ]
  %456 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %992, %452 ]
  %457 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %993, %452 ]
  %458 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %994, %452 ]
  %459 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %995, %452 ]
  %460 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %996, %452 ]
  %461 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %997, %452 ]
  %462 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %998, %452 ]
  %463 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %999, %452 ]
  %464 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1000, %452 ]
  %465 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1001, %452 ]
  %466 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1002, %452 ]
  %467 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1003, %452 ]
  %468 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1004, %452 ]
  %469 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1005, %452 ]
  %470 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1006, %452 ]
  %471 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %1007, %452 ]
  %472 = or disjoint i64 %453, %45, !dbg !34
  %473 = or disjoint i64 %453, %46, !dbg !34
  %474 = mul i64 %472, %74, !dbg !34
  %475 = mul i64 %473, %74, !dbg !34
  %gep = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %474, !dbg !34
  %gep41 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %475, !dbg !34
  %476 = load <8 x half>, ptr addrspace(1) %gep, align 16, !dbg !34
  %477 = load <8 x half>, ptr addrspace(1) %gep41, align 16, !dbg !34
  %478 = mul i64 %472, %76, !dbg !35
  %479 = mul i64 %473, %76, !dbg !35
  %gep43 = getelementptr half, ptr addrspace(1) %invariant.gep42, i64 %478, !dbg !35
  %gep45 = getelementptr half, ptr addrspace(1) %invariant.gep42, i64 %479, !dbg !35
  %480 = load <8 x half>, ptr addrspace(1) %gep43, align 16, !dbg !35
  %481 = load <8 x half>, ptr addrspace(1) %gep45, align 16, !dbg !35
  fence syncscope("workgroup") release, !dbg !35
  tail call void @llvm.amdgcn.s.barrier(), !dbg !35
  fence syncscope("workgroup") acquire, !dbg !35
  %482 = shufflevector <8 x half> %480, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !35
  store <4 x half> %482, ptr addrspace(3) %103, align 8, !dbg !35
  %483 = shufflevector <8 x half> %480, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !35
  store <4 x half> %483, ptr addrspace(3) %111, align 8, !dbg !35
  %484 = shufflevector <8 x half> %481, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !35
  store <4 x half> %484, ptr addrspace(3) %116, align 8, !dbg !35
  %485 = shufflevector <8 x half> %481, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !35
  store <4 x half> %485, ptr addrspace(3) %120, align 8, !dbg !35
  fence syncscope("workgroup") release, !dbg !35
  tail call void @llvm.amdgcn.s.barrier(), !dbg !35
  fence syncscope("workgroup") acquire, !dbg !35
  %486 = load <4 x half>, ptr addrspace(3) %219, align 8, !dbg !35
  %487 = load <4 x half>, ptr addrspace(3) %221, align 8, !dbg !35
  %488 = load <4 x half>, ptr addrspace(3) %223, align 8, !dbg !35
  %489 = load <4 x half>, ptr addrspace(3) %225, align 8, !dbg !35
  %490 = load <4 x half>, ptr addrspace(3) %227, align 8, !dbg !35
  %491 = load <4 x half>, ptr addrspace(3) %229, align 8, !dbg !35
  %492 = load <4 x half>, ptr addrspace(3) %231, align 8, !dbg !35
  %493 = load <4 x half>, ptr addrspace(3) %233, align 8, !dbg !35
  %494 = load <4 x half>, ptr addrspace(3) %235, align 8, !dbg !35
  %495 = load <4 x half>, ptr addrspace(3) %237, align 8, !dbg !35
  %496 = load <4 x half>, ptr addrspace(3) %239, align 8, !dbg !35
  %497 = load <4 x half>, ptr addrspace(3) %241, align 8, !dbg !35
  %498 = load <4 x half>, ptr addrspace(3) %243, align 8, !dbg !35
  %499 = load <4 x half>, ptr addrspace(3) %245, align 8, !dbg !35
  %500 = load <4 x half>, ptr addrspace(3) %247, align 8, !dbg !35
  %501 = load <4 x half>, ptr addrspace(3) %249, align 8, !dbg !35
  %502 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %486, <4 x half> %177, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !36
  %503 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %487, <4 x half> %180, <16 x float> %502, i32 0, i32 0, i32 0), !dbg !36
  %504 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %488, <4 x half> %183, <16 x float> %503, i32 0, i32 0, i32 0), !dbg !36
  %505 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %489, <4 x half> %186, <16 x float> %504, i32 0, i32 0, i32 0), !dbg !36
  %506 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %490, <4 x half> %189, <16 x float> %505, i32 0, i32 0, i32 0), !dbg !36
  %507 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %491, <4 x half> %192, <16 x float> %506, i32 0, i32 0, i32 0), !dbg !36
  %508 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %492, <4 x half> %195, <16 x float> %507, i32 0, i32 0, i32 0), !dbg !36
  %509 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %493, <4 x half> %198, <16 x float> %508, i32 0, i32 0, i32 0), !dbg !36
  %510 = extractelement <16 x float> %509, i64 0, !dbg !36
  %511 = extractelement <16 x float> %509, i64 1, !dbg !36
  %512 = extractelement <16 x float> %509, i64 2, !dbg !36
  %513 = extractelement <16 x float> %509, i64 3, !dbg !36
  %514 = extractelement <16 x float> %509, i64 4, !dbg !36
  %515 = extractelement <16 x float> %509, i64 5, !dbg !36
  %516 = extractelement <16 x float> %509, i64 6, !dbg !36
  %517 = extractelement <16 x float> %509, i64 7, !dbg !36
  %518 = extractelement <16 x float> %509, i64 8, !dbg !36
  %519 = extractelement <16 x float> %509, i64 9, !dbg !36
  %520 = extractelement <16 x float> %509, i64 10, !dbg !36
  %521 = extractelement <16 x float> %509, i64 11, !dbg !36
  %522 = extractelement <16 x float> %509, i64 12, !dbg !36
  %523 = extractelement <16 x float> %509, i64 13, !dbg !36
  %524 = extractelement <16 x float> %509, i64 14, !dbg !36
  %525 = extractelement <16 x float> %509, i64 15, !dbg !36
  %526 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %494, <4 x half> %177, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !36
  %527 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %495, <4 x half> %180, <16 x float> %526, i32 0, i32 0, i32 0), !dbg !36
  %528 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %496, <4 x half> %183, <16 x float> %527, i32 0, i32 0, i32 0), !dbg !36
  %529 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %497, <4 x half> %186, <16 x float> %528, i32 0, i32 0, i32 0), !dbg !36
  %530 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %498, <4 x half> %189, <16 x float> %529, i32 0, i32 0, i32 0), !dbg !36
  %531 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %499, <4 x half> %192, <16 x float> %530, i32 0, i32 0, i32 0), !dbg !36
  %532 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %500, <4 x half> %195, <16 x float> %531, i32 0, i32 0, i32 0), !dbg !36
  %533 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %501, <4 x half> %198, <16 x float> %532, i32 0, i32 0, i32 0), !dbg !36
  %534 = extractelement <16 x float> %533, i64 0, !dbg !36
  %535 = extractelement <16 x float> %533, i64 1, !dbg !36
  %536 = extractelement <16 x float> %533, i64 2, !dbg !36
  %537 = extractelement <16 x float> %533, i64 3, !dbg !36
  %538 = extractelement <16 x float> %533, i64 4, !dbg !36
  %539 = extractelement <16 x float> %533, i64 5, !dbg !36
  %540 = extractelement <16 x float> %533, i64 6, !dbg !36
  %541 = extractelement <16 x float> %533, i64 7, !dbg !36
  %542 = extractelement <16 x float> %533, i64 8, !dbg !36
  %543 = extractelement <16 x float> %533, i64 9, !dbg !36
  %544 = extractelement <16 x float> %533, i64 10, !dbg !36
  %545 = extractelement <16 x float> %533, i64 11, !dbg !36
  %546 = extractelement <16 x float> %533, i64 12, !dbg !36
  %547 = extractelement <16 x float> %533, i64 13, !dbg !36
  %548 = extractelement <16 x float> %533, i64 14, !dbg !36
  %549 = extractelement <16 x float> %533, i64 15, !dbg !36
  %550 = tail call float @llvm.maxnum.f32(float %510, float %511), !dbg !37
  %551 = tail call float @llvm.maxnum.f32(float %550, float %512), !dbg !37
  %552 = tail call float @llvm.maxnum.f32(float %551, float %513), !dbg !37
  %553 = tail call float @llvm.maxnum.f32(float %552, float %514), !dbg !37
  %554 = tail call float @llvm.maxnum.f32(float %553, float %515), !dbg !37
  %555 = tail call float @llvm.maxnum.f32(float %554, float %516), !dbg !37
  %556 = tail call float @llvm.maxnum.f32(float %555, float %517), !dbg !37
  %557 = tail call float @llvm.maxnum.f32(float %556, float %518), !dbg !37
  %558 = tail call float @llvm.maxnum.f32(float %557, float %519), !dbg !37
  %559 = tail call float @llvm.maxnum.f32(float %558, float %520), !dbg !37
  %560 = tail call float @llvm.maxnum.f32(float %559, float %521), !dbg !37
  %561 = tail call float @llvm.maxnum.f32(float %560, float %522), !dbg !37
  %562 = tail call float @llvm.maxnum.f32(float %561, float %523), !dbg !37
  %563 = tail call float @llvm.maxnum.f32(float %562, float %524), !dbg !37
  %564 = tail call float @llvm.maxnum.f32(float %563, float %525), !dbg !37
  %565 = tail call float @llvm.maxnum.f32(float %564, float %534), !dbg !37
  %566 = tail call float @llvm.maxnum.f32(float %565, float %535), !dbg !37
  %567 = tail call float @llvm.maxnum.f32(float %566, float %536), !dbg !37
  %568 = tail call float @llvm.maxnum.f32(float %567, float %537), !dbg !37
  %569 = tail call float @llvm.maxnum.f32(float %568, float %538), !dbg !37
  %570 = tail call float @llvm.maxnum.f32(float %569, float %539), !dbg !37
  %571 = tail call float @llvm.maxnum.f32(float %570, float %540), !dbg !37
  %572 = tail call float @llvm.maxnum.f32(float %571, float %541), !dbg !37
  %573 = tail call float @llvm.maxnum.f32(float %572, float %542), !dbg !37
  %574 = tail call float @llvm.maxnum.f32(float %573, float %543), !dbg !37
  %575 = tail call float @llvm.maxnum.f32(float %574, float %544), !dbg !37
  %576 = tail call float @llvm.maxnum.f32(float %575, float %545), !dbg !37
  %577 = tail call float @llvm.maxnum.f32(float %576, float %546), !dbg !37
  %578 = tail call float @llvm.maxnum.f32(float %577, float %547), !dbg !37
  %579 = tail call float @llvm.maxnum.f32(float %578, float %548), !dbg !37
  %580 = tail call float @llvm.maxnum.f32(float %579, float %549), !dbg !37
  %581 = bitcast float %580 to i32, !dbg !41
  %582 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %251, i32 %581), !dbg !41
  %583 = bitcast i32 %582 to float, !dbg !41
  %584 = tail call float @llvm.maxnum.f32(float %580, float %583), !dbg !37
  %585 = fmul float %92, %584, !dbg !42
  %586 = tail call float @llvm.maxnum.f32(float %454, float %585), !dbg !43
  %587 = fmul float %92, %510, !dbg !44
  %588 = fmul float %92, %511, !dbg !44
  %589 = fmul float %92, %512, !dbg !44
  %590 = fmul float %92, %513, !dbg !44
  %591 = fmul float %92, %514, !dbg !44
  %592 = fmul float %92, %515, !dbg !44
  %593 = fmul float %92, %516, !dbg !44
  %594 = fmul float %92, %517, !dbg !44
  %595 = fmul float %92, %518, !dbg !44
  %596 = fmul float %92, %519, !dbg !44
  %597 = fmul float %92, %520, !dbg !44
  %598 = fmul float %92, %521, !dbg !44
  %599 = fmul float %92, %522, !dbg !44
  %600 = fmul float %92, %523, !dbg !44
  %601 = fmul float %92, %524, !dbg !44
  %602 = fmul float %92, %525, !dbg !44
  %603 = fmul float %92, %534, !dbg !44
  %604 = fmul float %92, %535, !dbg !44
  %605 = fmul float %92, %536, !dbg !44
  %606 = fmul float %92, %537, !dbg !44
  %607 = fmul float %92, %538, !dbg !44
  %608 = fmul float %92, %539, !dbg !44
  %609 = fmul float %92, %540, !dbg !44
  %610 = fmul float %92, %541, !dbg !44
  %611 = fmul float %92, %542, !dbg !44
  %612 = fmul float %92, %543, !dbg !44
  %613 = fmul float %92, %544, !dbg !44
  %614 = fmul float %92, %545, !dbg !44
  %615 = fmul float %92, %546, !dbg !44
  %616 = fmul float %92, %547, !dbg !44
  %617 = fmul float %92, %548, !dbg !44
  %618 = fmul float %92, %549, !dbg !44
  %619 = fsub float %587, %586, !dbg !45
  %620 = fsub float %588, %586, !dbg !45
  %621 = fsub float %589, %586, !dbg !45
  %622 = fsub float %590, %586, !dbg !45
  %623 = fsub float %591, %586, !dbg !45
  %624 = fsub float %592, %586, !dbg !45
  %625 = fsub float %593, %586, !dbg !45
  %626 = fsub float %594, %586, !dbg !45
  %627 = fsub float %595, %586, !dbg !45
  %628 = fsub float %596, %586, !dbg !45
  %629 = fsub float %597, %586, !dbg !45
  %630 = fsub float %598, %586, !dbg !45
  %631 = fsub float %599, %586, !dbg !45
  %632 = fsub float %600, %586, !dbg !45
  %633 = fsub float %601, %586, !dbg !45
  %634 = fsub float %602, %586, !dbg !45
  %635 = fsub float %603, %586, !dbg !45
  %636 = fsub float %604, %586, !dbg !45
  %637 = fsub float %605, %586, !dbg !45
  %638 = fsub float %606, %586, !dbg !45
  %639 = fsub float %607, %586, !dbg !45
  %640 = fsub float %608, %586, !dbg !45
  %641 = fsub float %609, %586, !dbg !45
  %642 = fsub float %610, %586, !dbg !45
  %643 = fsub float %611, %586, !dbg !45
  %644 = fsub float %612, %586, !dbg !45
  %645 = fsub float %613, %586, !dbg !45
  %646 = fsub float %614, %586, !dbg !45
  %647 = fsub float %615, %586, !dbg !45
  %648 = fsub float %616, %586, !dbg !45
  %649 = fsub float %617, %586, !dbg !45
  %650 = fsub float %618, %586, !dbg !45
  %651 = tail call float @llvm.amdgcn.exp2.f32(float %619), !dbg !46
  %652 = tail call float @llvm.amdgcn.exp2.f32(float %620), !dbg !46
  %653 = tail call float @llvm.amdgcn.exp2.f32(float %621), !dbg !46
  %654 = tail call float @llvm.amdgcn.exp2.f32(float %622), !dbg !46
  %655 = tail call float @llvm.amdgcn.exp2.f32(float %623), !dbg !46
  %656 = tail call float @llvm.amdgcn.exp2.f32(float %624), !dbg !46
  %657 = tail call float @llvm.amdgcn.exp2.f32(float %625), !dbg !46
  %658 = tail call float @llvm.amdgcn.exp2.f32(float %626), !dbg !46
  %659 = tail call float @llvm.amdgcn.exp2.f32(float %627), !dbg !46
  %660 = tail call float @llvm.amdgcn.exp2.f32(float %628), !dbg !46
  %661 = tail call float @llvm.amdgcn.exp2.f32(float %629), !dbg !46
  %662 = tail call float @llvm.amdgcn.exp2.f32(float %630), !dbg !46
  %663 = tail call float @llvm.amdgcn.exp2.f32(float %631), !dbg !46
  %664 = tail call float @llvm.amdgcn.exp2.f32(float %632), !dbg !46
  %665 = tail call float @llvm.amdgcn.exp2.f32(float %633), !dbg !46
  %666 = tail call float @llvm.amdgcn.exp2.f32(float %634), !dbg !46
  %667 = tail call float @llvm.amdgcn.exp2.f32(float %635), !dbg !46
  %668 = tail call float @llvm.amdgcn.exp2.f32(float %636), !dbg !46
  %669 = tail call float @llvm.amdgcn.exp2.f32(float %637), !dbg !46
  %670 = tail call float @llvm.amdgcn.exp2.f32(float %638), !dbg !46
  %671 = tail call float @llvm.amdgcn.exp2.f32(float %639), !dbg !46
  %672 = tail call float @llvm.amdgcn.exp2.f32(float %640), !dbg !46
  %673 = tail call float @llvm.amdgcn.exp2.f32(float %641), !dbg !46
  %674 = tail call float @llvm.amdgcn.exp2.f32(float %642), !dbg !46
  %675 = tail call float @llvm.amdgcn.exp2.f32(float %643), !dbg !46
  %676 = tail call float @llvm.amdgcn.exp2.f32(float %644), !dbg !46
  %677 = tail call float @llvm.amdgcn.exp2.f32(float %645), !dbg !46
  %678 = tail call float @llvm.amdgcn.exp2.f32(float %646), !dbg !46
  %679 = tail call float @llvm.amdgcn.exp2.f32(float %647), !dbg !46
  %680 = tail call float @llvm.amdgcn.exp2.f32(float %648), !dbg !46
  %681 = tail call float @llvm.amdgcn.exp2.f32(float %649), !dbg !46
  %682 = tail call float @llvm.amdgcn.exp2.f32(float %650), !dbg !46
  %683 = fadd float %651, %652, !dbg !47
  %684 = fadd float %653, %683, !dbg !47
  %685 = fadd float %654, %684, !dbg !47
  %686 = fadd float %655, %685, !dbg !47
  %687 = fadd float %656, %686, !dbg !47
  %688 = fadd float %657, %687, !dbg !47
  %689 = fadd float %658, %688, !dbg !47
  %690 = fadd float %659, %689, !dbg !47
  %691 = fadd float %660, %690, !dbg !47
  %692 = fadd float %661, %691, !dbg !47
  %693 = fadd float %662, %692, !dbg !47
  %694 = fadd float %663, %693, !dbg !47
  %695 = fadd float %664, %694, !dbg !47
  %696 = fadd float %665, %695, !dbg !47
  %697 = fadd float %666, %696, !dbg !47
  %698 = fadd float %667, %697, !dbg !47
  %699 = fadd float %668, %698, !dbg !47
  %700 = fadd float %669, %699, !dbg !47
  %701 = fadd float %670, %700, !dbg !47
  %702 = fadd float %671, %701, !dbg !47
  %703 = fadd float %672, %702, !dbg !47
  %704 = fadd float %673, %703, !dbg !47
  %705 = fadd float %674, %704, !dbg !47
  %706 = fadd float %675, %705, !dbg !47
  %707 = fadd float %676, %706, !dbg !47
  %708 = fadd float %677, %707, !dbg !47
  %709 = fadd float %678, %708, !dbg !47
  %710 = fadd float %679, %709, !dbg !47
  %711 = fadd float %680, %710, !dbg !47
  %712 = fadd float %681, %711, !dbg !47
  %713 = fadd float %682, %712, !dbg !47
  %714 = bitcast float %713 to i32, !dbg !48
  %715 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %251, i32 %714), !dbg !48
  %716 = bitcast i32 %715 to float, !dbg !48
  %717 = fadd float %713, %716, !dbg !47
  %718 = fsub float %454, %586, !dbg !49
  %719 = tail call float @llvm.amdgcn.exp2.f32(float %718), !dbg !50
  %720 = fmul float %455, %719, !dbg !51
  %721 = fadd float %720, %717, !dbg !52
  %722 = insertelement <2 x float> poison, float %719, i64 0, !dbg !53
  %723 = shufflevector <2 x float> %722, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %724 = fmul <2 x float> %464, %723, !dbg !53
  %725 = fmul <2 x float> %465, %723, !dbg !53
  %726 = fmul <2 x float> %466, %723, !dbg !53
  %727 = fmul <2 x float> %467, %723, !dbg !53
  %728 = fmul <2 x float> %468, %723, !dbg !53
  %729 = fmul <2 x float> %469, %723, !dbg !53
  %730 = fmul <2 x float> %470, %723, !dbg !53
  %731 = fmul <2 x float> %471, %723, !dbg !53
  %732 = fmul <2 x float> %456, %723, !dbg !53
  %733 = fmul <2 x float> %457, %723, !dbg !53
  %734 = fmul <2 x float> %458, %723, !dbg !53
  %735 = fmul <2 x float> %459, %723, !dbg !53
  %736 = fmul <2 x float> %460, %723, !dbg !53
  %737 = fmul <2 x float> %461, %723, !dbg !53
  %738 = fmul <2 x float> %462, %723, !dbg !53
  %739 = fmul <2 x float> %463, %723, !dbg !53
  fence syncscope("workgroup") release, !dbg !34
  tail call void @llvm.amdgcn.s.barrier(), !dbg !34
  fence syncscope("workgroup") acquire, !dbg !34
  store <8 x half> %476, ptr addrspace(3) %254, align 16, !dbg !34
  store <8 x half> %477, ptr addrspace(3) %257, align 16, !dbg !34
  fence syncscope("workgroup") release, !dbg !34
  tail call void @llvm.amdgcn.s.barrier(), !dbg !34
  fence syncscope("workgroup") acquire, !dbg !34
  %740 = load <1 x half>, ptr addrspace(3) %325, align 2, !dbg !34
  %741 = load <1 x half>, ptr addrspace(3) %327, align 2, !dbg !34
  %742 = load <1 x half>, ptr addrspace(3) %329, align 2, !dbg !34
  %743 = shufflevector <1 x half> %742, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %744 = load <1 x half>, ptr addrspace(3) %331, align 2, !dbg !34
  %745 = shufflevector <1 x half> %744, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %746 = load <1 x half>, ptr addrspace(3) %333, align 2, !dbg !34
  %747 = load <1 x half>, ptr addrspace(3) %335, align 2, !dbg !34
  %748 = load <1 x half>, ptr addrspace(3) %337, align 2, !dbg !34
  %749 = shufflevector <1 x half> %748, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %750 = load <1 x half>, ptr addrspace(3) %339, align 2, !dbg !34
  %751 = shufflevector <1 x half> %750, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %752 = load <1 x half>, ptr addrspace(3) %341, align 2, !dbg !34
  %753 = load <1 x half>, ptr addrspace(3) %343, align 2, !dbg !34
  %754 = load <1 x half>, ptr addrspace(3) %345, align 2, !dbg !34
  %755 = shufflevector <1 x half> %754, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %756 = load <1 x half>, ptr addrspace(3) %347, align 2, !dbg !34
  %757 = shufflevector <1 x half> %756, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %758 = load <1 x half>, ptr addrspace(3) %349, align 2, !dbg !34
  %759 = load <1 x half>, ptr addrspace(3) %351, align 2, !dbg !34
  %760 = load <1 x half>, ptr addrspace(3) %353, align 2, !dbg !34
  %761 = shufflevector <1 x half> %760, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %762 = load <1 x half>, ptr addrspace(3) %355, align 2, !dbg !34
  %763 = shufflevector <1 x half> %762, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %764 = load <1 x half>, ptr addrspace(3) %357, align 2, !dbg !34
  %765 = load <1 x half>, ptr addrspace(3) %359, align 2, !dbg !34
  %766 = load <1 x half>, ptr addrspace(3) %361, align 2, !dbg !34
  %767 = shufflevector <1 x half> %766, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %768 = load <1 x half>, ptr addrspace(3) %363, align 2, !dbg !34
  %769 = shufflevector <1 x half> %768, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %770 = load <1 x half>, ptr addrspace(3) %365, align 2, !dbg !34
  %771 = load <1 x half>, ptr addrspace(3) %367, align 2, !dbg !34
  %772 = load <1 x half>, ptr addrspace(3) %369, align 2, !dbg !34
  %773 = shufflevector <1 x half> %772, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %774 = load <1 x half>, ptr addrspace(3) %371, align 2, !dbg !34
  %775 = shufflevector <1 x half> %774, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %776 = load <1 x half>, ptr addrspace(3) %373, align 2, !dbg !34
  %777 = load <1 x half>, ptr addrspace(3) %375, align 2, !dbg !34
  %778 = load <1 x half>, ptr addrspace(3) %377, align 2, !dbg !34
  %779 = shufflevector <1 x half> %778, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %780 = load <1 x half>, ptr addrspace(3) %379, align 2, !dbg !34
  %781 = shufflevector <1 x half> %780, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %782 = load <1 x half>, ptr addrspace(3) %381, align 2, !dbg !34
  %783 = load <1 x half>, ptr addrspace(3) %383, align 2, !dbg !34
  %784 = load <1 x half>, ptr addrspace(3) %385, align 2, !dbg !34
  %785 = shufflevector <1 x half> %784, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %786 = load <1 x half>, ptr addrspace(3) %387, align 2, !dbg !34
  %787 = shufflevector <1 x half> %786, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %788 = load <1 x half>, ptr addrspace(3) %389, align 2, !dbg !34
  %789 = load <1 x half>, ptr addrspace(3) %391, align 2, !dbg !34
  %790 = load <1 x half>, ptr addrspace(3) %393, align 2, !dbg !34
  %791 = shufflevector <1 x half> %790, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %792 = load <1 x half>, ptr addrspace(3) %395, align 2, !dbg !34
  %793 = shufflevector <1 x half> %792, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %794 = load <1 x half>, ptr addrspace(3) %397, align 2, !dbg !34
  %795 = load <1 x half>, ptr addrspace(3) %399, align 2, !dbg !34
  %796 = load <1 x half>, ptr addrspace(3) %401, align 2, !dbg !34
  %797 = shufflevector <1 x half> %796, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %798 = load <1 x half>, ptr addrspace(3) %403, align 2, !dbg !34
  %799 = shufflevector <1 x half> %798, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %800 = load <1 x half>, ptr addrspace(3) %405, align 2, !dbg !34
  %801 = load <1 x half>, ptr addrspace(3) %407, align 2, !dbg !34
  %802 = load <1 x half>, ptr addrspace(3) %409, align 2, !dbg !34
  %803 = shufflevector <1 x half> %802, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %804 = load <1 x half>, ptr addrspace(3) %411, align 2, !dbg !34
  %805 = shufflevector <1 x half> %804, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %806 = load <1 x half>, ptr addrspace(3) %413, align 2, !dbg !34
  %807 = load <1 x half>, ptr addrspace(3) %415, align 2, !dbg !34
  %808 = load <1 x half>, ptr addrspace(3) %417, align 2, !dbg !34
  %809 = shufflevector <1 x half> %808, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %810 = load <1 x half>, ptr addrspace(3) %419, align 2, !dbg !34
  %811 = shufflevector <1 x half> %810, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %812 = load <1 x half>, ptr addrspace(3) %421, align 2, !dbg !34
  %813 = load <1 x half>, ptr addrspace(3) %423, align 2, !dbg !34
  %814 = load <1 x half>, ptr addrspace(3) %425, align 2, !dbg !34
  %815 = shufflevector <1 x half> %814, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %816 = load <1 x half>, ptr addrspace(3) %427, align 2, !dbg !34
  %817 = shufflevector <1 x half> %816, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %818 = load <1 x half>, ptr addrspace(3) %429, align 2, !dbg !34
  %819 = load <1 x half>, ptr addrspace(3) %431, align 2, !dbg !34
  %820 = load <1 x half>, ptr addrspace(3) %433, align 2, !dbg !34
  %821 = shufflevector <1 x half> %820, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %822 = load <1 x half>, ptr addrspace(3) %435, align 2, !dbg !34
  %823 = shufflevector <1 x half> %822, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %824 = load <1 x half>, ptr addrspace(3) %437, align 2, !dbg !34
  %825 = load <1 x half>, ptr addrspace(3) %439, align 2, !dbg !34
  %826 = load <1 x half>, ptr addrspace(3) %441, align 2, !dbg !34
  %827 = shufflevector <1 x half> %826, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %828 = load <1 x half>, ptr addrspace(3) %443, align 2, !dbg !34
  %829 = shufflevector <1 x half> %828, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %830 = load <1 x half>, ptr addrspace(3) %445, align 2, !dbg !34
  %831 = load <1 x half>, ptr addrspace(3) %447, align 2, !dbg !34
  %832 = load <1 x half>, ptr addrspace(3) %449, align 2, !dbg !34
  %833 = shufflevector <1 x half> %832, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %834 = load <1 x half>, ptr addrspace(3) %451, align 2, !dbg !34
  %835 = shufflevector <1 x half> %834, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %836 = fptrunc float %651 to half, !dbg !54
  %837 = fptrunc float %652 to half, !dbg !54
  %838 = fptrunc float %653 to half, !dbg !54
  %839 = fptrunc float %654 to half, !dbg !54
  %840 = fptrunc float %655 to half, !dbg !54
  %841 = fptrunc float %656 to half, !dbg !54
  %842 = fptrunc float %657 to half, !dbg !54
  %843 = fptrunc float %658 to half, !dbg !54
  %844 = fptrunc float %659 to half, !dbg !54
  %845 = fptrunc float %660 to half, !dbg !54
  %846 = fptrunc float %661 to half, !dbg !54
  %847 = fptrunc float %662 to half, !dbg !54
  %848 = fptrunc float %663 to half, !dbg !54
  %849 = fptrunc float %664 to half, !dbg !54
  %850 = fptrunc float %665 to half, !dbg !54
  %851 = fptrunc float %666 to half, !dbg !54
  %852 = fptrunc float %667 to half, !dbg !54
  %853 = fptrunc float %668 to half, !dbg !54
  %854 = fptrunc float %669 to half, !dbg !54
  %855 = fptrunc float %670 to half, !dbg !54
  %856 = fptrunc float %671 to half, !dbg !54
  %857 = fptrunc float %672 to half, !dbg !54
  %858 = fptrunc float %673 to half, !dbg !54
  %859 = fptrunc float %674 to half, !dbg !54
  %860 = fptrunc float %675 to half, !dbg !54
  %861 = fptrunc float %676 to half, !dbg !54
  %862 = fptrunc float %677 to half, !dbg !54
  %863 = fptrunc float %678 to half, !dbg !54
  %864 = fptrunc float %679 to half, !dbg !54
  %865 = fptrunc float %680 to half, !dbg !54
  %866 = fptrunc float %681 to half, !dbg !54
  %867 = fptrunc float %682 to half, !dbg !54
  %868 = insertelement <4 x half> poison, half %836, i64 0, !dbg !55
  %869 = insertelement <4 x half> %868, half %837, i64 1, !dbg !55
  %870 = insertelement <4 x half> %869, half %838, i64 2, !dbg !55
  %871 = insertelement <4 x half> %870, half %839, i64 3, !dbg !55
  %872 = insertelement <4 x half> poison, half %840, i64 0, !dbg !55
  %873 = insertelement <4 x half> %872, half %841, i64 1, !dbg !55
  %874 = insertelement <4 x half> %873, half %842, i64 2, !dbg !55
  %875 = insertelement <4 x half> %874, half %843, i64 3, !dbg !55
  %876 = insertelement <4 x half> poison, half %844, i64 0, !dbg !55
  %877 = insertelement <4 x half> %876, half %845, i64 1, !dbg !55
  %878 = insertelement <4 x half> %877, half %846, i64 2, !dbg !55
  %879 = insertelement <4 x half> %878, half %847, i64 3, !dbg !55
  %880 = insertelement <4 x half> poison, half %848, i64 0, !dbg !55
  %881 = insertelement <4 x half> %880, half %849, i64 1, !dbg !55
  %882 = insertelement <4 x half> %881, half %850, i64 2, !dbg !55
  %883 = insertelement <4 x half> %882, half %851, i64 3, !dbg !55
  %884 = insertelement <4 x half> poison, half %852, i64 0, !dbg !55
  %885 = insertelement <4 x half> %884, half %853, i64 1, !dbg !55
  %886 = insertelement <4 x half> %885, half %854, i64 2, !dbg !55
  %887 = insertelement <4 x half> %886, half %855, i64 3, !dbg !55
  %888 = insertelement <4 x half> poison, half %856, i64 0, !dbg !55
  %889 = insertelement <4 x half> %888, half %857, i64 1, !dbg !55
  %890 = insertelement <4 x half> %889, half %858, i64 2, !dbg !55
  %891 = insertelement <4 x half> %890, half %859, i64 3, !dbg !55
  %892 = insertelement <4 x half> poison, half %860, i64 0, !dbg !55
  %893 = insertelement <4 x half> %892, half %861, i64 1, !dbg !55
  %894 = insertelement <4 x half> %893, half %862, i64 2, !dbg !55
  %895 = insertelement <4 x half> %894, half %863, i64 3, !dbg !55
  %896 = insertelement <4 x half> poison, half %864, i64 0, !dbg !55
  %897 = insertelement <4 x half> %896, half %865, i64 1, !dbg !55
  %898 = insertelement <4 x half> %897, half %866, i64 2, !dbg !55
  %899 = insertelement <4 x half> %898, half %867, i64 3, !dbg !55
  %900 = shufflevector <1 x half> %740, <1 x half> %741, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %901 = shufflevector <4 x half> %900, <4 x half> %743, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %902 = shufflevector <4 x half> %901, <4 x half> %745, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %903 = shufflevector <1 x half> %746, <1 x half> %747, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %904 = shufflevector <4 x half> %903, <4 x half> %749, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %905 = shufflevector <4 x half> %904, <4 x half> %751, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %906 = shufflevector <1 x half> %752, <1 x half> %753, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %907 = shufflevector <4 x half> %906, <4 x half> %755, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %908 = shufflevector <4 x half> %907, <4 x half> %757, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %909 = shufflevector <1 x half> %758, <1 x half> %759, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %910 = shufflevector <4 x half> %909, <4 x half> %761, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %911 = shufflevector <4 x half> %910, <4 x half> %763, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %912 = shufflevector <1 x half> %764, <1 x half> %765, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %913 = shufflevector <4 x half> %912, <4 x half> %767, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %914 = shufflevector <4 x half> %913, <4 x half> %769, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %915 = shufflevector <1 x half> %770, <1 x half> %771, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %916 = shufflevector <4 x half> %915, <4 x half> %773, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %917 = shufflevector <4 x half> %916, <4 x half> %775, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %918 = shufflevector <1 x half> %776, <1 x half> %777, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %919 = shufflevector <4 x half> %918, <4 x half> %779, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %920 = shufflevector <4 x half> %919, <4 x half> %781, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %921 = shufflevector <1 x half> %782, <1 x half> %783, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %922 = shufflevector <4 x half> %921, <4 x half> %785, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %923 = shufflevector <4 x half> %922, <4 x half> %787, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %924 = shufflevector <1 x half> %788, <1 x half> %789, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %925 = shufflevector <4 x half> %924, <4 x half> %791, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %926 = shufflevector <4 x half> %925, <4 x half> %793, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %927 = shufflevector <1 x half> %794, <1 x half> %795, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %928 = shufflevector <4 x half> %927, <4 x half> %797, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %929 = shufflevector <4 x half> %928, <4 x half> %799, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %930 = shufflevector <1 x half> %800, <1 x half> %801, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %931 = shufflevector <4 x half> %930, <4 x half> %803, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %932 = shufflevector <4 x half> %931, <4 x half> %805, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %933 = shufflevector <1 x half> %806, <1 x half> %807, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %934 = shufflevector <4 x half> %933, <4 x half> %809, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %935 = shufflevector <4 x half> %934, <4 x half> %811, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %936 = shufflevector <1 x half> %812, <1 x half> %813, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %937 = shufflevector <4 x half> %936, <4 x half> %815, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %938 = shufflevector <4 x half> %937, <4 x half> %817, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %939 = shufflevector <1 x half> %818, <1 x half> %819, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %940 = shufflevector <4 x half> %939, <4 x half> %821, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %941 = shufflevector <4 x half> %940, <4 x half> %823, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %942 = shufflevector <1 x half> %824, <1 x half> %825, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %943 = shufflevector <4 x half> %942, <4 x half> %827, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %944 = shufflevector <4 x half> %943, <4 x half> %829, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %945 = shufflevector <1 x half> %830, <1 x half> %831, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %946 = shufflevector <4 x half> %945, <4 x half> %833, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !55
  %947 = shufflevector <4 x half> %946, <4 x half> %835, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !55
  %948 = shufflevector <2 x float> %724, <2 x float> %725, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %949 = shufflevector <2 x float> %726, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %950 = shufflevector <16 x float> %948, <16 x float> %949, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %951 = shufflevector <2 x float> %727, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %952 = shufflevector <16 x float> %950, <16 x float> %951, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %953 = shufflevector <2 x float> %728, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %954 = shufflevector <16 x float> %952, <16 x float> %953, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %955 = shufflevector <2 x float> %729, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %956 = shufflevector <16 x float> %954, <16 x float> %955, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %957 = shufflevector <2 x float> %730, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %958 = shufflevector <16 x float> %956, <16 x float> %957, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !55
  %959 = shufflevector <2 x float> %731, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %960 = shufflevector <16 x float> %958, <16 x float> %959, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !55
  %961 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %902, <4 x half> %871, <16 x float> %960, i32 0, i32 0, i32 0), !dbg !55
  %962 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %905, <4 x half> %875, <16 x float> %961, i32 0, i32 0, i32 0), !dbg !55
  %963 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %908, <4 x half> %879, <16 x float> %962, i32 0, i32 0, i32 0), !dbg !55
  %964 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %911, <4 x half> %883, <16 x float> %963, i32 0, i32 0, i32 0), !dbg !55
  %965 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %914, <4 x half> %887, <16 x float> %964, i32 0, i32 0, i32 0), !dbg !55
  %966 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %917, <4 x half> %891, <16 x float> %965, i32 0, i32 0, i32 0), !dbg !55
  %967 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %920, <4 x half> %895, <16 x float> %966, i32 0, i32 0, i32 0), !dbg !55
  %968 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %923, <4 x half> %899, <16 x float> %967, i32 0, i32 0, i32 0), !dbg !55
  %969 = shufflevector <2 x float> %732, <2 x float> %733, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %970 = shufflevector <2 x float> %734, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %971 = shufflevector <16 x float> %969, <16 x float> %970, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %972 = shufflevector <2 x float> %735, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %973 = shufflevector <16 x float> %971, <16 x float> %972, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %974 = shufflevector <2 x float> %736, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %975 = shufflevector <16 x float> %973, <16 x float> %974, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %976 = shufflevector <2 x float> %737, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %977 = shufflevector <16 x float> %975, <16 x float> %976, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %978 = shufflevector <2 x float> %738, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %979 = shufflevector <16 x float> %977, <16 x float> %978, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !55
  %980 = shufflevector <2 x float> %739, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %981 = shufflevector <16 x float> %979, <16 x float> %980, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !55
  %982 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %926, <4 x half> %871, <16 x float> %981, i32 0, i32 0, i32 0), !dbg !55
  %983 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %929, <4 x half> %875, <16 x float> %982, i32 0, i32 0, i32 0), !dbg !55
  %984 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %932, <4 x half> %879, <16 x float> %983, i32 0, i32 0, i32 0), !dbg !55
  %985 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %935, <4 x half> %883, <16 x float> %984, i32 0, i32 0, i32 0), !dbg !55
  %986 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %938, <4 x half> %887, <16 x float> %985, i32 0, i32 0, i32 0), !dbg !55
  %987 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %941, <4 x half> %891, <16 x float> %986, i32 0, i32 0, i32 0), !dbg !55
  %988 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %944, <4 x half> %895, <16 x float> %987, i32 0, i32 0, i32 0), !dbg !55
  %989 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %947, <4 x half> %899, <16 x float> %988, i32 0, i32 0, i32 0), !dbg !55
  %990 = add nuw nsw i64 %453, 64, !dbg !56
  %indvars = trunc i64 %990 to i32, !dbg !31
  %991 = icmp sgt i32 %33, %indvars, !dbg !31
  %992 = shufflevector <16 x float> %989, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %993 = shufflevector <16 x float> %989, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %994 = shufflevector <16 x float> %989, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %995 = shufflevector <16 x float> %989, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %996 = shufflevector <16 x float> %989, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %997 = shufflevector <16 x float> %989, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %998 = shufflevector <16 x float> %989, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %999 = shufflevector <16 x float> %989, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1000 = shufflevector <16 x float> %968, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1001 = shufflevector <16 x float> %968, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1002 = shufflevector <16 x float> %968, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1003 = shufflevector <16 x float> %968, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1004 = shufflevector <16 x float> %968, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1005 = shufflevector <16 x float> %968, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1006 = shufflevector <16 x float> %968, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1007 = shufflevector <16 x float> %968, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %991, label %452, label %._crit_edge.loopexit, !dbg !31

._crit_edge.loopexit:                             ; preds = %452
  %1008 = shufflevector <16 x float> %989, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1009 = shufflevector <16 x float> %989, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1010 = shufflevector <16 x float> %989, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1011 = shufflevector <16 x float> %989, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1012 = shufflevector <16 x float> %968, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1013 = shufflevector <16 x float> %968, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1014 = shufflevector <16 x float> %968, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1015 = shufflevector <16 x float> %968, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  br label %._crit_edge, !dbg !57

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %20
  %.lcssa39 = phi float [ 1.000000e+00, %20 ], [ %721, %._crit_edge.loopexit ]
  %.lcssa37 = phi float [ 0xFFF0000000000000, %20 ], [ %586, %._crit_edge.loopexit ]
  %1016 = phi <4 x float> [ zeroinitializer, %20 ], [ %1015, %._crit_edge.loopexit ]
  %1017 = phi <4 x float> [ zeroinitializer, %20 ], [ %1014, %._crit_edge.loopexit ]
  %1018 = phi <4 x float> [ zeroinitializer, %20 ], [ %1013, %._crit_edge.loopexit ]
  %1019 = phi <4 x float> [ zeroinitializer, %20 ], [ %1012, %._crit_edge.loopexit ]
  %1020 = phi <4 x float> [ zeroinitializer, %20 ], [ %1011, %._crit_edge.loopexit ]
  %1021 = phi <4 x float> [ zeroinitializer, %20 ], [ %1010, %._crit_edge.loopexit ]
  %1022 = phi <4 x float> [ zeroinitializer, %20 ], [ %1009, %._crit_edge.loopexit ]
  %1023 = phi <4 x float> [ zeroinitializer, %20 ], [ %1008, %._crit_edge.loopexit ]
  %1024 = add i32 %33, 128, !dbg !57
  %.not62 = icmp eq i32 %33, 2147483520, !dbg !59
  br i1 %.not62, label %._crit_edge58, label %.lr.ph57, !dbg !59

.lr.ph57:                                         ; preds = %._crit_edge
  %1025 = shl nuw nsw i32 %77, 6
  %1026 = or disjoint i32 %144, %1025
  %1027 = or disjoint i32 %149, %1025
  %1028 = or disjoint i32 %153, %1025
  %1029 = or disjoint i32 %157, %1025
  %1030 = or disjoint i32 %161, %1025
  %1031 = or disjoint i32 %165, %1025
  %1032 = or disjoint i32 %169, %1025
  %1033 = or disjoint i32 %173, %1025
  %1034 = or disjoint i32 %1025, 2048
  %1035 = or disjoint i32 %144, %1034
  %1036 = or disjoint i32 %149, %1034
  %1037 = or disjoint i32 %153, %1034
  %1038 = or disjoint i32 %157, %1034
  %1039 = or disjoint i32 %161, %1034
  %1040 = or disjoint i32 %165, %1034
  %1041 = or disjoint i32 %169, %1034
  %1042 = or disjoint i32 %173, %1034
  %1043 = zext nneg i32 %1026 to i64
  %1044 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1043
  %1045 = zext nneg i32 %1027 to i64
  %1046 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1045
  %1047 = zext nneg i32 %1028 to i64
  %1048 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1047
  %1049 = zext nneg i32 %1029 to i64
  %1050 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1049
  %1051 = zext nneg i32 %1030 to i64
  %1052 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1051
  %1053 = zext nneg i32 %1031 to i64
  %1054 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1053
  %1055 = zext nneg i32 %1032 to i64
  %1056 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1055
  %1057 = zext nneg i32 %1033 to i64
  %1058 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1057
  %1059 = zext nneg i32 %1035 to i64
  %1060 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1059
  %1061 = zext nneg i32 %1036 to i64
  %1062 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1061
  %1063 = zext nneg i32 %1037 to i64
  %1064 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1063
  %1065 = zext nneg i32 %1038 to i64
  %1066 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1065
  %1067 = zext nneg i32 %1039 to i64
  %1068 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1067
  %1069 = zext nneg i32 %1040 to i64
  %1070 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1069
  %1071 = zext nneg i32 %1041 to i64
  %1072 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1071
  %1073 = zext nneg i32 %1042 to i64
  %1074 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1073
  %1075 = shl i32 %35, 2
  %1076 = xor i32 %1075, 128
  %1077 = or disjoint i32 %100, %59
  %1078 = zext nneg i32 %1077 to i64
  %1079 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %1078
  %1080 = or disjoint i32 %113, %59
  %1081 = zext nneg i32 %1080 to i64
  %1082 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i64 %1081
  %1083 = shl nuw nsw i32 %36, 3
  %1084 = and i32 %1083, 256
  %1085 = or disjoint i32 %1084, %77
  %1086 = or disjoint i32 %1085, 64
  %1087 = or disjoint i32 %1085, 128
  %1088 = or disjoint i32 %1085, 192
  %1089 = or disjoint i32 %1085, 512
  %1090 = or disjoint i32 %1085, 576
  %1091 = or disjoint i32 %1085, 640
  %1092 = or disjoint i32 %1085, 704
  %1093 = or disjoint i32 %1085, 1024
  %1094 = or disjoint i32 %1085, 1088
  %1095 = or disjoint i32 %1085, 1152
  %1096 = or disjoint i32 %1085, 1216
  %1097 = or disjoint i32 %1085, 1536
  %1098 = or disjoint i32 %1085, 1600
  %1099 = or disjoint i32 %1085, 1664
  %1100 = or disjoint i32 %1085, 1728
  %1101 = or disjoint i32 %1085, 2048
  %1102 = or disjoint i32 %1085, 2112
  %1103 = or disjoint i32 %1085, 2176
  %1104 = or disjoint i32 %1085, 2240
  %1105 = or disjoint i32 %1085, 2560
  %1106 = or disjoint i32 %1085, 2624
  %1107 = or disjoint i32 %1085, 2688
  %1108 = or disjoint i32 %1085, 2752
  %1109 = or disjoint i32 %1085, 3072
  %1110 = or disjoint i32 %1085, 3136
  %1111 = or disjoint i32 %1085, 3200
  %1112 = or disjoint i32 %1085, 3264
  %1113 = or disjoint i32 %1085, 3584
  %1114 = or disjoint i32 %1085, 3648
  %1115 = or disjoint i32 %1085, 3712
  %1116 = or disjoint i32 %1085, 3776
  %1117 = or disjoint i32 %1085, 32
  %1118 = or disjoint i32 %1085, 96
  %1119 = or disjoint i32 %1085, 160
  %1120 = or disjoint i32 %1085, 224
  %1121 = or disjoint i32 %1085, 544
  %1122 = or disjoint i32 %1085, 608
  %1123 = or disjoint i32 %1085, 672
  %1124 = or disjoint i32 %1085, 736
  %1125 = or disjoint i32 %1085, 1056
  %1126 = or disjoint i32 %1085, 1120
  %1127 = or disjoint i32 %1085, 1184
  %1128 = or disjoint i32 %1085, 1248
  %1129 = or disjoint i32 %1085, 1568
  %1130 = or disjoint i32 %1085, 1632
  %1131 = or disjoint i32 %1085, 1696
  %1132 = or disjoint i32 %1085, 1760
  %1133 = or disjoint i32 %1085, 2080
  %1134 = or disjoint i32 %1085, 2144
  %1135 = or disjoint i32 %1085, 2208
  %1136 = or disjoint i32 %1085, 2272
  %1137 = or disjoint i32 %1085, 2592
  %1138 = or disjoint i32 %1085, 2656
  %1139 = or disjoint i32 %1085, 2720
  %1140 = or disjoint i32 %1085, 2784
  %1141 = or disjoint i32 %1085, 3104
  %1142 = or disjoint i32 %1085, 3168
  %1143 = or disjoint i32 %1085, 3232
  %1144 = or disjoint i32 %1085, 3296
  %1145 = or disjoint i32 %1085, 3616
  %1146 = or disjoint i32 %1085, 3680
  %1147 = or disjoint i32 %1085, 3744
  %1148 = or disjoint i32 %1085, 3808
  %1149 = zext nneg i32 %1085 to i64
  %1150 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1149
  %1151 = zext nneg i32 %1086 to i64
  %1152 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1151
  %1153 = zext nneg i32 %1087 to i64
  %1154 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1153
  %1155 = zext nneg i32 %1088 to i64
  %1156 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1155
  %1157 = zext nneg i32 %1089 to i64
  %1158 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1157
  %1159 = zext nneg i32 %1090 to i64
  %1160 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1159
  %1161 = zext nneg i32 %1091 to i64
  %1162 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1161
  %1163 = zext nneg i32 %1092 to i64
  %1164 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1163
  %1165 = zext nneg i32 %1093 to i64
  %1166 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1165
  %1167 = zext nneg i32 %1094 to i64
  %1168 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1167
  %1169 = zext nneg i32 %1095 to i64
  %1170 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1169
  %1171 = zext nneg i32 %1096 to i64
  %1172 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1171
  %1173 = zext nneg i32 %1097 to i64
  %1174 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1173
  %1175 = zext nneg i32 %1098 to i64
  %1176 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1175
  %1177 = zext nneg i32 %1099 to i64
  %1178 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1177
  %1179 = zext nneg i32 %1100 to i64
  %1180 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1179
  %1181 = zext nneg i32 %1101 to i64
  %1182 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1181
  %1183 = zext nneg i32 %1102 to i64
  %1184 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1183
  %1185 = zext nneg i32 %1103 to i64
  %1186 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1185
  %1187 = zext nneg i32 %1104 to i64
  %1188 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1187
  %1189 = zext nneg i32 %1105 to i64
  %1190 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1189
  %1191 = zext nneg i32 %1106 to i64
  %1192 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1191
  %1193 = zext nneg i32 %1107 to i64
  %1194 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1193
  %1195 = zext nneg i32 %1108 to i64
  %1196 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1195
  %1197 = zext nneg i32 %1109 to i64
  %1198 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1197
  %1199 = zext nneg i32 %1110 to i64
  %1200 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1199
  %1201 = zext nneg i32 %1111 to i64
  %1202 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1201
  %1203 = zext nneg i32 %1112 to i64
  %1204 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1203
  %1205 = zext nneg i32 %1113 to i64
  %1206 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1205
  %1207 = zext nneg i32 %1114 to i64
  %1208 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1207
  %1209 = zext nneg i32 %1115 to i64
  %1210 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1209
  %1211 = zext nneg i32 %1116 to i64
  %1212 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1211
  %1213 = zext nneg i32 %1117 to i64
  %1214 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1213
  %1215 = zext nneg i32 %1118 to i64
  %1216 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1215
  %1217 = zext nneg i32 %1119 to i64
  %1218 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1217
  %1219 = zext nneg i32 %1120 to i64
  %1220 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1219
  %1221 = zext nneg i32 %1121 to i64
  %1222 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1221
  %1223 = zext nneg i32 %1122 to i64
  %1224 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1223
  %1225 = zext nneg i32 %1123 to i64
  %1226 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1225
  %1227 = zext nneg i32 %1124 to i64
  %1228 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1227
  %1229 = zext nneg i32 %1125 to i64
  %1230 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1229
  %1231 = zext nneg i32 %1126 to i64
  %1232 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1231
  %1233 = zext nneg i32 %1127 to i64
  %1234 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1233
  %1235 = zext nneg i32 %1128 to i64
  %1236 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1235
  %1237 = zext nneg i32 %1129 to i64
  %1238 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1237
  %1239 = zext nneg i32 %1130 to i64
  %1240 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1239
  %1241 = zext nneg i32 %1131 to i64
  %1242 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1241
  %1243 = zext nneg i32 %1132 to i64
  %1244 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1243
  %1245 = zext nneg i32 %1133 to i64
  %1246 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1245
  %1247 = zext nneg i32 %1134 to i64
  %1248 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1247
  %1249 = zext nneg i32 %1135 to i64
  %1250 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1249
  %1251 = zext nneg i32 %1136 to i64
  %1252 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1251
  %1253 = zext nneg i32 %1137 to i64
  %1254 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1253
  %1255 = zext nneg i32 %1138 to i64
  %1256 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1255
  %1257 = zext nneg i32 %1139 to i64
  %1258 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1257
  %1259 = zext nneg i32 %1140 to i64
  %1260 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1259
  %1261 = zext nneg i32 %1141 to i64
  %1262 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1261
  %1263 = zext nneg i32 %1142 to i64
  %1264 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1263
  %1265 = zext nneg i32 %1143 to i64
  %1266 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1265
  %1267 = zext nneg i32 %1144 to i64
  %1268 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1267
  %1269 = zext nneg i32 %1145 to i64
  %1270 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1269
  %1271 = zext nneg i32 %1146 to i64
  %1272 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1271
  %1273 = zext nneg i32 %1147 to i64
  %1274 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1273
  %1275 = zext nneg i32 %1148 to i64
  %1276 = getelementptr half, ptr addrspace(3) @global_smem, i64 %1275
  %1277 = shufflevector <4 x float> %1020, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %1278 = shufflevector <4 x float> %1020, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %1279 = shufflevector <4 x float> %1021, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %1280 = shufflevector <4 x float> %1021, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %1281 = shufflevector <4 x float> %1022, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %1282 = shufflevector <4 x float> %1022, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %1283 = shufflevector <4 x float> %1023, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %1284 = shufflevector <4 x float> %1023, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %1285 = shufflevector <4 x float> %1016, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %1286 = shufflevector <4 x float> %1016, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %1287 = shufflevector <4 x float> %1017, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %1288 = shufflevector <4 x float> %1017, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %1289 = shufflevector <4 x float> %1018, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %1290 = shufflevector <4 x float> %1018, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  %1291 = shufflevector <4 x float> %1019, <4 x float> poison, <2 x i32> <i32 0, i32 1>
  %1292 = shufflevector <4 x float> %1019, <4 x float> poison, <2 x i32> <i32 2, i32 3>
  br label %1293, !dbg !59

1293:                                             ; preds = %.lr.ph57, %1293
  %1294 = phi i64 [ %34, %.lr.ph57 ], [ %1949, %1293 ]
  %1295 = phi float [ %.lcssa37, %.lr.ph57 ], [ %1577, %1293 ]
  %1296 = phi float [ %.lcssa39, %.lr.ph57 ], [ %1680, %1293 ]
  %1297 = phi <2 x float> [ %1277, %.lr.ph57 ], [ %1951, %1293 ]
  %1298 = phi <2 x float> [ %1278, %.lr.ph57 ], [ %1952, %1293 ]
  %1299 = phi <2 x float> [ %1279, %.lr.ph57 ], [ %1953, %1293 ]
  %1300 = phi <2 x float> [ %1280, %.lr.ph57 ], [ %1954, %1293 ]
  %1301 = phi <2 x float> [ %1281, %.lr.ph57 ], [ %1955, %1293 ]
  %1302 = phi <2 x float> [ %1282, %.lr.ph57 ], [ %1956, %1293 ]
  %1303 = phi <2 x float> [ %1283, %.lr.ph57 ], [ %1957, %1293 ]
  %1304 = phi <2 x float> [ %1284, %.lr.ph57 ], [ %1958, %1293 ]
  %1305 = phi <2 x float> [ %1285, %.lr.ph57 ], [ %1959, %1293 ]
  %1306 = phi <2 x float> [ %1286, %.lr.ph57 ], [ %1960, %1293 ]
  %1307 = phi <2 x float> [ %1287, %.lr.ph57 ], [ %1961, %1293 ]
  %1308 = phi <2 x float> [ %1288, %.lr.ph57 ], [ %1962, %1293 ]
  %1309 = phi <2 x float> [ %1289, %.lr.ph57 ], [ %1963, %1293 ]
  %1310 = phi <2 x float> [ %1290, %.lr.ph57 ], [ %1964, %1293 ]
  %1311 = phi <2 x float> [ %1291, %.lr.ph57 ], [ %1965, %1293 ]
  %1312 = phi <2 x float> [ %1292, %.lr.ph57 ], [ %1966, %1293 ]
  %indvars71 = trunc i64 %1294 to i32
  %1313 = or disjoint i64 %1294, %45, !dbg !60
  %1314 = or disjoint i64 %1294, %46, !dbg !60
  %1315 = mul i64 %1313, %74, !dbg !60
  %1316 = mul i64 %1314, %74, !dbg !60
  %gep49 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %1315, !dbg !60
  %gep51 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %1316, !dbg !60
  %1317 = load <8 x half>, ptr addrspace(1) %gep49, align 16, !dbg !60
  %1318 = load <8 x half>, ptr addrspace(1) %gep51, align 16, !dbg !60
  %1319 = mul i64 %1313, %76, !dbg !61
  %1320 = mul i64 %1314, %76, !dbg !61
  %gep53 = getelementptr half, ptr addrspace(1) %invariant.gep42, i64 %1319, !dbg !61
  %gep55 = getelementptr half, ptr addrspace(1) %invariant.gep42, i64 %1320, !dbg !61
  %1321 = load <8 x half>, ptr addrspace(1) %gep53, align 16, !dbg !61
  %1322 = load <8 x half>, ptr addrspace(1) %gep55, align 16, !dbg !61
  fence syncscope("workgroup") release, !dbg !61
  tail call void @llvm.amdgcn.s.barrier(), !dbg !61
  fence syncscope("workgroup") acquire, !dbg !61
  %1323 = shufflevector <8 x half> %1321, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !61
  store <4 x half> %1323, ptr addrspace(3) %103, align 8, !dbg !61
  %1324 = shufflevector <8 x half> %1321, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !61
  store <4 x half> %1324, ptr addrspace(3) %111, align 8, !dbg !61
  %1325 = shufflevector <8 x half> %1322, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !61
  store <4 x half> %1325, ptr addrspace(3) %116, align 8, !dbg !61
  %1326 = shufflevector <8 x half> %1322, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !61
  store <4 x half> %1326, ptr addrspace(3) %120, align 8, !dbg !61
  fence syncscope("workgroup") release, !dbg !61
  tail call void @llvm.amdgcn.s.barrier(), !dbg !61
  fence syncscope("workgroup") acquire, !dbg !61
  %1327 = load <4 x half>, ptr addrspace(3) %1044, align 8, !dbg !61
  %1328 = load <4 x half>, ptr addrspace(3) %1046, align 8, !dbg !61
  %1329 = load <4 x half>, ptr addrspace(3) %1048, align 8, !dbg !61
  %1330 = load <4 x half>, ptr addrspace(3) %1050, align 8, !dbg !61
  %1331 = load <4 x half>, ptr addrspace(3) %1052, align 8, !dbg !61
  %1332 = load <4 x half>, ptr addrspace(3) %1054, align 8, !dbg !61
  %1333 = load <4 x half>, ptr addrspace(3) %1056, align 8, !dbg !61
  %1334 = load <4 x half>, ptr addrspace(3) %1058, align 8, !dbg !61
  %1335 = load <4 x half>, ptr addrspace(3) %1060, align 8, !dbg !61
  %1336 = load <4 x half>, ptr addrspace(3) %1062, align 8, !dbg !61
  %1337 = load <4 x half>, ptr addrspace(3) %1064, align 8, !dbg !61
  %1338 = load <4 x half>, ptr addrspace(3) %1066, align 8, !dbg !61
  %1339 = load <4 x half>, ptr addrspace(3) %1068, align 8, !dbg !61
  %1340 = load <4 x half>, ptr addrspace(3) %1070, align 8, !dbg !61
  %1341 = load <4 x half>, ptr addrspace(3) %1072, align 8, !dbg !61
  %1342 = load <4 x half>, ptr addrspace(3) %1074, align 8, !dbg !61
  %1343 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1327, <4 x half> %177, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !62
  %1344 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1328, <4 x half> %180, <16 x float> %1343, i32 0, i32 0, i32 0), !dbg !62
  %1345 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1329, <4 x half> %183, <16 x float> %1344, i32 0, i32 0, i32 0), !dbg !62
  %1346 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1330, <4 x half> %186, <16 x float> %1345, i32 0, i32 0, i32 0), !dbg !62
  %1347 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1331, <4 x half> %189, <16 x float> %1346, i32 0, i32 0, i32 0), !dbg !62
  %1348 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1332, <4 x half> %192, <16 x float> %1347, i32 0, i32 0, i32 0), !dbg !62
  %1349 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1333, <4 x half> %195, <16 x float> %1348, i32 0, i32 0, i32 0), !dbg !62
  %1350 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1334, <4 x half> %198, <16 x float> %1349, i32 0, i32 0, i32 0), !dbg !62
  %1351 = extractelement <16 x float> %1350, i64 0, !dbg !62
  %1352 = extractelement <16 x float> %1350, i64 1, !dbg !62
  %1353 = extractelement <16 x float> %1350, i64 2, !dbg !62
  %1354 = extractelement <16 x float> %1350, i64 3, !dbg !62
  %1355 = extractelement <16 x float> %1350, i64 4, !dbg !62
  %1356 = extractelement <16 x float> %1350, i64 5, !dbg !62
  %1357 = extractelement <16 x float> %1350, i64 6, !dbg !62
  %1358 = extractelement <16 x float> %1350, i64 7, !dbg !62
  %1359 = extractelement <16 x float> %1350, i64 8, !dbg !62
  %1360 = extractelement <16 x float> %1350, i64 9, !dbg !62
  %1361 = extractelement <16 x float> %1350, i64 10, !dbg !62
  %1362 = extractelement <16 x float> %1350, i64 11, !dbg !62
  %1363 = extractelement <16 x float> %1350, i64 12, !dbg !62
  %1364 = extractelement <16 x float> %1350, i64 13, !dbg !62
  %1365 = extractelement <16 x float> %1350, i64 14, !dbg !62
  %1366 = extractelement <16 x float> %1350, i64 15, !dbg !62
  %1367 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1335, <4 x half> %177, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !62
  %1368 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1336, <4 x half> %180, <16 x float> %1367, i32 0, i32 0, i32 0), !dbg !62
  %1369 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1337, <4 x half> %183, <16 x float> %1368, i32 0, i32 0, i32 0), !dbg !62
  %1370 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1338, <4 x half> %186, <16 x float> %1369, i32 0, i32 0, i32 0), !dbg !62
  %1371 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1339, <4 x half> %189, <16 x float> %1370, i32 0, i32 0, i32 0), !dbg !62
  %1372 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1340, <4 x half> %192, <16 x float> %1371, i32 0, i32 0, i32 0), !dbg !62
  %1373 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1341, <4 x half> %195, <16 x float> %1372, i32 0, i32 0, i32 0), !dbg !62
  %1374 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1342, <4 x half> %198, <16 x float> %1373, i32 0, i32 0, i32 0), !dbg !62
  %1375 = extractelement <16 x float> %1374, i64 0, !dbg !62
  %1376 = extractelement <16 x float> %1374, i64 1, !dbg !62
  %1377 = extractelement <16 x float> %1374, i64 2, !dbg !62
  %1378 = extractelement <16 x float> %1374, i64 3, !dbg !62
  %1379 = extractelement <16 x float> %1374, i64 4, !dbg !62
  %1380 = extractelement <16 x float> %1374, i64 5, !dbg !62
  %1381 = extractelement <16 x float> %1374, i64 6, !dbg !62
  %1382 = extractelement <16 x float> %1374, i64 7, !dbg !62
  %1383 = extractelement <16 x float> %1374, i64 8, !dbg !62
  %1384 = extractelement <16 x float> %1374, i64 9, !dbg !62
  %1385 = extractelement <16 x float> %1374, i64 10, !dbg !62
  %1386 = extractelement <16 x float> %1374, i64 11, !dbg !62
  %1387 = extractelement <16 x float> %1374, i64 12, !dbg !62
  %1388 = extractelement <16 x float> %1374, i64 13, !dbg !62
  %1389 = extractelement <16 x float> %1374, i64 14, !dbg !62
  %1390 = extractelement <16 x float> %1374, i64 15, !dbg !62
  %1391 = or disjoint i32 %38, %indvars71, !dbg !63
  %1392 = or disjoint i32 %38, %indvars71, !dbg !63
  %1393 = or disjoint i32 %38, %indvars71, !dbg !63
  %1394 = or disjoint i32 %1393, 2, !dbg !63
  %1395 = or disjoint i32 %38, %indvars71, !dbg !63
  %1396 = or disjoint i32 %1395, 3, !dbg !63
  %1397 = or disjoint i32 %85, %indvars71, !dbg !63
  %1398 = or disjoint i32 %38, %indvars71, !dbg !63
  %1399 = or disjoint i32 %1398, 9, !dbg !63
  %1400 = or disjoint i32 %38, %indvars71, !dbg !63
  %1401 = or disjoint i32 %1400, 10, !dbg !63
  %1402 = or disjoint i32 %38, %indvars71, !dbg !63
  %1403 = or disjoint i32 %1402, 11, !dbg !63
  %1404 = or disjoint i32 %86, %indvars71, !dbg !63
  %1405 = or disjoint i32 %38, %indvars71, !dbg !63
  %1406 = or disjoint i32 %1405, 17, !dbg !63
  %1407 = or disjoint i32 %38, %indvars71, !dbg !63
  %1408 = or disjoint i32 %1407, 18, !dbg !63
  %1409 = or disjoint i32 %38, %indvars71, !dbg !63
  %1410 = or disjoint i32 %1409, 19, !dbg !63
  %1411 = or disjoint i32 %87, %indvars71, !dbg !63
  %1412 = or disjoint i32 %38, %indvars71, !dbg !63
  %1413 = or disjoint i32 %1412, 25, !dbg !63
  %1414 = or disjoint i32 %38, %indvars71, !dbg !63
  %1415 = or disjoint i32 %1414, 26, !dbg !63
  %1416 = or disjoint i32 %38, %indvars71, !dbg !63
  %1417 = or disjoint i32 %1416, 27, !dbg !63
  %1418 = or disjoint i32 %88, %indvars71, !dbg !63
  %1419 = or disjoint i32 %38, %indvars71, !dbg !63
  %1420 = or disjoint i32 %1419, 33, !dbg !63
  %1421 = or disjoint i32 %38, %indvars71, !dbg !63
  %1422 = or disjoint i32 %1421, 34, !dbg !63
  %1423 = or disjoint i32 %38, %indvars71, !dbg !63
  %1424 = or disjoint i32 %1423, 35, !dbg !63
  %1425 = or disjoint i32 %89, %indvars71, !dbg !63
  %1426 = or disjoint i32 %38, %indvars71, !dbg !63
  %1427 = or disjoint i32 %1426, 41, !dbg !63
  %1428 = or disjoint i32 %38, %indvars71, !dbg !63
  %1429 = or disjoint i32 %1428, 42, !dbg !63
  %1430 = or disjoint i32 %38, %indvars71, !dbg !63
  %1431 = or disjoint i32 %1430, 43, !dbg !63
  %1432 = or disjoint i32 %90, %indvars71, !dbg !63
  %1433 = or disjoint i32 %38, %indvars71, !dbg !63
  %1434 = or disjoint i32 %1433, 49, !dbg !63
  %1435 = or disjoint i32 %38, %indvars71, !dbg !63
  %1436 = or disjoint i32 %1435, 50, !dbg !63
  %1437 = or disjoint i32 %38, %indvars71, !dbg !63
  %1438 = or disjoint i32 %1437, 51, !dbg !63
  %1439 = or disjoint i32 %91, %indvars71, !dbg !63
  %1440 = or disjoint i32 %38, %indvars71, !dbg !63
  %1441 = or disjoint i32 %1440, 57, !dbg !63
  %1442 = or disjoint i32 %38, %indvars71, !dbg !63
  %1443 = or disjoint i32 %1442, 58, !dbg !63
  %1444 = or disjoint i32 %38, %indvars71, !dbg !63
  %1445 = or disjoint i32 %1444, 59, !dbg !63
  %.not = icmp slt i32 %83, %1391, !dbg !64
  %.not3.not = icmp sgt i32 %83, %1392, !dbg !64
  %.not4 = icmp slt i32 %83, %1394, !dbg !64
  %.not5 = icmp slt i32 %83, %1396, !dbg !64
  %.not6 = icmp slt i32 %83, %1397, !dbg !64
  %.not7 = icmp slt i32 %83, %1399, !dbg !64
  %.not8 = icmp slt i32 %83, %1401, !dbg !64
  %.not9 = icmp slt i32 %83, %1403, !dbg !64
  %.not10 = icmp slt i32 %83, %1404, !dbg !64
  %.not11 = icmp slt i32 %83, %1406, !dbg !64
  %.not12 = icmp slt i32 %83, %1408, !dbg !64
  %.not13 = icmp slt i32 %83, %1410, !dbg !64
  %.not14 = icmp slt i32 %83, %1411, !dbg !64
  %.not15 = icmp slt i32 %83, %1413, !dbg !64
  %.not16 = icmp slt i32 %83, %1415, !dbg !64
  %.not17 = icmp slt i32 %83, %1417, !dbg !64
  %.not18 = icmp slt i32 %83, %1418, !dbg !64
  %.not19 = icmp slt i32 %83, %1420, !dbg !64
  %.not20 = icmp slt i32 %83, %1422, !dbg !64
  %.not21 = icmp slt i32 %83, %1424, !dbg !64
  %.not22 = icmp slt i32 %83, %1425, !dbg !64
  %.not23 = icmp slt i32 %83, %1427, !dbg !64
  %.not24 = icmp slt i32 %83, %1429, !dbg !64
  %.not25 = icmp slt i32 %83, %1431, !dbg !64
  %.not26 = icmp slt i32 %83, %1432, !dbg !64
  %.not27 = icmp slt i32 %83, %1434, !dbg !64
  %.not28 = icmp slt i32 %83, %1436, !dbg !64
  %.not29 = icmp slt i32 %83, %1438, !dbg !64
  %.not30 = icmp slt i32 %83, %1439, !dbg !64
  %.not31 = icmp slt i32 %83, %1441, !dbg !64
  %.not32 = icmp slt i32 %83, %1443, !dbg !64
  %.not33 = icmp slt i32 %83, %1445, !dbg !64
  %1446 = fmul float %92, %1351, !dbg !65
  %1447 = fmul float %92, %1352, !dbg !65
  %1448 = fmul float %92, %1353, !dbg !65
  %1449 = fmul float %92, %1354, !dbg !65
  %1450 = fmul float %92, %1355, !dbg !65
  %1451 = fmul float %92, %1356, !dbg !65
  %1452 = fmul float %92, %1357, !dbg !65
  %1453 = fmul float %92, %1358, !dbg !65
  %1454 = fmul float %92, %1359, !dbg !65
  %1455 = fmul float %92, %1360, !dbg !65
  %1456 = fmul float %92, %1361, !dbg !65
  %1457 = fmul float %92, %1362, !dbg !65
  %1458 = fmul float %92, %1363, !dbg !65
  %1459 = fmul float %92, %1364, !dbg !65
  %1460 = fmul float %92, %1365, !dbg !65
  %1461 = fmul float %92, %1366, !dbg !65
  %1462 = fmul float %92, %1375, !dbg !65
  %1463 = fmul float %92, %1376, !dbg !65
  %1464 = fmul float %92, %1377, !dbg !65
  %1465 = fmul float %92, %1378, !dbg !65
  %1466 = fmul float %92, %1379, !dbg !65
  %1467 = fmul float %92, %1380, !dbg !65
  %1468 = fmul float %92, %1381, !dbg !65
  %1469 = fmul float %92, %1382, !dbg !65
  %1470 = fmul float %92, %1383, !dbg !65
  %1471 = fmul float %92, %1384, !dbg !65
  %1472 = fmul float %92, %1385, !dbg !65
  %1473 = fmul float %92, %1386, !dbg !65
  %1474 = fmul float %92, %1387, !dbg !65
  %1475 = fmul float %92, %1388, !dbg !65
  %1476 = fmul float %92, %1389, !dbg !65
  %1477 = fmul float %92, %1390, !dbg !65
  %1478 = select i1 %.not, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1479 = select i1 %.not3.not, float 0.000000e+00, float -1.000000e+06, !dbg !66
  %1480 = select i1 %.not4, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1481 = select i1 %.not5, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1482 = select i1 %.not6, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1483 = select i1 %.not7, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1484 = select i1 %.not8, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1485 = select i1 %.not9, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1486 = select i1 %.not10, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1487 = select i1 %.not11, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1488 = select i1 %.not12, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1489 = select i1 %.not13, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1490 = select i1 %.not14, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1491 = select i1 %.not15, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1492 = select i1 %.not16, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1493 = select i1 %.not17, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1494 = select i1 %.not18, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1495 = select i1 %.not19, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1496 = select i1 %.not20, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1497 = select i1 %.not21, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1498 = select i1 %.not22, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1499 = select i1 %.not23, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1500 = select i1 %.not24, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1501 = select i1 %.not25, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1502 = select i1 %.not26, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1503 = select i1 %.not27, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1504 = select i1 %.not28, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1505 = select i1 %.not29, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1506 = select i1 %.not30, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1507 = select i1 %.not31, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1508 = select i1 %.not32, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1509 = select i1 %.not33, float -1.000000e+06, float 0.000000e+00, !dbg !66
  %1510 = fadd float %1478, %1446, !dbg !67
  %1511 = fadd float %1479, %1447, !dbg !67
  %1512 = fadd float %1480, %1448, !dbg !67
  %1513 = fadd float %1481, %1449, !dbg !67
  %1514 = fadd float %1482, %1450, !dbg !67
  %1515 = fadd float %1483, %1451, !dbg !67
  %1516 = fadd float %1484, %1452, !dbg !67
  %1517 = fadd float %1485, %1453, !dbg !67
  %1518 = fadd float %1486, %1454, !dbg !67
  %1519 = fadd float %1487, %1455, !dbg !67
  %1520 = fadd float %1488, %1456, !dbg !67
  %1521 = fadd float %1489, %1457, !dbg !67
  %1522 = fadd float %1490, %1458, !dbg !67
  %1523 = fadd float %1491, %1459, !dbg !67
  %1524 = fadd float %1492, %1460, !dbg !67
  %1525 = fadd float %1493, %1461, !dbg !67
  %1526 = fadd float %1494, %1462, !dbg !67
  %1527 = fadd float %1495, %1463, !dbg !67
  %1528 = fadd float %1496, %1464, !dbg !67
  %1529 = fadd float %1497, %1465, !dbg !67
  %1530 = fadd float %1498, %1466, !dbg !67
  %1531 = fadd float %1499, %1467, !dbg !67
  %1532 = fadd float %1500, %1468, !dbg !67
  %1533 = fadd float %1501, %1469, !dbg !67
  %1534 = fadd float %1502, %1470, !dbg !67
  %1535 = fadd float %1503, %1471, !dbg !67
  %1536 = fadd float %1504, %1472, !dbg !67
  %1537 = fadd float %1505, %1473, !dbg !67
  %1538 = fadd float %1506, %1474, !dbg !67
  %1539 = fadd float %1507, %1475, !dbg !67
  %1540 = fadd float %1508, %1476, !dbg !67
  %1541 = fadd float %1509, %1477, !dbg !67
  %1542 = tail call float @llvm.maxnum.f32(float %1510, float %1511), !dbg !68
  %1543 = tail call float @llvm.maxnum.f32(float %1542, float %1512), !dbg !68
  %1544 = tail call float @llvm.maxnum.f32(float %1543, float %1513), !dbg !68
  %1545 = tail call float @llvm.maxnum.f32(float %1544, float %1514), !dbg !68
  %1546 = tail call float @llvm.maxnum.f32(float %1545, float %1515), !dbg !68
  %1547 = tail call float @llvm.maxnum.f32(float %1546, float %1516), !dbg !68
  %1548 = tail call float @llvm.maxnum.f32(float %1547, float %1517), !dbg !68
  %1549 = tail call float @llvm.maxnum.f32(float %1548, float %1518), !dbg !68
  %1550 = tail call float @llvm.maxnum.f32(float %1549, float %1519), !dbg !68
  %1551 = tail call float @llvm.maxnum.f32(float %1550, float %1520), !dbg !68
  %1552 = tail call float @llvm.maxnum.f32(float %1551, float %1521), !dbg !68
  %1553 = tail call float @llvm.maxnum.f32(float %1552, float %1522), !dbg !68
  %1554 = tail call float @llvm.maxnum.f32(float %1553, float %1523), !dbg !68
  %1555 = tail call float @llvm.maxnum.f32(float %1554, float %1524), !dbg !68
  %1556 = tail call float @llvm.maxnum.f32(float %1555, float %1525), !dbg !68
  %1557 = tail call float @llvm.maxnum.f32(float %1556, float %1526), !dbg !68
  %1558 = tail call float @llvm.maxnum.f32(float %1557, float %1527), !dbg !68
  %1559 = tail call float @llvm.maxnum.f32(float %1558, float %1528), !dbg !68
  %1560 = tail call float @llvm.maxnum.f32(float %1559, float %1529), !dbg !68
  %1561 = tail call float @llvm.maxnum.f32(float %1560, float %1530), !dbg !68
  %1562 = tail call float @llvm.maxnum.f32(float %1561, float %1531), !dbg !68
  %1563 = tail call float @llvm.maxnum.f32(float %1562, float %1532), !dbg !68
  %1564 = tail call float @llvm.maxnum.f32(float %1563, float %1533), !dbg !68
  %1565 = tail call float @llvm.maxnum.f32(float %1564, float %1534), !dbg !68
  %1566 = tail call float @llvm.maxnum.f32(float %1565, float %1535), !dbg !68
  %1567 = tail call float @llvm.maxnum.f32(float %1566, float %1536), !dbg !68
  %1568 = tail call float @llvm.maxnum.f32(float %1567, float %1537), !dbg !68
  %1569 = tail call float @llvm.maxnum.f32(float %1568, float %1538), !dbg !68
  %1570 = tail call float @llvm.maxnum.f32(float %1569, float %1539), !dbg !68
  %1571 = tail call float @llvm.maxnum.f32(float %1570, float %1540), !dbg !68
  %1572 = tail call float @llvm.maxnum.f32(float %1571, float %1541), !dbg !68
  %1573 = bitcast float %1572 to i32, !dbg !69
  %1574 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %1076, i32 %1573), !dbg !69
  %1575 = bitcast i32 %1574 to float, !dbg !69
  %1576 = tail call float @llvm.maxnum.f32(float %1572, float %1575), !dbg !68
  %1577 = tail call float @llvm.maxnum.f32(float %1295, float %1576), !dbg !70
  %1578 = fsub float %1510, %1577, !dbg !71
  %1579 = fsub float %1511, %1577, !dbg !71
  %1580 = fsub float %1512, %1577, !dbg !71
  %1581 = fsub float %1513, %1577, !dbg !71
  %1582 = fsub float %1514, %1577, !dbg !71
  %1583 = fsub float %1515, %1577, !dbg !71
  %1584 = fsub float %1516, %1577, !dbg !71
  %1585 = fsub float %1517, %1577, !dbg !71
  %1586 = fsub float %1518, %1577, !dbg !71
  %1587 = fsub float %1519, %1577, !dbg !71
  %1588 = fsub float %1520, %1577, !dbg !71
  %1589 = fsub float %1521, %1577, !dbg !71
  %1590 = fsub float %1522, %1577, !dbg !71
  %1591 = fsub float %1523, %1577, !dbg !71
  %1592 = fsub float %1524, %1577, !dbg !71
  %1593 = fsub float %1525, %1577, !dbg !71
  %1594 = fsub float %1526, %1577, !dbg !71
  %1595 = fsub float %1527, %1577, !dbg !71
  %1596 = fsub float %1528, %1577, !dbg !71
  %1597 = fsub float %1529, %1577, !dbg !71
  %1598 = fsub float %1530, %1577, !dbg !71
  %1599 = fsub float %1531, %1577, !dbg !71
  %1600 = fsub float %1532, %1577, !dbg !71
  %1601 = fsub float %1533, %1577, !dbg !71
  %1602 = fsub float %1534, %1577, !dbg !71
  %1603 = fsub float %1535, %1577, !dbg !71
  %1604 = fsub float %1536, %1577, !dbg !71
  %1605 = fsub float %1537, %1577, !dbg !71
  %1606 = fsub float %1538, %1577, !dbg !71
  %1607 = fsub float %1539, %1577, !dbg !71
  %1608 = fsub float %1540, %1577, !dbg !71
  %1609 = fsub float %1541, %1577, !dbg !71
  %1610 = tail call float @llvm.amdgcn.exp2.f32(float %1578), !dbg !72
  %1611 = tail call float @llvm.amdgcn.exp2.f32(float %1579), !dbg !72
  %1612 = tail call float @llvm.amdgcn.exp2.f32(float %1580), !dbg !72
  %1613 = tail call float @llvm.amdgcn.exp2.f32(float %1581), !dbg !72
  %1614 = tail call float @llvm.amdgcn.exp2.f32(float %1582), !dbg !72
  %1615 = tail call float @llvm.amdgcn.exp2.f32(float %1583), !dbg !72
  %1616 = tail call float @llvm.amdgcn.exp2.f32(float %1584), !dbg !72
  %1617 = tail call float @llvm.amdgcn.exp2.f32(float %1585), !dbg !72
  %1618 = tail call float @llvm.amdgcn.exp2.f32(float %1586), !dbg !72
  %1619 = tail call float @llvm.amdgcn.exp2.f32(float %1587), !dbg !72
  %1620 = tail call float @llvm.amdgcn.exp2.f32(float %1588), !dbg !72
  %1621 = tail call float @llvm.amdgcn.exp2.f32(float %1589), !dbg !72
  %1622 = tail call float @llvm.amdgcn.exp2.f32(float %1590), !dbg !72
  %1623 = tail call float @llvm.amdgcn.exp2.f32(float %1591), !dbg !72
  %1624 = tail call float @llvm.amdgcn.exp2.f32(float %1592), !dbg !72
  %1625 = tail call float @llvm.amdgcn.exp2.f32(float %1593), !dbg !72
  %1626 = tail call float @llvm.amdgcn.exp2.f32(float %1594), !dbg !72
  %1627 = tail call float @llvm.amdgcn.exp2.f32(float %1595), !dbg !72
  %1628 = tail call float @llvm.amdgcn.exp2.f32(float %1596), !dbg !72
  %1629 = tail call float @llvm.amdgcn.exp2.f32(float %1597), !dbg !72
  %1630 = tail call float @llvm.amdgcn.exp2.f32(float %1598), !dbg !72
  %1631 = tail call float @llvm.amdgcn.exp2.f32(float %1599), !dbg !72
  %1632 = tail call float @llvm.amdgcn.exp2.f32(float %1600), !dbg !72
  %1633 = tail call float @llvm.amdgcn.exp2.f32(float %1601), !dbg !72
  %1634 = tail call float @llvm.amdgcn.exp2.f32(float %1602), !dbg !72
  %1635 = tail call float @llvm.amdgcn.exp2.f32(float %1603), !dbg !72
  %1636 = tail call float @llvm.amdgcn.exp2.f32(float %1604), !dbg !72
  %1637 = tail call float @llvm.amdgcn.exp2.f32(float %1605), !dbg !72
  %1638 = tail call float @llvm.amdgcn.exp2.f32(float %1606), !dbg !72
  %1639 = tail call float @llvm.amdgcn.exp2.f32(float %1607), !dbg !72
  %1640 = tail call float @llvm.amdgcn.exp2.f32(float %1608), !dbg !72
  %1641 = tail call float @llvm.amdgcn.exp2.f32(float %1609), !dbg !72
  %1642 = fadd float %1610, %1611, !dbg !73
  %1643 = fadd float %1612, %1642, !dbg !73
  %1644 = fadd float %1613, %1643, !dbg !73
  %1645 = fadd float %1614, %1644, !dbg !73
  %1646 = fadd float %1615, %1645, !dbg !73
  %1647 = fadd float %1616, %1646, !dbg !73
  %1648 = fadd float %1617, %1647, !dbg !73
  %1649 = fadd float %1618, %1648, !dbg !73
  %1650 = fadd float %1619, %1649, !dbg !73
  %1651 = fadd float %1620, %1650, !dbg !73
  %1652 = fadd float %1621, %1651, !dbg !73
  %1653 = fadd float %1622, %1652, !dbg !73
  %1654 = fadd float %1623, %1653, !dbg !73
  %1655 = fadd float %1624, %1654, !dbg !73
  %1656 = fadd float %1625, %1655, !dbg !73
  %1657 = fadd float %1626, %1656, !dbg !73
  %1658 = fadd float %1627, %1657, !dbg !73
  %1659 = fadd float %1628, %1658, !dbg !73
  %1660 = fadd float %1629, %1659, !dbg !73
  %1661 = fadd float %1630, %1660, !dbg !73
  %1662 = fadd float %1631, %1661, !dbg !73
  %1663 = fadd float %1632, %1662, !dbg !73
  %1664 = fadd float %1633, %1663, !dbg !73
  %1665 = fadd float %1634, %1664, !dbg !73
  %1666 = fadd float %1635, %1665, !dbg !73
  %1667 = fadd float %1636, %1666, !dbg !73
  %1668 = fadd float %1637, %1667, !dbg !73
  %1669 = fadd float %1638, %1668, !dbg !73
  %1670 = fadd float %1639, %1669, !dbg !73
  %1671 = fadd float %1640, %1670, !dbg !73
  %1672 = fadd float %1641, %1671, !dbg !73
  %1673 = bitcast float %1672 to i32, !dbg !74
  %1674 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %1076, i32 %1673), !dbg !74
  %1675 = bitcast i32 %1674 to float, !dbg !74
  %1676 = fadd float %1672, %1675, !dbg !73
  %1677 = fsub float %1295, %1577, !dbg !75
  %1678 = tail call float @llvm.amdgcn.exp2.f32(float %1677), !dbg !76
  %1679 = fmul float %1296, %1678, !dbg !77
  %1680 = fadd float %1679, %1676, !dbg !78
  %1681 = insertelement <2 x float> poison, float %1678, i64 0, !dbg !79
  %1682 = shufflevector <2 x float> %1681, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %1683 = fmul <2 x float> %1305, %1682, !dbg !79
  %1684 = fmul <2 x float> %1306, %1682, !dbg !79
  %1685 = fmul <2 x float> %1307, %1682, !dbg !79
  %1686 = fmul <2 x float> %1308, %1682, !dbg !79
  %1687 = fmul <2 x float> %1309, %1682, !dbg !79
  %1688 = fmul <2 x float> %1310, %1682, !dbg !79
  %1689 = fmul <2 x float> %1311, %1682, !dbg !79
  %1690 = fmul <2 x float> %1312, %1682, !dbg !79
  %1691 = fmul <2 x float> %1297, %1682, !dbg !79
  %1692 = fmul <2 x float> %1298, %1682, !dbg !79
  %1693 = fmul <2 x float> %1299, %1682, !dbg !79
  %1694 = fmul <2 x float> %1300, %1682, !dbg !79
  %1695 = fmul <2 x float> %1301, %1682, !dbg !79
  %1696 = fmul <2 x float> %1302, %1682, !dbg !79
  %1697 = fmul <2 x float> %1303, %1682, !dbg !79
  %1698 = fmul <2 x float> %1304, %1682, !dbg !79
  fence syncscope("workgroup") release, !dbg !60
  tail call void @llvm.amdgcn.s.barrier(), !dbg !60
  fence syncscope("workgroup") acquire, !dbg !60
  store <8 x half> %1317, ptr addrspace(3) %1079, align 16, !dbg !60
  store <8 x half> %1318, ptr addrspace(3) %1082, align 16, !dbg !60
  fence syncscope("workgroup") release, !dbg !60
  tail call void @llvm.amdgcn.s.barrier(), !dbg !60
  fence syncscope("workgroup") acquire, !dbg !60
  %1699 = load <1 x half>, ptr addrspace(3) %1150, align 2, !dbg !60
  %1700 = load <1 x half>, ptr addrspace(3) %1152, align 2, !dbg !60
  %1701 = load <1 x half>, ptr addrspace(3) %1154, align 2, !dbg !60
  %1702 = shufflevector <1 x half> %1701, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1703 = load <1 x half>, ptr addrspace(3) %1156, align 2, !dbg !60
  %1704 = shufflevector <1 x half> %1703, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1705 = load <1 x half>, ptr addrspace(3) %1158, align 2, !dbg !60
  %1706 = load <1 x half>, ptr addrspace(3) %1160, align 2, !dbg !60
  %1707 = load <1 x half>, ptr addrspace(3) %1162, align 2, !dbg !60
  %1708 = shufflevector <1 x half> %1707, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1709 = load <1 x half>, ptr addrspace(3) %1164, align 2, !dbg !60
  %1710 = shufflevector <1 x half> %1709, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1711 = load <1 x half>, ptr addrspace(3) %1166, align 2, !dbg !60
  %1712 = load <1 x half>, ptr addrspace(3) %1168, align 2, !dbg !60
  %1713 = load <1 x half>, ptr addrspace(3) %1170, align 2, !dbg !60
  %1714 = shufflevector <1 x half> %1713, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1715 = load <1 x half>, ptr addrspace(3) %1172, align 2, !dbg !60
  %1716 = shufflevector <1 x half> %1715, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1717 = load <1 x half>, ptr addrspace(3) %1174, align 2, !dbg !60
  %1718 = load <1 x half>, ptr addrspace(3) %1176, align 2, !dbg !60
  %1719 = load <1 x half>, ptr addrspace(3) %1178, align 2, !dbg !60
  %1720 = shufflevector <1 x half> %1719, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1721 = load <1 x half>, ptr addrspace(3) %1180, align 2, !dbg !60
  %1722 = shufflevector <1 x half> %1721, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1723 = load <1 x half>, ptr addrspace(3) %1182, align 2, !dbg !60
  %1724 = load <1 x half>, ptr addrspace(3) %1184, align 2, !dbg !60
  %1725 = load <1 x half>, ptr addrspace(3) %1186, align 2, !dbg !60
  %1726 = shufflevector <1 x half> %1725, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1727 = load <1 x half>, ptr addrspace(3) %1188, align 2, !dbg !60
  %1728 = shufflevector <1 x half> %1727, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1729 = load <1 x half>, ptr addrspace(3) %1190, align 2, !dbg !60
  %1730 = load <1 x half>, ptr addrspace(3) %1192, align 2, !dbg !60
  %1731 = load <1 x half>, ptr addrspace(3) %1194, align 2, !dbg !60
  %1732 = shufflevector <1 x half> %1731, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1733 = load <1 x half>, ptr addrspace(3) %1196, align 2, !dbg !60
  %1734 = shufflevector <1 x half> %1733, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1735 = load <1 x half>, ptr addrspace(3) %1198, align 2, !dbg !60
  %1736 = load <1 x half>, ptr addrspace(3) %1200, align 2, !dbg !60
  %1737 = load <1 x half>, ptr addrspace(3) %1202, align 2, !dbg !60
  %1738 = shufflevector <1 x half> %1737, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1739 = load <1 x half>, ptr addrspace(3) %1204, align 2, !dbg !60
  %1740 = shufflevector <1 x half> %1739, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1741 = load <1 x half>, ptr addrspace(3) %1206, align 2, !dbg !60
  %1742 = load <1 x half>, ptr addrspace(3) %1208, align 2, !dbg !60
  %1743 = load <1 x half>, ptr addrspace(3) %1210, align 2, !dbg !60
  %1744 = shufflevector <1 x half> %1743, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1745 = load <1 x half>, ptr addrspace(3) %1212, align 2, !dbg !60
  %1746 = shufflevector <1 x half> %1745, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1747 = load <1 x half>, ptr addrspace(3) %1214, align 2, !dbg !60
  %1748 = load <1 x half>, ptr addrspace(3) %1216, align 2, !dbg !60
  %1749 = load <1 x half>, ptr addrspace(3) %1218, align 2, !dbg !60
  %1750 = shufflevector <1 x half> %1749, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1751 = load <1 x half>, ptr addrspace(3) %1220, align 2, !dbg !60
  %1752 = shufflevector <1 x half> %1751, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1753 = load <1 x half>, ptr addrspace(3) %1222, align 2, !dbg !60
  %1754 = load <1 x half>, ptr addrspace(3) %1224, align 2, !dbg !60
  %1755 = load <1 x half>, ptr addrspace(3) %1226, align 2, !dbg !60
  %1756 = shufflevector <1 x half> %1755, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1757 = load <1 x half>, ptr addrspace(3) %1228, align 2, !dbg !60
  %1758 = shufflevector <1 x half> %1757, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1759 = load <1 x half>, ptr addrspace(3) %1230, align 2, !dbg !60
  %1760 = load <1 x half>, ptr addrspace(3) %1232, align 2, !dbg !60
  %1761 = load <1 x half>, ptr addrspace(3) %1234, align 2, !dbg !60
  %1762 = shufflevector <1 x half> %1761, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1763 = load <1 x half>, ptr addrspace(3) %1236, align 2, !dbg !60
  %1764 = shufflevector <1 x half> %1763, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1765 = load <1 x half>, ptr addrspace(3) %1238, align 2, !dbg !60
  %1766 = load <1 x half>, ptr addrspace(3) %1240, align 2, !dbg !60
  %1767 = load <1 x half>, ptr addrspace(3) %1242, align 2, !dbg !60
  %1768 = shufflevector <1 x half> %1767, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1769 = load <1 x half>, ptr addrspace(3) %1244, align 2, !dbg !60
  %1770 = shufflevector <1 x half> %1769, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1771 = load <1 x half>, ptr addrspace(3) %1246, align 2, !dbg !60
  %1772 = load <1 x half>, ptr addrspace(3) %1248, align 2, !dbg !60
  %1773 = load <1 x half>, ptr addrspace(3) %1250, align 2, !dbg !60
  %1774 = shufflevector <1 x half> %1773, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1775 = load <1 x half>, ptr addrspace(3) %1252, align 2, !dbg !60
  %1776 = shufflevector <1 x half> %1775, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1777 = load <1 x half>, ptr addrspace(3) %1254, align 2, !dbg !60
  %1778 = load <1 x half>, ptr addrspace(3) %1256, align 2, !dbg !60
  %1779 = load <1 x half>, ptr addrspace(3) %1258, align 2, !dbg !60
  %1780 = shufflevector <1 x half> %1779, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1781 = load <1 x half>, ptr addrspace(3) %1260, align 2, !dbg !60
  %1782 = shufflevector <1 x half> %1781, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1783 = load <1 x half>, ptr addrspace(3) %1262, align 2, !dbg !60
  %1784 = load <1 x half>, ptr addrspace(3) %1264, align 2, !dbg !60
  %1785 = load <1 x half>, ptr addrspace(3) %1266, align 2, !dbg !60
  %1786 = shufflevector <1 x half> %1785, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1787 = load <1 x half>, ptr addrspace(3) %1268, align 2, !dbg !60
  %1788 = shufflevector <1 x half> %1787, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1789 = load <1 x half>, ptr addrspace(3) %1270, align 2, !dbg !60
  %1790 = load <1 x half>, ptr addrspace(3) %1272, align 2, !dbg !60
  %1791 = load <1 x half>, ptr addrspace(3) %1274, align 2, !dbg !60
  %1792 = shufflevector <1 x half> %1791, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1793 = load <1 x half>, ptr addrspace(3) %1276, align 2, !dbg !60
  %1794 = shufflevector <1 x half> %1793, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1795 = fptrunc float %1610 to half, !dbg !80
  %1796 = fptrunc float %1611 to half, !dbg !80
  %1797 = fptrunc float %1612 to half, !dbg !80
  %1798 = fptrunc float %1613 to half, !dbg !80
  %1799 = fptrunc float %1614 to half, !dbg !80
  %1800 = fptrunc float %1615 to half, !dbg !80
  %1801 = fptrunc float %1616 to half, !dbg !80
  %1802 = fptrunc float %1617 to half, !dbg !80
  %1803 = fptrunc float %1618 to half, !dbg !80
  %1804 = fptrunc float %1619 to half, !dbg !80
  %1805 = fptrunc float %1620 to half, !dbg !80
  %1806 = fptrunc float %1621 to half, !dbg !80
  %1807 = fptrunc float %1622 to half, !dbg !80
  %1808 = fptrunc float %1623 to half, !dbg !80
  %1809 = fptrunc float %1624 to half, !dbg !80
  %1810 = fptrunc float %1625 to half, !dbg !80
  %1811 = fptrunc float %1626 to half, !dbg !80
  %1812 = fptrunc float %1627 to half, !dbg !80
  %1813 = fptrunc float %1628 to half, !dbg !80
  %1814 = fptrunc float %1629 to half, !dbg !80
  %1815 = fptrunc float %1630 to half, !dbg !80
  %1816 = fptrunc float %1631 to half, !dbg !80
  %1817 = fptrunc float %1632 to half, !dbg !80
  %1818 = fptrunc float %1633 to half, !dbg !80
  %1819 = fptrunc float %1634 to half, !dbg !80
  %1820 = fptrunc float %1635 to half, !dbg !80
  %1821 = fptrunc float %1636 to half, !dbg !80
  %1822 = fptrunc float %1637 to half, !dbg !80
  %1823 = fptrunc float %1638 to half, !dbg !80
  %1824 = fptrunc float %1639 to half, !dbg !80
  %1825 = fptrunc float %1640 to half, !dbg !80
  %1826 = fptrunc float %1641 to half, !dbg !80
  %1827 = insertelement <4 x half> poison, half %1795, i64 0, !dbg !81
  %1828 = insertelement <4 x half> %1827, half %1796, i64 1, !dbg !81
  %1829 = insertelement <4 x half> %1828, half %1797, i64 2, !dbg !81
  %1830 = insertelement <4 x half> %1829, half %1798, i64 3, !dbg !81
  %1831 = insertelement <4 x half> poison, half %1799, i64 0, !dbg !81
  %1832 = insertelement <4 x half> %1831, half %1800, i64 1, !dbg !81
  %1833 = insertelement <4 x half> %1832, half %1801, i64 2, !dbg !81
  %1834 = insertelement <4 x half> %1833, half %1802, i64 3, !dbg !81
  %1835 = insertelement <4 x half> poison, half %1803, i64 0, !dbg !81
  %1836 = insertelement <4 x half> %1835, half %1804, i64 1, !dbg !81
  %1837 = insertelement <4 x half> %1836, half %1805, i64 2, !dbg !81
  %1838 = insertelement <4 x half> %1837, half %1806, i64 3, !dbg !81
  %1839 = insertelement <4 x half> poison, half %1807, i64 0, !dbg !81
  %1840 = insertelement <4 x half> %1839, half %1808, i64 1, !dbg !81
  %1841 = insertelement <4 x half> %1840, half %1809, i64 2, !dbg !81
  %1842 = insertelement <4 x half> %1841, half %1810, i64 3, !dbg !81
  %1843 = insertelement <4 x half> poison, half %1811, i64 0, !dbg !81
  %1844 = insertelement <4 x half> %1843, half %1812, i64 1, !dbg !81
  %1845 = insertelement <4 x half> %1844, half %1813, i64 2, !dbg !81
  %1846 = insertelement <4 x half> %1845, half %1814, i64 3, !dbg !81
  %1847 = insertelement <4 x half> poison, half %1815, i64 0, !dbg !81
  %1848 = insertelement <4 x half> %1847, half %1816, i64 1, !dbg !81
  %1849 = insertelement <4 x half> %1848, half %1817, i64 2, !dbg !81
  %1850 = insertelement <4 x half> %1849, half %1818, i64 3, !dbg !81
  %1851 = insertelement <4 x half> poison, half %1819, i64 0, !dbg !81
  %1852 = insertelement <4 x half> %1851, half %1820, i64 1, !dbg !81
  %1853 = insertelement <4 x half> %1852, half %1821, i64 2, !dbg !81
  %1854 = insertelement <4 x half> %1853, half %1822, i64 3, !dbg !81
  %1855 = insertelement <4 x half> poison, half %1823, i64 0, !dbg !81
  %1856 = insertelement <4 x half> %1855, half %1824, i64 1, !dbg !81
  %1857 = insertelement <4 x half> %1856, half %1825, i64 2, !dbg !81
  %1858 = insertelement <4 x half> %1857, half %1826, i64 3, !dbg !81
  %1859 = shufflevector <1 x half> %1699, <1 x half> %1700, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1860 = shufflevector <4 x half> %1859, <4 x half> %1702, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1861 = shufflevector <4 x half> %1860, <4 x half> %1704, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1862 = shufflevector <1 x half> %1705, <1 x half> %1706, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1863 = shufflevector <4 x half> %1862, <4 x half> %1708, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1864 = shufflevector <4 x half> %1863, <4 x half> %1710, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1865 = shufflevector <1 x half> %1711, <1 x half> %1712, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1866 = shufflevector <4 x half> %1865, <4 x half> %1714, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1867 = shufflevector <4 x half> %1866, <4 x half> %1716, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1868 = shufflevector <1 x half> %1717, <1 x half> %1718, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1869 = shufflevector <4 x half> %1868, <4 x half> %1720, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1870 = shufflevector <4 x half> %1869, <4 x half> %1722, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1871 = shufflevector <1 x half> %1723, <1 x half> %1724, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1872 = shufflevector <4 x half> %1871, <4 x half> %1726, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1873 = shufflevector <4 x half> %1872, <4 x half> %1728, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1874 = shufflevector <1 x half> %1729, <1 x half> %1730, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1875 = shufflevector <4 x half> %1874, <4 x half> %1732, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1876 = shufflevector <4 x half> %1875, <4 x half> %1734, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1877 = shufflevector <1 x half> %1735, <1 x half> %1736, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1878 = shufflevector <4 x half> %1877, <4 x half> %1738, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1879 = shufflevector <4 x half> %1878, <4 x half> %1740, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1880 = shufflevector <1 x half> %1741, <1 x half> %1742, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1881 = shufflevector <4 x half> %1880, <4 x half> %1744, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1882 = shufflevector <4 x half> %1881, <4 x half> %1746, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1883 = shufflevector <1 x half> %1747, <1 x half> %1748, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1884 = shufflevector <4 x half> %1883, <4 x half> %1750, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1885 = shufflevector <4 x half> %1884, <4 x half> %1752, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1886 = shufflevector <1 x half> %1753, <1 x half> %1754, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1887 = shufflevector <4 x half> %1886, <4 x half> %1756, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1888 = shufflevector <4 x half> %1887, <4 x half> %1758, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1889 = shufflevector <1 x half> %1759, <1 x half> %1760, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1890 = shufflevector <4 x half> %1889, <4 x half> %1762, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1891 = shufflevector <4 x half> %1890, <4 x half> %1764, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1892 = shufflevector <1 x half> %1765, <1 x half> %1766, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1893 = shufflevector <4 x half> %1892, <4 x half> %1768, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1894 = shufflevector <4 x half> %1893, <4 x half> %1770, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1895 = shufflevector <1 x half> %1771, <1 x half> %1772, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1896 = shufflevector <4 x half> %1895, <4 x half> %1774, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1897 = shufflevector <4 x half> %1896, <4 x half> %1776, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1898 = shufflevector <1 x half> %1777, <1 x half> %1778, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1899 = shufflevector <4 x half> %1898, <4 x half> %1780, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1900 = shufflevector <4 x half> %1899, <4 x half> %1782, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1901 = shufflevector <1 x half> %1783, <1 x half> %1784, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1902 = shufflevector <4 x half> %1901, <4 x half> %1786, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1903 = shufflevector <4 x half> %1902, <4 x half> %1788, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1904 = shufflevector <1 x half> %1789, <1 x half> %1790, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !81
  %1905 = shufflevector <4 x half> %1904, <4 x half> %1792, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !81
  %1906 = shufflevector <4 x half> %1905, <4 x half> %1794, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !81
  %1907 = shufflevector <2 x float> %1683, <2 x float> %1684, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1908 = shufflevector <2 x float> %1685, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1909 = shufflevector <16 x float> %1907, <16 x float> %1908, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1910 = shufflevector <2 x float> %1686, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1911 = shufflevector <16 x float> %1909, <16 x float> %1910, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1912 = shufflevector <2 x float> %1687, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1913 = shufflevector <16 x float> %1911, <16 x float> %1912, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1914 = shufflevector <2 x float> %1688, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1915 = shufflevector <16 x float> %1913, <16 x float> %1914, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1916 = shufflevector <2 x float> %1689, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1917 = shufflevector <16 x float> %1915, <16 x float> %1916, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !81
  %1918 = shufflevector <2 x float> %1690, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1919 = shufflevector <16 x float> %1917, <16 x float> %1918, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !81
  %1920 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1861, <4 x half> %1830, <16 x float> %1919, i32 0, i32 0, i32 0), !dbg !81
  %1921 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1864, <4 x half> %1834, <16 x float> %1920, i32 0, i32 0, i32 0), !dbg !81
  %1922 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1867, <4 x half> %1838, <16 x float> %1921, i32 0, i32 0, i32 0), !dbg !81
  %1923 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1870, <4 x half> %1842, <16 x float> %1922, i32 0, i32 0, i32 0), !dbg !81
  %1924 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1873, <4 x half> %1846, <16 x float> %1923, i32 0, i32 0, i32 0), !dbg !81
  %1925 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1876, <4 x half> %1850, <16 x float> %1924, i32 0, i32 0, i32 0), !dbg !81
  %1926 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1879, <4 x half> %1854, <16 x float> %1925, i32 0, i32 0, i32 0), !dbg !81
  %1927 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1882, <4 x half> %1858, <16 x float> %1926, i32 0, i32 0, i32 0), !dbg !81
  %1928 = shufflevector <2 x float> %1691, <2 x float> %1692, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1929 = shufflevector <2 x float> %1693, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1930 = shufflevector <16 x float> %1928, <16 x float> %1929, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1931 = shufflevector <2 x float> %1694, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1932 = shufflevector <16 x float> %1930, <16 x float> %1931, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1933 = shufflevector <2 x float> %1695, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1934 = shufflevector <16 x float> %1932, <16 x float> %1933, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1935 = shufflevector <2 x float> %1696, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1936 = shufflevector <16 x float> %1934, <16 x float> %1935, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1937 = shufflevector <2 x float> %1697, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1938 = shufflevector <16 x float> %1936, <16 x float> %1937, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !81
  %1939 = shufflevector <2 x float> %1698, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1940 = shufflevector <16 x float> %1938, <16 x float> %1939, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !81
  %1941 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1885, <4 x half> %1830, <16 x float> %1940, i32 0, i32 0, i32 0), !dbg !81
  %1942 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1888, <4 x half> %1834, <16 x float> %1941, i32 0, i32 0, i32 0), !dbg !81
  %1943 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1891, <4 x half> %1838, <16 x float> %1942, i32 0, i32 0, i32 0), !dbg !81
  %1944 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1894, <4 x half> %1842, <16 x float> %1943, i32 0, i32 0, i32 0), !dbg !81
  %1945 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1897, <4 x half> %1846, <16 x float> %1944, i32 0, i32 0, i32 0), !dbg !81
  %1946 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1900, <4 x half> %1850, <16 x float> %1945, i32 0, i32 0, i32 0), !dbg !81
  %1947 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1903, <4 x half> %1854, <16 x float> %1946, i32 0, i32 0, i32 0), !dbg !81
  %1948 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1906, <4 x half> %1858, <16 x float> %1947, i32 0, i32 0, i32 0), !dbg !81
  %1949 = add nsw i64 %1294, 64, !dbg !82
  %indvars70 = trunc i64 %1949 to i32, !dbg !59
  %1950 = icmp sgt i32 %1024, %indvars70, !dbg !59
  %1951 = shufflevector <16 x float> %1948, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1952 = shufflevector <16 x float> %1948, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1953 = shufflevector <16 x float> %1948, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1954 = shufflevector <16 x float> %1948, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1955 = shufflevector <16 x float> %1948, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1956 = shufflevector <16 x float> %1948, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1957 = shufflevector <16 x float> %1948, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1958 = shufflevector <16 x float> %1948, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1959 = shufflevector <16 x float> %1927, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1960 = shufflevector <16 x float> %1927, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1961 = shufflevector <16 x float> %1927, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1962 = shufflevector <16 x float> %1927, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1963 = shufflevector <16 x float> %1927, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1964 = shufflevector <16 x float> %1927, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1965 = shufflevector <16 x float> %1927, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1966 = shufflevector <16 x float> %1927, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %1950, label %1293, label %._crit_edge58.loopexit, !dbg !59

._crit_edge58.loopexit:                           ; preds = %1293
  %1967 = shufflevector <16 x float> %1948, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !33
  %1968 = shufflevector <16 x float> %1948, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !33
  %1969 = shufflevector <16 x float> %1948, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !33
  %1970 = shufflevector <16 x float> %1948, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %1971 = shufflevector <16 x float> %1927, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !33
  %1972 = shufflevector <16 x float> %1927, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !33
  %1973 = shufflevector <16 x float> %1927, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !33
  %1974 = shufflevector <16 x float> %1927, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !33
  br label %._crit_edge58, !dbg !83

._crit_edge58:                                    ; preds = %._crit_edge58.loopexit, %._crit_edge
  %.lcssa36 = phi float [ %.lcssa39, %._crit_edge ], [ %1680, %._crit_edge58.loopexit ], !dbg !33
  %.lcssa = phi float [ %.lcssa37, %._crit_edge ], [ %1577, %._crit_edge58.loopexit ], !dbg !33
  %1975 = phi <4 x float> [ %1016, %._crit_edge ], [ %1974, %._crit_edge58.loopexit ], !dbg !33
  %1976 = phi <4 x float> [ %1017, %._crit_edge ], [ %1973, %._crit_edge58.loopexit ], !dbg !33
  %1977 = phi <4 x float> [ %1018, %._crit_edge ], [ %1972, %._crit_edge58.loopexit ], !dbg !33
  %1978 = phi <4 x float> [ %1019, %._crit_edge ], [ %1971, %._crit_edge58.loopexit ], !dbg !33
  %1979 = phi <4 x float> [ %1020, %._crit_edge ], [ %1970, %._crit_edge58.loopexit ], !dbg !33
  %1980 = phi <4 x float> [ %1021, %._crit_edge ], [ %1969, %._crit_edge58.loopexit ], !dbg !33
  %1981 = phi <4 x float> [ %1022, %._crit_edge ], [ %1968, %._crit_edge58.loopexit ], !dbg !33
  %1982 = phi <4 x float> [ %1023, %._crit_edge ], [ %1967, %._crit_edge58.loopexit ], !dbg !33
  %1983 = tail call noundef float @llvm.log2.f32(float %.lcssa36), !dbg !83
  %1984 = fadd float %1983, %.lcssa, !dbg !84
  fence syncscope("workgroup") release, !dbg !85
  tail call void @llvm.amdgcn.s.barrier(), !dbg !85
  fence syncscope("workgroup") acquire, !dbg !85
  %1985 = zext nneg i32 %81 to i64, !dbg !85
  %1986 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1985, !dbg !85
  %1987 = insertelement <1 x float> poison, float %1984, i64 0, !dbg !85
  store <1 x float> %1987, ptr addrspace(3) %1986, align 4, !dbg !85
  fence syncscope("workgroup") release, !dbg !85
  tail call void @llvm.amdgcn.s.barrier(), !dbg !85
  fence syncscope("workgroup") acquire, !dbg !85
  %urem = and i32 %35, 128, !dbg !85
  %.not.not = icmp eq i32 %urem, 0, !dbg !85
  br i1 %.not.not, label %1988, label %1997, !dbg !85

1988:                                             ; preds = %._crit_edge58
  %1989 = zext nneg i32 %82 to i64, !dbg !85
  %1990 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1989, !dbg !85
  %1991 = load i32, ptr addrspace(3) %1990, align 4, !dbg !85
  %1992 = mul i32 %19, %21, !dbg !86
  %1993 = sext i32 %1992 to i64, !dbg !87
  %1994 = getelementptr float, ptr addrspace(1) %4, i64 %1993, !dbg !87
  %1995 = sext i32 %84 to i64, !dbg !88
  %1996 = getelementptr float, ptr addrspace(1) %1994, i64 %1995, !dbg !88
  store i32 %1991, ptr addrspace(1) %1996, align 4, !dbg !85
  br label %1997, !dbg !85

1997:                                             ; preds = %1988, %._crit_edge58
  %1998 = insertelement <4 x float> poison, float %.lcssa36, i64 0, !dbg !89
  %1999 = shufflevector <4 x float> %1998, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !89
  %2000 = fdiv <4 x float> %1982, %1999, !dbg !89
  %2001 = fdiv <4 x float> %1981, %1999, !dbg !89
  %2002 = fdiv <4 x float> %1980, %1999, !dbg !89
  %2003 = fdiv <4 x float> %1979, %1999, !dbg !89
  %2004 = fdiv <4 x float> %1978, %1999, !dbg !89
  %2005 = fdiv <4 x float> %1977, %1999, !dbg !89
  %2006 = fdiv <4 x float> %1976, %1999, !dbg !89
  %2007 = fdiv <4 x float> %1975, %1999, !dbg !89
  %2008 = zext nneg i32 %91 to i64, !dbg !23
  %2009 = zext nneg i32 %90 to i64, !dbg !23
  %2010 = zext nneg i32 %89 to i64, !dbg !23
  %2011 = zext nneg i32 %88 to i64, !dbg !23
  %2012 = zext nneg i32 %87 to i64, !dbg !23
  %2013 = zext nneg i32 %86 to i64, !dbg !23
  %2014 = zext nneg i32 %85 to i64, !dbg !23
  %2015 = zext nneg i32 %38 to i64, !dbg !23
  %2016 = or disjoint i64 %1985, %34, !dbg !23
  %2017 = sext i32 %17 to i64, !dbg !90
  %2018 = getelementptr half, ptr addrspace(1) %5, i64 %30, !dbg !91
  %2019 = mul nsw i64 %2016, %2017, !dbg !92
  %2020 = getelementptr half, ptr addrspace(1) %2018, i64 %2019, !dbg !92
  %2021 = getelementptr half, ptr addrspace(1) %2020, i64 %2015, !dbg !92
  %2022 = getelementptr half, ptr addrspace(1) %2020, i64 %2014, !dbg !92
  %2023 = getelementptr half, ptr addrspace(1) %2020, i64 %2013, !dbg !92
  %2024 = getelementptr half, ptr addrspace(1) %2020, i64 %2012, !dbg !92
  %2025 = getelementptr half, ptr addrspace(1) %2020, i64 %2011, !dbg !92
  %2026 = getelementptr half, ptr addrspace(1) %2020, i64 %2010, !dbg !92
  %2027 = getelementptr half, ptr addrspace(1) %2020, i64 %2009, !dbg !92
  %2028 = getelementptr half, ptr addrspace(1) %2020, i64 %2008, !dbg !92
  %2029 = fptrunc <4 x float> %2007 to <4 x half>, !dbg !93
  store <4 x half> %2029, ptr addrspace(1) %2021, align 2, !dbg !92
  %2030 = fptrunc <4 x float> %2006 to <4 x half>, !dbg !93
  store <4 x half> %2030, ptr addrspace(1) %2022, align 2, !dbg !92
  %2031 = fptrunc <4 x float> %2005 to <4 x half>, !dbg !93
  store <4 x half> %2031, ptr addrspace(1) %2023, align 2, !dbg !92
  %2032 = fptrunc <4 x float> %2004 to <4 x half>, !dbg !93
  store <4 x half> %2032, ptr addrspace(1) %2024, align 2, !dbg !92
  %2033 = fptrunc <4 x float> %2003 to <4 x half>, !dbg !93
  store <4 x half> %2033, ptr addrspace(1) %2025, align 2, !dbg !92
  %2034 = fptrunc <4 x float> %2002 to <4 x half>, !dbg !93
  store <4 x half> %2034, ptr addrspace(1) %2026, align 2, !dbg !92
  %2035 = fptrunc <4 x float> %2001 to <4 x half>, !dbg !93
  store <4 x half> %2035, ptr addrspace(1) %2027, align 2, !dbg !92
  %2036 = fptrunc <4 x float> %2000 to <4 x half>, !dbg !93
  store <4 x half> %2036, ptr addrspace(1) %2028, align 2, !dbg !92
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half>, <4 x half>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.log2.f32(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="3" "denormal-fp-math-f32"="preserve-sign" "uniform-work-group-size"="false" }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 8, !"PIC Level", i32 0}
!4 = distinct !DICompileUnit(language: DW_LANG_C, file: !5, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!5 = !DIFile(filename: "06-fused-attention.py", directory: "/triton/python/tutorials")
!6 = !DISubprogram(name: "llvm.amdgcn.exp2.f32", linkageName: "llvm.amdgcn.exp2.f32", scope: !5, file: !5, line: 171, type: !7, scopeLine: 171, spFlags: DISPFlagOptimized)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "_attn_fwd", linkageName: "_attn_fwd", scope: !5, file: !5, line: 100, type: !7, scopeLine: 100, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4)
!10 = !DILocation(line: 113, column: 27, scope: !9)
!11 = !DILocation(line: 114, column: 22, scope: !9)
!12 = !DILocation(line: 116, column: 26, scope: !9)
!13 = !DILocation(line: 116, column: 38, scope: !9)
!14 = !DILocation(line: 115, column: 21, scope: !9)
!15 = !DILocation(line: 116, column: 59, scope: !9)
!16 = !DILocation(line: 116, column: 71, scope: !9)
!17 = !DILocation(line: 116, column: 50, scope: !9)
!18 = !DILocation(line: 120, column: 17, scope: !9)
!19 = !DILocation(line: 112, column: 28, scope: !9)
!20 = !DILocation(line: 123, column: 27, scope: !9)
!21 = !DILocation(line: 125, column: 8, scope: !9)
!22 = !DILocation(line: 153, column: 46, scope: !9)
!23 = !DILocation(line: 163, column: 16, scope: !9)
!24 = !DILocation(line: 154, column: 26, scope: !9)
!25 = !DILocation(line: 129, column: 17, scope: !9)
!26 = !DILocation(line: 134, column: 8, scope: !9)
!27 = !DILocation(line: 137, column: 17, scope: !9)
!28 = !DILocation(line: 142, column: 8, scope: !9)
!29 = !DILocation(line: 153, column: 33, scope: !9)
!30 = !DILocation(line: 161, column: 16, scope: !9)
!31 = !DILocation(line: 44, column: 33, scope: !32, inlinedAt: !33)
!32 = distinct !DILexicalBlockFile(scope: !9, file: !5, discriminator: 0)
!33 = !DILocation(line: 171, column: 74, scope: !9)
!34 = !DILocation(line: 65, column: 20, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !33)
!36 = !DILocation(line: 48, column: 23, scope: !32, inlinedAt: !33)
!37 = !DILocation(line: 163, column: 27, scope: !38, inlinedAt: !33)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/triton/python/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !32, file: !39, discriminator: 0)
!41 = !DILocation(line: 184, column: 40, scope: !40, inlinedAt: !33)
!42 = !DILocation(line: 55, column: 51, scope: !32, inlinedAt: !33)
!43 = !DILocation(line: 55, column: 35, scope: !32, inlinedAt: !33)
!44 = !DILocation(line: 56, column: 22, scope: !32, inlinedAt: !33)
!45 = !DILocation(line: 56, column: 33, scope: !32, inlinedAt: !33)
!46 = !DILocation(line: 57, column: 25, scope: !32, inlinedAt: !33)
!47 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !33)
!48 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !33)
!49 = !DILocation(line: 60, column: 35, scope: !32, inlinedAt: !33)
!50 = !DILocation(line: 60, column: 29, scope: !32, inlinedAt: !33)
!51 = !DILocation(line: 61, column: 20, scope: !32, inlinedAt: !33)
!52 = !DILocation(line: 61, column: 28, scope: !32, inlinedAt: !33)
!53 = !DILocation(line: 63, column: 20, scope: !32, inlinedAt: !33)
!54 = !DILocation(line: 69, column: 21, scope: !32, inlinedAt: !33)
!55 = !DILocation(line: 70, column: 27, scope: !32, inlinedAt: !33)
!56 = !DILocation(line: 74, column: 46, scope: !32, inlinedAt: !33)
!57 = !DILocation(line: 36, column: 52, scope: !32, inlinedAt: !58)
!58 = !DILocation(line: 180, column: 66, scope: !9)
!59 = !DILocation(line: 44, column: 33, scope: !32, inlinedAt: !58)
!60 = !DILocation(line: 65, column: 20, scope: !32, inlinedAt: !58)
!61 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !58)
!62 = !DILocation(line: 48, column: 23, scope: !32, inlinedAt: !58)
!63 = !DILocation(line: 50, column: 49, scope: !32, inlinedAt: !58)
!64 = !DILocation(line: 50, column: 39, scope: !32, inlinedAt: !58)
!65 = !DILocation(line: 51, column: 22, scope: !32, inlinedAt: !58)
!66 = !DILocation(line: 51, column: 51, scope: !32, inlinedAt: !58)
!67 = !DILocation(line: 51, column: 33, scope: !32, inlinedAt: !58)
!68 = !DILocation(line: 163, column: 27, scope: !38, inlinedAt: !58)
!69 = !DILocation(line: 184, column: 40, scope: !40, inlinedAt: !58)
!70 = !DILocation(line: 52, column: 35, scope: !32, inlinedAt: !58)
!71 = !DILocation(line: 53, column: 18, scope: !32, inlinedAt: !58)
!72 = !DILocation(line: 57, column: 25, scope: !32, inlinedAt: !58)
!73 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !58)
!74 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !58)
!75 = !DILocation(line: 60, column: 35, scope: !32, inlinedAt: !58)
!76 = !DILocation(line: 60, column: 29, scope: !32, inlinedAt: !58)
!77 = !DILocation(line: 61, column: 20, scope: !32, inlinedAt: !58)
!78 = !DILocation(line: 61, column: 28, scope: !32, inlinedAt: !58)
!79 = !DILocation(line: 63, column: 20, scope: !32, inlinedAt: !58)
!80 = !DILocation(line: 69, column: 21, scope: !32, inlinedAt: !58)
!81 = !DILocation(line: 70, column: 27, scope: !32, inlinedAt: !58)
!82 = !DILocation(line: 74, column: 46, scope: !32, inlinedAt: !58)
!83 = !DILocation(line: 183, column: 24, scope: !9)
!84 = !DILocation(line: 183, column: 11, scope: !9)
!85 = !DILocation(line: 186, column: 21, scope: !9)
!86 = !DILocation(line: 185, column: 26, scope: !9)
!87 = !DILocation(line: 185, column: 17, scope: !9)
!88 = !DILocation(line: 185, column: 34, scope: !9)
!89 = !DILocation(line: 184, column: 16, scope: !9)
!90 = !DILocation(line: 150, column: 8, scope: !9)
!91 = !DILocation(line: 145, column: 19, scope: !9)
!92 = !DILocation(line: 187, column: 26, scope: !9)
!93 = !DILocation(line: 187, column: 33, scope: !9)
!94 = !DILocation(line: 187, column: 4, scope: !9)
