; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !6 float @llvm.amdgcn.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_attn_fwd(ptr addrspace(1) inreg nocapture readonly %0, ptr addrspace(1) inreg nocapture readonly %1, ptr addrspace(1) inreg nocapture readonly %2, float inreg %3, ptr addrspace(1) inreg nocapture writeonly %4, ptr addrspace(1) inreg nocapture writeonly %5, i32 inreg %6, i32 inreg %7, i32 inreg %8, i32 inreg %9, i32 inreg %10, i32 inreg %11, i32 inreg %12, i32 inreg %13, i32 inreg %14, i32 inreg %15, i32 inreg %16, i32 inreg %17, i32 inreg %18, i32 inreg %19) local_unnamed_addr #1 !dbg !9 {
  %21 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !10
  %.frozen = freeze i32 %18, !dbg !11
  %22 = sdiv i32 %21, %.frozen, !dbg !11
  %23 = sext i32 %22 to i64, !dbg !12
  %24 = sext i32 %6 to i64, !dbg !13
  %25 = mul nsw i64 %23, %24, !dbg !13
  %26 = mul i32 %22, %.frozen, !dbg !14
  %.decomposed = sub i32 %21, %26, !dbg !14
  %27 = sext i32 %.decomposed to i64, !dbg !15
  %28 = sext i32 %7 to i64, !dbg !16
  %29 = mul nsw i64 %27, %28, !dbg !16
  %30 = add nsw i64 %29, %25, !dbg !17
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !18
  %32 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !19
  %33 = shl i32 %32, 6, !dbg !20
  %34 = sext i32 %33 to i64, !dbg !21
  %35 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !22
  %36 = and i32 %35, 63, !dbg !22
  %37 = and i32 %35, 32, !dbg !22
  %38 = lshr exact i32 %37, 3, !dbg !22
  %39 = lshr i32 %35, 3, !dbg !22
  %40 = and i32 %39, 27, !dbg !22
  %41 = or disjoint i32 %40, %38, !dbg !22
  %42 = or disjoint i32 %41, 32, !dbg !22
  %43 = zext nneg i32 %41 to i64, !dbg !23
  %44 = zext nneg i32 %42 to i64, !dbg !23
  %45 = sext i32 %8 to i64, !dbg !21
  %46 = mul nsw i64 %45, %34, !dbg !23
  %47 = mul nsw i64 %45, %43, !dbg !23
  %48 = mul nsw i64 %45, %44, !dbg !23
  %49 = shl i32 %35, 3, !dbg !22
  %50 = and i32 %49, 56, !dbg !22
  %51 = zext nneg i32 %50 to i64, !dbg !23
  %52 = getelementptr half, ptr addrspace(1) %31, i64 %46, !dbg !23
  %53 = getelementptr half, ptr addrspace(1) %52, i64 %47, !dbg !23
  %54 = getelementptr half, ptr addrspace(1) %53, i64 %51, !dbg !23
  %55 = getelementptr half, ptr addrspace(1) %52, i64 %48, !dbg !23
  %56 = getelementptr half, ptr addrspace(1) %55, i64 %51, !dbg !23
  %unmaskedload = load <8 x half>, ptr addrspace(1) %54, align 16, !dbg !23
  %unmaskedload3 = load <8 x half>, ptr addrspace(1) %56, align 16, !dbg !23
  %57 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !24
  %58 = sext i32 %14 to i64, !dbg !25
  %59 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !26
  %60 = sext i32 %11 to i64, !dbg !27
  %61 = and i32 %35, 31, !dbg !22
  %62 = lshr i32 %35, 1, !dbg !22
  %63 = and i32 %62, 32, !dbg !22
  %64 = or disjoint i32 %63, %61, !dbg !22
  %65 = or disjoint i32 %38, 8, !dbg !22
  %66 = or disjoint i32 %38, 16, !dbg !22
  %67 = or disjoint i32 %38, 24, !dbg !22
  %68 = or disjoint i32 %64, %33, !dbg !28
  %69 = fmul float %3, 0x3FF7154760000000, !dbg !29
  %70 = and i32 %62, 4, !dbg !23
  %71 = or disjoint i32 %50, %70, !dbg !23
  %72 = and i32 %62, 8, !dbg !23
  %73 = lshr exact i32 %37, 1, !dbg !23
  %74 = or disjoint i32 %73, %72, !dbg !23
  %75 = or disjoint i32 %74, %63, !dbg !23
  %76 = xor i32 %75, %71, !dbg !23
  %77 = shl nuw nsw i32 %41, 6, !dbg !23
  %78 = getelementptr half, ptr addrspace(3) @global_smem, i32 %76, !dbg !23
  %79 = getelementptr half, ptr addrspace(3) %78, i32 %77, !dbg !23
  %80 = shufflevector <8 x half> %unmaskedload, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %80, ptr addrspace(3) %79, align 8, !dbg !23
  %81 = or disjoint i32 %50, 4, !dbg !23
  %82 = or disjoint i32 %74, %70, !dbg !23
  %83 = or disjoint i32 %82, %63, !dbg !23
  %84 = xor i32 %83, %81, !dbg !23
  %85 = getelementptr half, ptr addrspace(3) @global_smem, i32 %84, !dbg !23
  %86 = getelementptr half, ptr addrspace(3) %85, i32 %77, !dbg !23
  %87 = shufflevector <8 x half> %unmaskedload, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %87, ptr addrspace(3) %86, align 8, !dbg !23
  %88 = or disjoint i32 %77, 2048, !dbg !23
  %89 = getelementptr half, ptr addrspace(3) %78, i32 %88, !dbg !23
  %90 = shufflevector <8 x half> %unmaskedload3, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !23
  store <4 x half> %90, ptr addrspace(3) %89, align 8, !dbg !23
  %91 = getelementptr half, ptr addrspace(3) %85, i32 %88, !dbg !23
  %92 = shufflevector <8 x half> %unmaskedload3, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !23
  store <4 x half> %92, ptr addrspace(3) %91, align 8, !dbg !23
  fence syncscope("workgroup") release, !dbg !23
  tail call void @llvm.amdgcn.s.barrier(), !dbg !23
  fence syncscope("workgroup") acquire, !dbg !23
  %93 = icmp ugt i32 %36, 31, !dbg !23
  %94 = zext i1 %93 to i32, !dbg !23
  %95 = and i32 %35, 15, !dbg !23
  %96 = xor i32 %95, %94, !dbg !23
  %97 = shl nuw nsw i32 %96, 2, !dbg !23
  %98 = shl nuw nsw i32 %64, 6, !dbg !23
  %99 = or disjoint i32 %97, %98, !dbg !23
  %100 = or disjoint i32 %94, 2, !dbg !23
  %101 = xor i32 %100, %95, !dbg !23
  %102 = shl nuw nsw i32 %101, 2, !dbg !23
  %103 = or disjoint i32 %102, %98, !dbg !23
  %104 = or disjoint i32 %94, 4, !dbg !23
  %105 = xor i32 %104, %95, !dbg !23
  %106 = shl nuw nsw i32 %105, 2, !dbg !23
  %107 = or disjoint i32 %106, %98, !dbg !23
  %108 = or disjoint i32 %94, 6, !dbg !23
  %109 = xor i32 %108, %95, !dbg !23
  %110 = shl nuw nsw i32 %109, 2, !dbg !23
  %111 = or disjoint i32 %110, %98, !dbg !23
  %112 = or disjoint i32 %94, 8, !dbg !23
  %113 = xor i32 %112, %95, !dbg !23
  %114 = shl nuw nsw i32 %113, 2, !dbg !23
  %115 = or disjoint i32 %114, %98, !dbg !23
  %116 = or disjoint i32 %94, 10, !dbg !23
  %117 = xor i32 %116, %95, !dbg !23
  %118 = shl nuw nsw i32 %117, 2, !dbg !23
  %119 = or disjoint i32 %118, %98, !dbg !23
  %120 = or disjoint i32 %94, 12, !dbg !23
  %121 = xor i32 %120, %95, !dbg !23
  %122 = shl nuw nsw i32 %121, 2, !dbg !23
  %123 = or disjoint i32 %122, %98, !dbg !23
  %124 = or disjoint i32 %94, 14, !dbg !23
  %125 = xor i32 %124, %95, !dbg !23
  %126 = shl nuw nsw i32 %125, 2, !dbg !23
  %127 = or disjoint i32 %126, %98, !dbg !23
  %128 = getelementptr half, ptr addrspace(3) @global_smem, i32 %99, !dbg !23
  %129 = load <4 x half>, ptr addrspace(3) %128, align 8, !dbg !23
  %130 = getelementptr half, ptr addrspace(3) @global_smem, i32 %103, !dbg !23
  %131 = load <4 x half>, ptr addrspace(3) %130, align 8, !dbg !23
  %132 = getelementptr half, ptr addrspace(3) @global_smem, i32 %107, !dbg !23
  %133 = load <4 x half>, ptr addrspace(3) %132, align 8, !dbg !23
  %134 = getelementptr half, ptr addrspace(3) @global_smem, i32 %111, !dbg !23
  %135 = load <4 x half>, ptr addrspace(3) %134, align 8, !dbg !23
  %136 = getelementptr half, ptr addrspace(3) @global_smem, i32 %115, !dbg !23
  %137 = load <4 x half>, ptr addrspace(3) %136, align 8, !dbg !23
  %138 = getelementptr half, ptr addrspace(3) @global_smem, i32 %119, !dbg !23
  %139 = load <4 x half>, ptr addrspace(3) %138, align 8, !dbg !23
  %140 = getelementptr half, ptr addrspace(3) @global_smem, i32 %123, !dbg !23
  %141 = load <4 x half>, ptr addrspace(3) %140, align 8, !dbg !23
  %142 = getelementptr half, ptr addrspace(3) @global_smem, i32 %127, !dbg !23
  %143 = load <4 x half>, ptr addrspace(3) %142, align 8, !dbg !23
  %144 = icmp sgt i32 %33, 0, !dbg !30
  br i1 %144, label %.lr.ph, label %._crit_edge, !dbg !30

.lr.ph:                                           ; preds = %20
  %145 = mul nsw i64 %60, %43
  %invariant.gep = getelementptr half, ptr addrspace(1) %59, i64 %145, !dbg !30
  %invariant.gep31 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %51, !dbg !30
  %146 = mul nsw i64 %58, %43
  %invariant.gep33 = getelementptr half, ptr addrspace(1) %57, i64 %146, !dbg !30
  %invariant.gep34 = getelementptr half, ptr addrspace(1) %invariant.gep33, i64 %51, !dbg !30
  %147 = shl nuw nsw i32 %61, 6
  %148 = or disjoint i32 %97, %147
  %149 = or disjoint i32 %102, %147
  %150 = or disjoint i32 %106, %147
  %151 = or disjoint i32 %110, %147
  %152 = or disjoint i32 %114, %147
  %153 = or disjoint i32 %118, %147
  %154 = or disjoint i32 %122, %147
  %155 = or disjoint i32 %126, %147
  %156 = getelementptr half, ptr addrspace(3) @global_smem, i32 %148
  %157 = getelementptr half, ptr addrspace(3) @global_smem, i32 %149
  %158 = getelementptr half, ptr addrspace(3) @global_smem, i32 %150
  %159 = getelementptr half, ptr addrspace(3) @global_smem, i32 %151
  %160 = getelementptr half, ptr addrspace(3) @global_smem, i32 %152
  %161 = getelementptr half, ptr addrspace(3) @global_smem, i32 %153
  %162 = getelementptr half, ptr addrspace(3) @global_smem, i32 %154
  %163 = getelementptr half, ptr addrspace(3) @global_smem, i32 %155
  %164 = shl i32 %35, 2
  %165 = xor i32 %164, 128
  %166 = or disjoint i32 %77, %50
  %167 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %166
  %168 = shl nuw nsw i32 %36, 3
  %169 = and i32 %168, 256
  %170 = or disjoint i32 %169, %61
  %171 = or disjoint i32 %170, 64
  %172 = or disjoint i32 %170, 128
  %173 = or disjoint i32 %170, 192
  %174 = or disjoint i32 %170, 512
  %175 = or disjoint i32 %170, 576
  %176 = or disjoint i32 %170, 640
  %177 = or disjoint i32 %170, 704
  %178 = or disjoint i32 %170, 1024
  %179 = or disjoint i32 %170, 1088
  %180 = or disjoint i32 %170, 1152
  %181 = or disjoint i32 %170, 1216
  %182 = or disjoint i32 %170, 1536
  %183 = or disjoint i32 %170, 1600
  %184 = or disjoint i32 %170, 1664
  %185 = or disjoint i32 %170, 1728
  %186 = or disjoint i32 %170, 32
  %187 = or disjoint i32 %170, 96
  %188 = or disjoint i32 %170, 160
  %189 = or disjoint i32 %170, 224
  %190 = or disjoint i32 %170, 544
  %191 = or disjoint i32 %170, 608
  %192 = or disjoint i32 %170, 672
  %193 = or disjoint i32 %170, 736
  %194 = or disjoint i32 %170, 1056
  %195 = or disjoint i32 %170, 1120
  %196 = or disjoint i32 %170, 1184
  %197 = or disjoint i32 %170, 1248
  %198 = or disjoint i32 %170, 1568
  %199 = or disjoint i32 %170, 1632
  %200 = or disjoint i32 %170, 1696
  %201 = or disjoint i32 %170, 1760
  %202 = getelementptr half, ptr addrspace(3) @global_smem, i32 %170
  %203 = getelementptr half, ptr addrspace(3) @global_smem, i32 %171
  %204 = getelementptr half, ptr addrspace(3) @global_smem, i32 %172
  %205 = getelementptr half, ptr addrspace(3) @global_smem, i32 %173
  %206 = getelementptr half, ptr addrspace(3) @global_smem, i32 %174
  %207 = getelementptr half, ptr addrspace(3) @global_smem, i32 %175
  %208 = getelementptr half, ptr addrspace(3) @global_smem, i32 %176
  %209 = getelementptr half, ptr addrspace(3) @global_smem, i32 %177
  %210 = getelementptr half, ptr addrspace(3) @global_smem, i32 %178
  %211 = getelementptr half, ptr addrspace(3) @global_smem, i32 %179
  %212 = getelementptr half, ptr addrspace(3) @global_smem, i32 %180
  %213 = getelementptr half, ptr addrspace(3) @global_smem, i32 %181
  %214 = getelementptr half, ptr addrspace(3) @global_smem, i32 %182
  %215 = getelementptr half, ptr addrspace(3) @global_smem, i32 %183
  %216 = getelementptr half, ptr addrspace(3) @global_smem, i32 %184
  %217 = getelementptr half, ptr addrspace(3) @global_smem, i32 %185
  %218 = getelementptr half, ptr addrspace(3) @global_smem, i32 %186
  %219 = getelementptr half, ptr addrspace(3) @global_smem, i32 %187
  %220 = getelementptr half, ptr addrspace(3) @global_smem, i32 %188
  %221 = getelementptr half, ptr addrspace(3) @global_smem, i32 %189
  %222 = getelementptr half, ptr addrspace(3) @global_smem, i32 %190
  %223 = getelementptr half, ptr addrspace(3) @global_smem, i32 %191
  %224 = getelementptr half, ptr addrspace(3) @global_smem, i32 %192
  %225 = getelementptr half, ptr addrspace(3) @global_smem, i32 %193
  %226 = getelementptr half, ptr addrspace(3) @global_smem, i32 %194
  %227 = getelementptr half, ptr addrspace(3) @global_smem, i32 %195
  %228 = getelementptr half, ptr addrspace(3) @global_smem, i32 %196
  %229 = getelementptr half, ptr addrspace(3) @global_smem, i32 %197
  %230 = getelementptr half, ptr addrspace(3) @global_smem, i32 %198
  %231 = getelementptr half, ptr addrspace(3) @global_smem, i32 %199
  %232 = getelementptr half, ptr addrspace(3) @global_smem, i32 %200
  %233 = getelementptr half, ptr addrspace(3) @global_smem, i32 %201
  br label %234, !dbg !30

234:                                              ; preds = %.lr.ph, %234
  %235 = phi i64 [ 0, %.lr.ph ], [ %538, %234 ]
  %236 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %310, %234 ]
  %237 = phi float [ 1.000000e+00, %.lr.ph ], [ %381, %234 ]
  %238 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %540, %234 ]
  %239 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %541, %234 ]
  %240 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %542, %234 ]
  %241 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %543, %234 ]
  %242 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %544, %234 ]
  %243 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %545, %234 ]
  %244 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %546, %234 ]
  %245 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %547, %234 ]
  %246 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %548, %234 ]
  %247 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %549, %234 ]
  %248 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %550, %234 ]
  %249 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %551, %234 ]
  %250 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %552, %234 ]
  %251 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %553, %234 ]
  %252 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %554, %234 ]
  %253 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %555, %234 ]
  %254 = mul i64 %235, %60, !dbg !33
  %gep32 = getelementptr half, ptr addrspace(1) %invariant.gep31, i64 %254, !dbg !33
  %unmaskedload21 = load <8 x half>, ptr addrspace(1) %gep32, align 16, !dbg !33
  %255 = mul i64 %235, %58, !dbg !34
  %gep35 = getelementptr half, ptr addrspace(1) %invariant.gep34, i64 %255, !dbg !34
  %unmaskedload22 = load <8 x half>, ptr addrspace(1) %gep35, align 16, !dbg !34
  fence syncscope("workgroup") release, !dbg !33
  tail call void @llvm.amdgcn.s.barrier(), !dbg !33
  fence syncscope("workgroup") acquire, !dbg !33
  %256 = shufflevector <8 x half> %unmaskedload21, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !33
  store <4 x half> %256, ptr addrspace(3) %79, align 8, !dbg !33
  %257 = shufflevector <8 x half> %unmaskedload21, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !33
  store <4 x half> %257, ptr addrspace(3) %86, align 8, !dbg !33
  fence syncscope("workgroup") release, !dbg !33
  tail call void @llvm.amdgcn.s.barrier(), !dbg !33
  fence syncscope("workgroup") acquire, !dbg !33
  %258 = load <4 x half>, ptr addrspace(3) %156, align 8, !dbg !33
  %259 = load <4 x half>, ptr addrspace(3) %157, align 8, !dbg !33
  %260 = load <4 x half>, ptr addrspace(3) %158, align 8, !dbg !33
  %261 = load <4 x half>, ptr addrspace(3) %159, align 8, !dbg !33
  %262 = load <4 x half>, ptr addrspace(3) %160, align 8, !dbg !33
  %263 = load <4 x half>, ptr addrspace(3) %161, align 8, !dbg !33
  %264 = load <4 x half>, ptr addrspace(3) %162, align 8, !dbg !33
  %265 = load <4 x half>, ptr addrspace(3) %163, align 8, !dbg !33
  %266 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %258, <4 x half> %129, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !35
  %267 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %259, <4 x half> %131, <16 x float> %266, i32 0, i32 0, i32 0), !dbg !35
  %268 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %260, <4 x half> %133, <16 x float> %267, i32 0, i32 0, i32 0), !dbg !35
  %269 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %261, <4 x half> %135, <16 x float> %268, i32 0, i32 0, i32 0), !dbg !35
  %270 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %262, <4 x half> %137, <16 x float> %269, i32 0, i32 0, i32 0), !dbg !35
  %271 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %263, <4 x half> %139, <16 x float> %270, i32 0, i32 0, i32 0), !dbg !35
  %272 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %264, <4 x half> %141, <16 x float> %271, i32 0, i32 0, i32 0), !dbg !35
  %273 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %265, <4 x half> %143, <16 x float> %272, i32 0, i32 0, i32 0), !dbg !35
  %274 = extractelement <16 x float> %273, i64 0, !dbg !35
  %275 = extractelement <16 x float> %273, i64 1, !dbg !35
  %276 = extractelement <16 x float> %273, i64 2, !dbg !35
  %277 = extractelement <16 x float> %273, i64 3, !dbg !35
  %278 = extractelement <16 x float> %273, i64 4, !dbg !35
  %279 = extractelement <16 x float> %273, i64 5, !dbg !35
  %280 = extractelement <16 x float> %273, i64 6, !dbg !35
  %281 = extractelement <16 x float> %273, i64 7, !dbg !35
  %282 = extractelement <16 x float> %273, i64 8, !dbg !35
  %283 = extractelement <16 x float> %273, i64 9, !dbg !35
  %284 = extractelement <16 x float> %273, i64 10, !dbg !35
  %285 = extractelement <16 x float> %273, i64 11, !dbg !35
  %286 = extractelement <16 x float> %273, i64 12, !dbg !35
  %287 = extractelement <16 x float> %273, i64 13, !dbg !35
  %288 = extractelement <16 x float> %273, i64 14, !dbg !35
  %289 = extractelement <16 x float> %273, i64 15, !dbg !35
  %290 = tail call float @llvm.maxnum.f32(float %274, float %275), !dbg !36
  %291 = tail call float @llvm.maxnum.f32(float %290, float %276), !dbg !36
  %292 = tail call float @llvm.maxnum.f32(float %291, float %277), !dbg !36
  %293 = tail call float @llvm.maxnum.f32(float %292, float %278), !dbg !36
  %294 = tail call float @llvm.maxnum.f32(float %293, float %279), !dbg !36
  %295 = tail call float @llvm.maxnum.f32(float %294, float %280), !dbg !36
  %296 = tail call float @llvm.maxnum.f32(float %295, float %281), !dbg !36
  %297 = tail call float @llvm.maxnum.f32(float %296, float %282), !dbg !36
  %298 = tail call float @llvm.maxnum.f32(float %297, float %283), !dbg !36
  %299 = tail call float @llvm.maxnum.f32(float %298, float %284), !dbg !36
  %300 = tail call float @llvm.maxnum.f32(float %299, float %285), !dbg !36
  %301 = tail call float @llvm.maxnum.f32(float %300, float %286), !dbg !36
  %302 = tail call float @llvm.maxnum.f32(float %301, float %287), !dbg !36
  %303 = tail call float @llvm.maxnum.f32(float %302, float %288), !dbg !36
  %304 = tail call float @llvm.maxnum.f32(float %303, float %289), !dbg !36
  %305 = bitcast float %304 to i32, !dbg !40
  %306 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %165, i32 %305), !dbg !40
  %307 = bitcast i32 %306 to float, !dbg !40
  %308 = tail call float @llvm.maxnum.f32(float %304, float %307), !dbg !36
  %309 = fmul float %69, %308, !dbg !41
  %310 = tail call float @llvm.maxnum.f32(float %236, float %309), !dbg !42
  %311 = fmul float %69, %274, !dbg !43
  %312 = fmul float %69, %275, !dbg !43
  %313 = fmul float %69, %276, !dbg !43
  %314 = fmul float %69, %277, !dbg !43
  %315 = fmul float %69, %278, !dbg !43
  %316 = fmul float %69, %279, !dbg !43
  %317 = fmul float %69, %280, !dbg !43
  %318 = fmul float %69, %281, !dbg !43
  %319 = fmul float %69, %282, !dbg !43
  %320 = fmul float %69, %283, !dbg !43
  %321 = fmul float %69, %284, !dbg !43
  %322 = fmul float %69, %285, !dbg !43
  %323 = fmul float %69, %286, !dbg !43
  %324 = fmul float %69, %287, !dbg !43
  %325 = fmul float %69, %288, !dbg !43
  %326 = fmul float %69, %289, !dbg !43
  %327 = fsub float %311, %310, !dbg !44
  %328 = fsub float %312, %310, !dbg !44
  %329 = fsub float %313, %310, !dbg !44
  %330 = fsub float %314, %310, !dbg !44
  %331 = fsub float %315, %310, !dbg !44
  %332 = fsub float %316, %310, !dbg !44
  %333 = fsub float %317, %310, !dbg !44
  %334 = fsub float %318, %310, !dbg !44
  %335 = fsub float %319, %310, !dbg !44
  %336 = fsub float %320, %310, !dbg !44
  %337 = fsub float %321, %310, !dbg !44
  %338 = fsub float %322, %310, !dbg !44
  %339 = fsub float %323, %310, !dbg !44
  %340 = fsub float %324, %310, !dbg !44
  %341 = fsub float %325, %310, !dbg !44
  %342 = fsub float %326, %310, !dbg !44
  %343 = tail call float @llvm.amdgcn.exp2.f32(float %327), !dbg !45
  %344 = tail call float @llvm.amdgcn.exp2.f32(float %328), !dbg !45
  %345 = tail call float @llvm.amdgcn.exp2.f32(float %329), !dbg !45
  %346 = tail call float @llvm.amdgcn.exp2.f32(float %330), !dbg !45
  %347 = tail call float @llvm.amdgcn.exp2.f32(float %331), !dbg !45
  %348 = tail call float @llvm.amdgcn.exp2.f32(float %332), !dbg !45
  %349 = tail call float @llvm.amdgcn.exp2.f32(float %333), !dbg !45
  %350 = tail call float @llvm.amdgcn.exp2.f32(float %334), !dbg !45
  %351 = tail call float @llvm.amdgcn.exp2.f32(float %335), !dbg !45
  %352 = tail call float @llvm.amdgcn.exp2.f32(float %336), !dbg !45
  %353 = tail call float @llvm.amdgcn.exp2.f32(float %337), !dbg !45
  %354 = tail call float @llvm.amdgcn.exp2.f32(float %338), !dbg !45
  %355 = tail call float @llvm.amdgcn.exp2.f32(float %339), !dbg !45
  %356 = tail call float @llvm.amdgcn.exp2.f32(float %340), !dbg !45
  %357 = tail call float @llvm.amdgcn.exp2.f32(float %341), !dbg !45
  %358 = tail call float @llvm.amdgcn.exp2.f32(float %342), !dbg !45
  %359 = fadd float %343, %344, !dbg !46
  %360 = fadd float %345, %359, !dbg !46
  %361 = fadd float %346, %360, !dbg !46
  %362 = fadd float %347, %361, !dbg !46
  %363 = fadd float %348, %362, !dbg !46
  %364 = fadd float %349, %363, !dbg !46
  %365 = fadd float %350, %364, !dbg !46
  %366 = fadd float %351, %365, !dbg !46
  %367 = fadd float %352, %366, !dbg !46
  %368 = fadd float %353, %367, !dbg !46
  %369 = fadd float %354, %368, !dbg !46
  %370 = fadd float %355, %369, !dbg !46
  %371 = fadd float %356, %370, !dbg !46
  %372 = fadd float %357, %371, !dbg !46
  %373 = fadd float %358, %372, !dbg !46
  %374 = bitcast float %373 to i32, !dbg !47
  %375 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %165, i32 %374), !dbg !47
  %376 = bitcast i32 %375 to float, !dbg !47
  %377 = fadd float %373, %376, !dbg !46
  %378 = fsub float %236, %310, !dbg !48
  %379 = tail call float @llvm.amdgcn.exp2.f32(float %378), !dbg !49
  %380 = fmul float %237, %379, !dbg !50
  %381 = fadd float %380, %377, !dbg !51
  %382 = insertelement <2 x float> poison, float %379, i64 0, !dbg !52
  %383 = shufflevector <2 x float> %382, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %384 = fmul <2 x float> %246, %383, !dbg !52
  %385 = fmul <2 x float> %247, %383, !dbg !52
  %386 = fmul <2 x float> %248, %383, !dbg !52
  %387 = fmul <2 x float> %249, %383, !dbg !52
  %388 = fmul <2 x float> %250, %383, !dbg !52
  %389 = fmul <2 x float> %251, %383, !dbg !52
  %390 = fmul <2 x float> %252, %383, !dbg !52
  %391 = fmul <2 x float> %253, %383, !dbg !52
  %392 = fmul <2 x float> %238, %383, !dbg !52
  %393 = fmul <2 x float> %239, %383, !dbg !52
  %394 = fmul <2 x float> %240, %383, !dbg !52
  %395 = fmul <2 x float> %241, %383, !dbg !52
  %396 = fmul <2 x float> %242, %383, !dbg !52
  %397 = fmul <2 x float> %243, %383, !dbg !52
  %398 = fmul <2 x float> %244, %383, !dbg !52
  %399 = fmul <2 x float> %245, %383, !dbg !52
  %400 = fptrunc float %343 to half, !dbg !53
  %401 = fptrunc float %344 to half, !dbg !53
  %402 = fptrunc float %345 to half, !dbg !53
  %403 = fptrunc float %346 to half, !dbg !53
  %404 = fptrunc float %347 to half, !dbg !53
  %405 = fptrunc float %348 to half, !dbg !53
  %406 = fptrunc float %349 to half, !dbg !53
  %407 = fptrunc float %350 to half, !dbg !53
  %408 = fptrunc float %351 to half, !dbg !53
  %409 = fptrunc float %352 to half, !dbg !53
  %410 = fptrunc float %353 to half, !dbg !53
  %411 = fptrunc float %354 to half, !dbg !53
  %412 = fptrunc float %355 to half, !dbg !53
  %413 = fptrunc float %356 to half, !dbg !53
  %414 = fptrunc float %357 to half, !dbg !53
  %415 = fptrunc float %358 to half, !dbg !53
  fence syncscope("workgroup") release, !dbg !34
  tail call void @llvm.amdgcn.s.barrier(), !dbg !34
  fence syncscope("workgroup") acquire, !dbg !34
  store <8 x half> %unmaskedload22, ptr addrspace(3) %167, align 16, !dbg !34
  fence syncscope("workgroup") release, !dbg !34
  tail call void @llvm.amdgcn.s.barrier(), !dbg !34
  fence syncscope("workgroup") acquire, !dbg !34
  %416 = load <1 x half>, ptr addrspace(3) %202, align 2, !dbg !34
  %417 = load <1 x half>, ptr addrspace(3) %203, align 2, !dbg !34
  %418 = load <1 x half>, ptr addrspace(3) %204, align 2, !dbg !34
  %419 = shufflevector <1 x half> %418, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %420 = load <1 x half>, ptr addrspace(3) %205, align 2, !dbg !34
  %421 = shufflevector <1 x half> %420, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %422 = load <1 x half>, ptr addrspace(3) %206, align 2, !dbg !34
  %423 = load <1 x half>, ptr addrspace(3) %207, align 2, !dbg !34
  %424 = load <1 x half>, ptr addrspace(3) %208, align 2, !dbg !34
  %425 = shufflevector <1 x half> %424, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %426 = load <1 x half>, ptr addrspace(3) %209, align 2, !dbg !34
  %427 = shufflevector <1 x half> %426, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %428 = load <1 x half>, ptr addrspace(3) %210, align 2, !dbg !34
  %429 = load <1 x half>, ptr addrspace(3) %211, align 2, !dbg !34
  %430 = load <1 x half>, ptr addrspace(3) %212, align 2, !dbg !34
  %431 = shufflevector <1 x half> %430, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %432 = load <1 x half>, ptr addrspace(3) %213, align 2, !dbg !34
  %433 = shufflevector <1 x half> %432, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %434 = load <1 x half>, ptr addrspace(3) %214, align 2, !dbg !34
  %435 = load <1 x half>, ptr addrspace(3) %215, align 2, !dbg !34
  %436 = load <1 x half>, ptr addrspace(3) %216, align 2, !dbg !34
  %437 = shufflevector <1 x half> %436, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %438 = load <1 x half>, ptr addrspace(3) %217, align 2, !dbg !34
  %439 = shufflevector <1 x half> %438, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %440 = load <1 x half>, ptr addrspace(3) %218, align 2, !dbg !34
  %441 = load <1 x half>, ptr addrspace(3) %219, align 2, !dbg !34
  %442 = load <1 x half>, ptr addrspace(3) %220, align 2, !dbg !34
  %443 = shufflevector <1 x half> %442, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %444 = load <1 x half>, ptr addrspace(3) %221, align 2, !dbg !34
  %445 = shufflevector <1 x half> %444, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %446 = load <1 x half>, ptr addrspace(3) %222, align 2, !dbg !34
  %447 = load <1 x half>, ptr addrspace(3) %223, align 2, !dbg !34
  %448 = load <1 x half>, ptr addrspace(3) %224, align 2, !dbg !34
  %449 = shufflevector <1 x half> %448, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %450 = load <1 x half>, ptr addrspace(3) %225, align 2, !dbg !34
  %451 = shufflevector <1 x half> %450, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %452 = load <1 x half>, ptr addrspace(3) %226, align 2, !dbg !34
  %453 = load <1 x half>, ptr addrspace(3) %227, align 2, !dbg !34
  %454 = load <1 x half>, ptr addrspace(3) %228, align 2, !dbg !34
  %455 = shufflevector <1 x half> %454, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %456 = load <1 x half>, ptr addrspace(3) %229, align 2, !dbg !34
  %457 = shufflevector <1 x half> %456, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %458 = load <1 x half>, ptr addrspace(3) %230, align 2, !dbg !34
  %459 = load <1 x half>, ptr addrspace(3) %231, align 2, !dbg !34
  %460 = load <1 x half>, ptr addrspace(3) %232, align 2, !dbg !34
  %461 = shufflevector <1 x half> %460, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %462 = load <1 x half>, ptr addrspace(3) %233, align 2, !dbg !34
  %463 = shufflevector <1 x half> %462, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %464 = insertelement <4 x half> poison, half %400, i64 0, !dbg !54
  %465 = insertelement <4 x half> %464, half %401, i64 1, !dbg !54
  %466 = insertelement <4 x half> %465, half %402, i64 2, !dbg !54
  %467 = insertelement <4 x half> %466, half %403, i64 3, !dbg !54
  %468 = insertelement <4 x half> poison, half %404, i64 0, !dbg !54
  %469 = insertelement <4 x half> %468, half %405, i64 1, !dbg !54
  %470 = insertelement <4 x half> %469, half %406, i64 2, !dbg !54
  %471 = insertelement <4 x half> %470, half %407, i64 3, !dbg !54
  %472 = insertelement <4 x half> poison, half %408, i64 0, !dbg !54
  %473 = insertelement <4 x half> %472, half %409, i64 1, !dbg !54
  %474 = insertelement <4 x half> %473, half %410, i64 2, !dbg !54
  %475 = insertelement <4 x half> %474, half %411, i64 3, !dbg !54
  %476 = insertelement <4 x half> poison, half %412, i64 0, !dbg !54
  %477 = insertelement <4 x half> %476, half %413, i64 1, !dbg !54
  %478 = insertelement <4 x half> %477, half %414, i64 2, !dbg !54
  %479 = insertelement <4 x half> %478, half %415, i64 3, !dbg !54
  %480 = shufflevector <1 x half> %416, <1 x half> %417, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %481 = shufflevector <4 x half> %480, <4 x half> %419, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %482 = shufflevector <4 x half> %481, <4 x half> %421, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %483 = shufflevector <1 x half> %422, <1 x half> %423, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %484 = shufflevector <4 x half> %483, <4 x half> %425, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %485 = shufflevector <4 x half> %484, <4 x half> %427, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %486 = shufflevector <1 x half> %428, <1 x half> %429, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %487 = shufflevector <4 x half> %486, <4 x half> %431, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %488 = shufflevector <4 x half> %487, <4 x half> %433, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %489 = shufflevector <1 x half> %434, <1 x half> %435, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %490 = shufflevector <4 x half> %489, <4 x half> %437, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %491 = shufflevector <4 x half> %490, <4 x half> %439, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %492 = shufflevector <1 x half> %440, <1 x half> %441, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %493 = shufflevector <4 x half> %492, <4 x half> %443, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %494 = shufflevector <4 x half> %493, <4 x half> %445, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %495 = shufflevector <1 x half> %446, <1 x half> %447, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %496 = shufflevector <4 x half> %495, <4 x half> %449, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %497 = shufflevector <4 x half> %496, <4 x half> %451, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %498 = shufflevector <1 x half> %452, <1 x half> %453, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %499 = shufflevector <4 x half> %498, <4 x half> %455, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %500 = shufflevector <4 x half> %499, <4 x half> %457, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %501 = shufflevector <1 x half> %458, <1 x half> %459, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !54
  %502 = shufflevector <4 x half> %501, <4 x half> %461, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !54
  %503 = shufflevector <4 x half> %502, <4 x half> %463, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !54
  %504 = shufflevector <2 x float> %384, <2 x float> %385, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %505 = shufflevector <2 x float> %386, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %506 = shufflevector <16 x float> %504, <16 x float> %505, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %507 = shufflevector <2 x float> %387, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %508 = shufflevector <16 x float> %506, <16 x float> %507, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %509 = shufflevector <2 x float> %388, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %510 = shufflevector <16 x float> %508, <16 x float> %509, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %511 = shufflevector <2 x float> %389, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %512 = shufflevector <16 x float> %510, <16 x float> %511, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %513 = shufflevector <2 x float> %390, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %514 = shufflevector <16 x float> %512, <16 x float> %513, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !54
  %515 = shufflevector <2 x float> %391, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %516 = shufflevector <16 x float> %514, <16 x float> %515, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !54
  %517 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %482, <4 x half> %467, <16 x float> %516, i32 0, i32 0, i32 0), !dbg !54
  %518 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %485, <4 x half> %471, <16 x float> %517, i32 0, i32 0, i32 0), !dbg !54
  %519 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %488, <4 x half> %475, <16 x float> %518, i32 0, i32 0, i32 0), !dbg !54
  %520 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %491, <4 x half> %479, <16 x float> %519, i32 0, i32 0, i32 0), !dbg !54
  %521 = shufflevector <2 x float> %392, <2 x float> %393, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %522 = shufflevector <2 x float> %394, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %523 = shufflevector <16 x float> %521, <16 x float> %522, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %524 = shufflevector <2 x float> %395, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %525 = shufflevector <16 x float> %523, <16 x float> %524, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %526 = shufflevector <2 x float> %396, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %527 = shufflevector <16 x float> %525, <16 x float> %526, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %528 = shufflevector <2 x float> %397, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %529 = shufflevector <16 x float> %527, <16 x float> %528, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %530 = shufflevector <2 x float> %398, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %531 = shufflevector <16 x float> %529, <16 x float> %530, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !54
  %532 = shufflevector <2 x float> %399, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %533 = shufflevector <16 x float> %531, <16 x float> %532, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !54
  %534 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %494, <4 x half> %467, <16 x float> %533, i32 0, i32 0, i32 0), !dbg !54
  %535 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %497, <4 x half> %471, <16 x float> %534, i32 0, i32 0, i32 0), !dbg !54
  %536 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %500, <4 x half> %475, <16 x float> %535, i32 0, i32 0, i32 0), !dbg !54
  %537 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %503, <4 x half> %479, <16 x float> %536, i32 0, i32 0, i32 0), !dbg !54
  %538 = add nuw nsw i64 %235, 32, !dbg !55
  %indvars = trunc i64 %538 to i32, !dbg !30
  %539 = icmp sgt i32 %33, %indvars, !dbg !30
  %540 = shufflevector <16 x float> %537, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %541 = shufflevector <16 x float> %537, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %542 = shufflevector <16 x float> %537, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %543 = shufflevector <16 x float> %537, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %544 = shufflevector <16 x float> %537, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %545 = shufflevector <16 x float> %537, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %546 = shufflevector <16 x float> %537, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %547 = shufflevector <16 x float> %537, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %548 = shufflevector <16 x float> %520, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %549 = shufflevector <16 x float> %520, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %550 = shufflevector <16 x float> %520, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %551 = shufflevector <16 x float> %520, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %552 = shufflevector <16 x float> %520, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %553 = shufflevector <16 x float> %520, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %554 = shufflevector <16 x float> %520, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %555 = shufflevector <16 x float> %520, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %539, label %234, label %._crit_edge, !dbg !30

._crit_edge:                                      ; preds = %234, %20
  %.lcssa28 = phi float [ 1.000000e+00, %20 ], [ %381, %234 ]
  %.lcssa26 = phi float [ 0xFFF0000000000000, %20 ], [ %310, %234 ]
  %556 = phi <2 x float> [ zeroinitializer, %20 ], [ %540, %234 ]
  %557 = phi <2 x float> [ zeroinitializer, %20 ], [ %541, %234 ]
  %558 = phi <2 x float> [ zeroinitializer, %20 ], [ %542, %234 ]
  %559 = phi <2 x float> [ zeroinitializer, %20 ], [ %543, %234 ]
  %560 = phi <2 x float> [ zeroinitializer, %20 ], [ %544, %234 ]
  %561 = phi <2 x float> [ zeroinitializer, %20 ], [ %545, %234 ]
  %562 = phi <2 x float> [ zeroinitializer, %20 ], [ %546, %234 ]
  %563 = phi <2 x float> [ zeroinitializer, %20 ], [ %547, %234 ]
  %564 = phi <2 x float> [ zeroinitializer, %20 ], [ %548, %234 ]
  %565 = phi <2 x float> [ zeroinitializer, %20 ], [ %549, %234 ]
  %566 = phi <2 x float> [ zeroinitializer, %20 ], [ %550, %234 ]
  %567 = phi <2 x float> [ zeroinitializer, %20 ], [ %551, %234 ]
  %568 = phi <2 x float> [ zeroinitializer, %20 ], [ %552, %234 ]
  %569 = phi <2 x float> [ zeroinitializer, %20 ], [ %553, %234 ]
  %570 = phi <2 x float> [ zeroinitializer, %20 ], [ %554, %234 ]
  %571 = phi <2 x float> [ zeroinitializer, %20 ], [ %555, %234 ]
  %572 = add i32 %33, 64, !dbg !56
  %.not48 = icmp eq i32 %33, 2147483584, !dbg !58
  %573 = extractelement <2 x float> %556, i64 0, !dbg !58
  %574 = extractelement <2 x float> %556, i64 1, !dbg !58
  %575 = extractelement <2 x float> %557, i64 0, !dbg !58
  %576 = extractelement <2 x float> %557, i64 1, !dbg !58
  %577 = extractelement <2 x float> %558, i64 0, !dbg !58
  %578 = extractelement <2 x float> %558, i64 1, !dbg !58
  %579 = extractelement <2 x float> %559, i64 0, !dbg !58
  %580 = extractelement <2 x float> %559, i64 1, !dbg !58
  %581 = extractelement <2 x float> %560, i64 0, !dbg !58
  %582 = extractelement <2 x float> %560, i64 1, !dbg !58
  %583 = extractelement <2 x float> %561, i64 0, !dbg !58
  %584 = extractelement <2 x float> %561, i64 1, !dbg !58
  %585 = extractelement <2 x float> %562, i64 0, !dbg !58
  %586 = extractelement <2 x float> %562, i64 1, !dbg !58
  %587 = extractelement <2 x float> %563, i64 0, !dbg !58
  %588 = extractelement <2 x float> %563, i64 1, !dbg !58
  %589 = extractelement <2 x float> %564, i64 0, !dbg !58
  %590 = extractelement <2 x float> %564, i64 1, !dbg !58
  %591 = extractelement <2 x float> %565, i64 0, !dbg !58
  %592 = extractelement <2 x float> %565, i64 1, !dbg !58
  %593 = extractelement <2 x float> %566, i64 0, !dbg !58
  %594 = extractelement <2 x float> %566, i64 1, !dbg !58
  %595 = extractelement <2 x float> %567, i64 0, !dbg !58
  %596 = extractelement <2 x float> %567, i64 1, !dbg !58
  %597 = extractelement <2 x float> %568, i64 0, !dbg !58
  %598 = extractelement <2 x float> %568, i64 1, !dbg !58
  %599 = extractelement <2 x float> %569, i64 0, !dbg !58
  %600 = extractelement <2 x float> %569, i64 1, !dbg !58
  %601 = extractelement <2 x float> %570, i64 0, !dbg !58
  %602 = extractelement <2 x float> %570, i64 1, !dbg !58
  %603 = extractelement <2 x float> %571, i64 0, !dbg !58
  %604 = extractelement <2 x float> %571, i64 1, !dbg !58
  br i1 %.not48, label %._crit_edge38, label %.lr.ph37, !dbg !58

.lr.ph37:                                         ; preds = %._crit_edge
  %605 = mul nsw i64 %60, %43
  %invariant.gep42 = getelementptr half, ptr addrspace(1) %59, i64 %605, !dbg !58
  %invariant.gep43 = getelementptr half, ptr addrspace(1) %invariant.gep42, i64 %51, !dbg !58
  %606 = mul nsw i64 %58, %43
  %invariant.gep45 = getelementptr half, ptr addrspace(1) %57, i64 %606, !dbg !58
  %invariant.gep46 = getelementptr half, ptr addrspace(1) %invariant.gep45, i64 %51, !dbg !58
  %607 = shl nuw nsw i32 %61, 6
  %608 = or disjoint i32 %97, %607
  %609 = or disjoint i32 %102, %607
  %610 = or disjoint i32 %106, %607
  %611 = or disjoint i32 %110, %607
  %612 = or disjoint i32 %114, %607
  %613 = or disjoint i32 %118, %607
  %614 = or disjoint i32 %122, %607
  %615 = or disjoint i32 %126, %607
  %616 = getelementptr half, ptr addrspace(3) @global_smem, i32 %608
  %617 = getelementptr half, ptr addrspace(3) @global_smem, i32 %609
  %618 = getelementptr half, ptr addrspace(3) @global_smem, i32 %610
  %619 = getelementptr half, ptr addrspace(3) @global_smem, i32 %611
  %620 = getelementptr half, ptr addrspace(3) @global_smem, i32 %612
  %621 = getelementptr half, ptr addrspace(3) @global_smem, i32 %613
  %622 = getelementptr half, ptr addrspace(3) @global_smem, i32 %614
  %623 = getelementptr half, ptr addrspace(3) @global_smem, i32 %615
  %624 = shl i32 %35, 2
  %625 = xor i32 %624, 128
  %626 = or disjoint i32 %77, %50
  %627 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %626
  %628 = shl nuw nsw i32 %36, 3
  %629 = and i32 %628, 256
  %630 = or disjoint i32 %629, %61
  %631 = or disjoint i32 %630, 64
  %632 = or disjoint i32 %630, 128
  %633 = or disjoint i32 %630, 192
  %634 = or disjoint i32 %630, 512
  %635 = or disjoint i32 %630, 576
  %636 = or disjoint i32 %630, 640
  %637 = or disjoint i32 %630, 704
  %638 = or disjoint i32 %630, 1024
  %639 = or disjoint i32 %630, 1088
  %640 = or disjoint i32 %630, 1152
  %641 = or disjoint i32 %630, 1216
  %642 = or disjoint i32 %630, 1536
  %643 = or disjoint i32 %630, 1600
  %644 = or disjoint i32 %630, 1664
  %645 = or disjoint i32 %630, 1728
  %646 = or disjoint i32 %630, 32
  %647 = or disjoint i32 %630, 96
  %648 = or disjoint i32 %630, 160
  %649 = or disjoint i32 %630, 224
  %650 = or disjoint i32 %630, 544
  %651 = or disjoint i32 %630, 608
  %652 = or disjoint i32 %630, 672
  %653 = or disjoint i32 %630, 736
  %654 = or disjoint i32 %630, 1056
  %655 = or disjoint i32 %630, 1120
  %656 = or disjoint i32 %630, 1184
  %657 = or disjoint i32 %630, 1248
  %658 = or disjoint i32 %630, 1568
  %659 = or disjoint i32 %630, 1632
  %660 = or disjoint i32 %630, 1696
  %661 = or disjoint i32 %630, 1760
  %662 = getelementptr half, ptr addrspace(3) @global_smem, i32 %630
  %663 = getelementptr half, ptr addrspace(3) @global_smem, i32 %631
  %664 = getelementptr half, ptr addrspace(3) @global_smem, i32 %632
  %665 = getelementptr half, ptr addrspace(3) @global_smem, i32 %633
  %666 = getelementptr half, ptr addrspace(3) @global_smem, i32 %634
  %667 = getelementptr half, ptr addrspace(3) @global_smem, i32 %635
  %668 = getelementptr half, ptr addrspace(3) @global_smem, i32 %636
  %669 = getelementptr half, ptr addrspace(3) @global_smem, i32 %637
  %670 = getelementptr half, ptr addrspace(3) @global_smem, i32 %638
  %671 = getelementptr half, ptr addrspace(3) @global_smem, i32 %639
  %672 = getelementptr half, ptr addrspace(3) @global_smem, i32 %640
  %673 = getelementptr half, ptr addrspace(3) @global_smem, i32 %641
  %674 = getelementptr half, ptr addrspace(3) @global_smem, i32 %642
  %675 = getelementptr half, ptr addrspace(3) @global_smem, i32 %643
  %676 = getelementptr half, ptr addrspace(3) @global_smem, i32 %644
  %677 = getelementptr half, ptr addrspace(3) @global_smem, i32 %645
  %678 = getelementptr half, ptr addrspace(3) @global_smem, i32 %646
  %679 = getelementptr half, ptr addrspace(3) @global_smem, i32 %647
  %680 = getelementptr half, ptr addrspace(3) @global_smem, i32 %648
  %681 = getelementptr half, ptr addrspace(3) @global_smem, i32 %649
  %682 = getelementptr half, ptr addrspace(3) @global_smem, i32 %650
  %683 = getelementptr half, ptr addrspace(3) @global_smem, i32 %651
  %684 = getelementptr half, ptr addrspace(3) @global_smem, i32 %652
  %685 = getelementptr half, ptr addrspace(3) @global_smem, i32 %653
  %686 = getelementptr half, ptr addrspace(3) @global_smem, i32 %654
  %687 = getelementptr half, ptr addrspace(3) @global_smem, i32 %655
  %688 = getelementptr half, ptr addrspace(3) @global_smem, i32 %656
  %689 = getelementptr half, ptr addrspace(3) @global_smem, i32 %657
  %690 = getelementptr half, ptr addrspace(3) @global_smem, i32 %658
  %691 = getelementptr half, ptr addrspace(3) @global_smem, i32 %659
  %692 = getelementptr half, ptr addrspace(3) @global_smem, i32 %660
  %693 = getelementptr half, ptr addrspace(3) @global_smem, i32 %661
  br label %694, !dbg !58

694:                                              ; preds = %.lr.ph37, %694
  %695 = phi i64 [ %34, %.lr.ph37 ], [ %1044, %694 ]
  %696 = phi float [ %.lcssa26, %.lr.ph37 ], [ %832, %694 ]
  %697 = phi float [ %.lcssa28, %.lr.ph37 ], [ %887, %694 ]
  %698 = phi <2 x float> [ %556, %.lr.ph37 ], [ %1046, %694 ]
  %699 = phi <2 x float> [ %557, %.lr.ph37 ], [ %1047, %694 ]
  %700 = phi <2 x float> [ %558, %.lr.ph37 ], [ %1048, %694 ]
  %701 = phi <2 x float> [ %559, %.lr.ph37 ], [ %1049, %694 ]
  %702 = phi <2 x float> [ %560, %.lr.ph37 ], [ %1050, %694 ]
  %703 = phi <2 x float> [ %561, %.lr.ph37 ], [ %1051, %694 ]
  %704 = phi <2 x float> [ %562, %.lr.ph37 ], [ %1052, %694 ]
  %705 = phi <2 x float> [ %563, %.lr.ph37 ], [ %1053, %694 ]
  %706 = phi <2 x float> [ %564, %.lr.ph37 ], [ %1054, %694 ]
  %707 = phi <2 x float> [ %565, %.lr.ph37 ], [ %1055, %694 ]
  %708 = phi <2 x float> [ %566, %.lr.ph37 ], [ %1056, %694 ]
  %709 = phi <2 x float> [ %567, %.lr.ph37 ], [ %1057, %694 ]
  %710 = phi <2 x float> [ %568, %.lr.ph37 ], [ %1058, %694 ]
  %711 = phi <2 x float> [ %569, %.lr.ph37 ], [ %1059, %694 ]
  %712 = phi <2 x float> [ %570, %.lr.ph37 ], [ %1060, %694 ]
  %713 = phi <2 x float> [ %571, %.lr.ph37 ], [ %1061, %694 ]
  %indvars57 = trunc i64 %695 to i32
  %714 = mul i64 %695, %60, !dbg !59
  %gep44 = getelementptr half, ptr addrspace(1) %invariant.gep43, i64 %714, !dbg !59
  %unmaskedload4 = load <8 x half>, ptr addrspace(1) %gep44, align 16, !dbg !59
  %715 = mul i64 %695, %58, !dbg !60
  %gep47 = getelementptr half, ptr addrspace(1) %invariant.gep46, i64 %715, !dbg !60
  %unmaskedload5 = load <8 x half>, ptr addrspace(1) %gep47, align 16, !dbg !60
  fence syncscope("workgroup") release, !dbg !59
  tail call void @llvm.amdgcn.s.barrier(), !dbg !59
  fence syncscope("workgroup") acquire, !dbg !59
  %716 = shufflevector <8 x half> %unmaskedload4, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  store <4 x half> %716, ptr addrspace(3) %79, align 8, !dbg !59
  %717 = shufflevector <8 x half> %unmaskedload4, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !59
  store <4 x half> %717, ptr addrspace(3) %86, align 8, !dbg !59
  fence syncscope("workgroup") release, !dbg !59
  tail call void @llvm.amdgcn.s.barrier(), !dbg !59
  fence syncscope("workgroup") acquire, !dbg !59
  %718 = load <4 x half>, ptr addrspace(3) %616, align 8, !dbg !59
  %719 = load <4 x half>, ptr addrspace(3) %617, align 8, !dbg !59
  %720 = load <4 x half>, ptr addrspace(3) %618, align 8, !dbg !59
  %721 = load <4 x half>, ptr addrspace(3) %619, align 8, !dbg !59
  %722 = load <4 x half>, ptr addrspace(3) %620, align 8, !dbg !59
  %723 = load <4 x half>, ptr addrspace(3) %621, align 8, !dbg !59
  %724 = load <4 x half>, ptr addrspace(3) %622, align 8, !dbg !59
  %725 = load <4 x half>, ptr addrspace(3) %623, align 8, !dbg !59
  %726 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %718, <4 x half> %129, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !61
  %727 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %719, <4 x half> %131, <16 x float> %726, i32 0, i32 0, i32 0), !dbg !61
  %728 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %720, <4 x half> %133, <16 x float> %727, i32 0, i32 0, i32 0), !dbg !61
  %729 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %721, <4 x half> %135, <16 x float> %728, i32 0, i32 0, i32 0), !dbg !61
  %730 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %722, <4 x half> %137, <16 x float> %729, i32 0, i32 0, i32 0), !dbg !61
  %731 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %723, <4 x half> %139, <16 x float> %730, i32 0, i32 0, i32 0), !dbg !61
  %732 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %724, <4 x half> %141, <16 x float> %731, i32 0, i32 0, i32 0), !dbg !61
  %733 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %725, <4 x half> %143, <16 x float> %732, i32 0, i32 0, i32 0), !dbg !61
  %734 = extractelement <16 x float> %733, i64 0, !dbg !61
  %735 = extractelement <16 x float> %733, i64 1, !dbg !61
  %736 = extractelement <16 x float> %733, i64 2, !dbg !61
  %737 = extractelement <16 x float> %733, i64 3, !dbg !61
  %738 = extractelement <16 x float> %733, i64 4, !dbg !61
  %739 = extractelement <16 x float> %733, i64 5, !dbg !61
  %740 = extractelement <16 x float> %733, i64 6, !dbg !61
  %741 = extractelement <16 x float> %733, i64 7, !dbg !61
  %742 = extractelement <16 x float> %733, i64 8, !dbg !61
  %743 = extractelement <16 x float> %733, i64 9, !dbg !61
  %744 = extractelement <16 x float> %733, i64 10, !dbg !61
  %745 = extractelement <16 x float> %733, i64 11, !dbg !61
  %746 = extractelement <16 x float> %733, i64 12, !dbg !61
  %747 = extractelement <16 x float> %733, i64 13, !dbg !61
  %748 = extractelement <16 x float> %733, i64 14, !dbg !61
  %749 = extractelement <16 x float> %733, i64 15, !dbg !61
  %750 = or disjoint i32 %38, %indvars57, !dbg !62
  %751 = or disjoint i32 %750, 2, !dbg !62
  %752 = or disjoint i32 %750, 3, !dbg !62
  %753 = or disjoint i32 %65, %indvars57, !dbg !62
  %754 = or disjoint i32 %750, 9, !dbg !62
  %755 = or disjoint i32 %750, 10, !dbg !62
  %756 = or disjoint i32 %750, 11, !dbg !62
  %757 = or disjoint i32 %66, %indvars57, !dbg !62
  %758 = or disjoint i32 %750, 17, !dbg !62
  %759 = or disjoint i32 %750, 18, !dbg !62
  %760 = or disjoint i32 %750, 19, !dbg !62
  %761 = or disjoint i32 %67, %indvars57, !dbg !62
  %762 = or disjoint i32 %750, 25, !dbg !62
  %763 = or disjoint i32 %750, 26, !dbg !62
  %764 = or disjoint i32 %750, 27, !dbg !62
  %.not = icmp slt i32 %68, %750, !dbg !63
  %.not6.not = icmp sgt i32 %68, %750, !dbg !63
  %.not7 = icmp slt i32 %68, %751, !dbg !63
  %.not8 = icmp slt i32 %68, %752, !dbg !63
  %.not9 = icmp slt i32 %68, %753, !dbg !63
  %.not10 = icmp slt i32 %68, %754, !dbg !63
  %.not11 = icmp slt i32 %68, %755, !dbg !63
  %.not12 = icmp slt i32 %68, %756, !dbg !63
  %.not13 = icmp slt i32 %68, %757, !dbg !63
  %.not14 = icmp slt i32 %68, %758, !dbg !63
  %.not15 = icmp slt i32 %68, %759, !dbg !63
  %.not16 = icmp slt i32 %68, %760, !dbg !63
  %.not17 = icmp slt i32 %68, %761, !dbg !63
  %.not18 = icmp slt i32 %68, %762, !dbg !63
  %.not19 = icmp slt i32 %68, %763, !dbg !63
  %.not20 = icmp slt i32 %68, %764, !dbg !63
  %765 = fmul float %69, %734, !dbg !64
  %766 = fmul float %69, %735, !dbg !64
  %767 = fmul float %69, %736, !dbg !64
  %768 = fmul float %69, %737, !dbg !64
  %769 = fmul float %69, %738, !dbg !64
  %770 = fmul float %69, %739, !dbg !64
  %771 = fmul float %69, %740, !dbg !64
  %772 = fmul float %69, %741, !dbg !64
  %773 = fmul float %69, %742, !dbg !64
  %774 = fmul float %69, %743, !dbg !64
  %775 = fmul float %69, %744, !dbg !64
  %776 = fmul float %69, %745, !dbg !64
  %777 = fmul float %69, %746, !dbg !64
  %778 = fmul float %69, %747, !dbg !64
  %779 = fmul float %69, %748, !dbg !64
  %780 = fmul float %69, %749, !dbg !64
  %781 = select i1 %.not, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %782 = select i1 %.not6.not, float 0.000000e+00, float -1.000000e+06, !dbg !65
  %783 = select i1 %.not7, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %784 = select i1 %.not8, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %785 = select i1 %.not9, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %786 = select i1 %.not10, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %787 = select i1 %.not11, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %788 = select i1 %.not12, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %789 = select i1 %.not13, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %790 = select i1 %.not14, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %791 = select i1 %.not15, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %792 = select i1 %.not16, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %793 = select i1 %.not17, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %794 = select i1 %.not18, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %795 = select i1 %.not19, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %796 = select i1 %.not20, float -1.000000e+06, float 0.000000e+00, !dbg !65
  %797 = fadd float %781, %765, !dbg !66
  %798 = fadd float %782, %766, !dbg !66
  %799 = fadd float %783, %767, !dbg !66
  %800 = fadd float %784, %768, !dbg !66
  %801 = fadd float %785, %769, !dbg !66
  %802 = fadd float %786, %770, !dbg !66
  %803 = fadd float %787, %771, !dbg !66
  %804 = fadd float %788, %772, !dbg !66
  %805 = fadd float %789, %773, !dbg !66
  %806 = fadd float %790, %774, !dbg !66
  %807 = fadd float %791, %775, !dbg !66
  %808 = fadd float %792, %776, !dbg !66
  %809 = fadd float %793, %777, !dbg !66
  %810 = fadd float %794, %778, !dbg !66
  %811 = fadd float %795, %779, !dbg !66
  %812 = fadd float %796, %780, !dbg !66
  %813 = tail call float @llvm.maxnum.f32(float %797, float %798), !dbg !67
  %814 = tail call float @llvm.maxnum.f32(float %813, float %799), !dbg !67
  %815 = tail call float @llvm.maxnum.f32(float %814, float %800), !dbg !67
  %816 = tail call float @llvm.maxnum.f32(float %815, float %801), !dbg !67
  %817 = tail call float @llvm.maxnum.f32(float %816, float %802), !dbg !67
  %818 = tail call float @llvm.maxnum.f32(float %817, float %803), !dbg !67
  %819 = tail call float @llvm.maxnum.f32(float %818, float %804), !dbg !67
  %820 = tail call float @llvm.maxnum.f32(float %819, float %805), !dbg !67
  %821 = tail call float @llvm.maxnum.f32(float %820, float %806), !dbg !67
  %822 = tail call float @llvm.maxnum.f32(float %821, float %807), !dbg !67
  %823 = tail call float @llvm.maxnum.f32(float %822, float %808), !dbg !67
  %824 = tail call float @llvm.maxnum.f32(float %823, float %809), !dbg !67
  %825 = tail call float @llvm.maxnum.f32(float %824, float %810), !dbg !67
  %826 = tail call float @llvm.maxnum.f32(float %825, float %811), !dbg !67
  %827 = tail call float @llvm.maxnum.f32(float %826, float %812), !dbg !67
  %828 = bitcast float %827 to i32, !dbg !68
  %829 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %625, i32 %828), !dbg !68
  %830 = bitcast i32 %829 to float, !dbg !68
  %831 = tail call float @llvm.maxnum.f32(float %827, float %830), !dbg !67
  %832 = tail call float @llvm.maxnum.f32(float %696, float %831), !dbg !69
  %833 = fsub float %797, %832, !dbg !70
  %834 = fsub float %798, %832, !dbg !70
  %835 = fsub float %799, %832, !dbg !70
  %836 = fsub float %800, %832, !dbg !70
  %837 = fsub float %801, %832, !dbg !70
  %838 = fsub float %802, %832, !dbg !70
  %839 = fsub float %803, %832, !dbg !70
  %840 = fsub float %804, %832, !dbg !70
  %841 = fsub float %805, %832, !dbg !70
  %842 = fsub float %806, %832, !dbg !70
  %843 = fsub float %807, %832, !dbg !70
  %844 = fsub float %808, %832, !dbg !70
  %845 = fsub float %809, %832, !dbg !70
  %846 = fsub float %810, %832, !dbg !70
  %847 = fsub float %811, %832, !dbg !70
  %848 = fsub float %812, %832, !dbg !70
  %849 = tail call float @llvm.amdgcn.exp2.f32(float %833), !dbg !71
  %850 = tail call float @llvm.amdgcn.exp2.f32(float %834), !dbg !71
  %851 = tail call float @llvm.amdgcn.exp2.f32(float %835), !dbg !71
  %852 = tail call float @llvm.amdgcn.exp2.f32(float %836), !dbg !71
  %853 = tail call float @llvm.amdgcn.exp2.f32(float %837), !dbg !71
  %854 = tail call float @llvm.amdgcn.exp2.f32(float %838), !dbg !71
  %855 = tail call float @llvm.amdgcn.exp2.f32(float %839), !dbg !71
  %856 = tail call float @llvm.amdgcn.exp2.f32(float %840), !dbg !71
  %857 = tail call float @llvm.amdgcn.exp2.f32(float %841), !dbg !71
  %858 = tail call float @llvm.amdgcn.exp2.f32(float %842), !dbg !71
  %859 = tail call float @llvm.amdgcn.exp2.f32(float %843), !dbg !71
  %860 = tail call float @llvm.amdgcn.exp2.f32(float %844), !dbg !71
  %861 = tail call float @llvm.amdgcn.exp2.f32(float %845), !dbg !71
  %862 = tail call float @llvm.amdgcn.exp2.f32(float %846), !dbg !71
  %863 = tail call float @llvm.amdgcn.exp2.f32(float %847), !dbg !71
  %864 = tail call float @llvm.amdgcn.exp2.f32(float %848), !dbg !71
  %865 = fadd float %849, %850, !dbg !72
  %866 = fadd float %851, %865, !dbg !72
  %867 = fadd float %852, %866, !dbg !72
  %868 = fadd float %853, %867, !dbg !72
  %869 = fadd float %854, %868, !dbg !72
  %870 = fadd float %855, %869, !dbg !72
  %871 = fadd float %856, %870, !dbg !72
  %872 = fadd float %857, %871, !dbg !72
  %873 = fadd float %858, %872, !dbg !72
  %874 = fadd float %859, %873, !dbg !72
  %875 = fadd float %860, %874, !dbg !72
  %876 = fadd float %861, %875, !dbg !72
  %877 = fadd float %862, %876, !dbg !72
  %878 = fadd float %863, %877, !dbg !72
  %879 = fadd float %864, %878, !dbg !72
  %880 = bitcast float %879 to i32, !dbg !73
  %881 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %625, i32 %880), !dbg !73
  %882 = bitcast i32 %881 to float, !dbg !73
  %883 = fadd float %879, %882, !dbg !72
  %884 = fsub float %696, %832, !dbg !74
  %885 = tail call float @llvm.amdgcn.exp2.f32(float %884), !dbg !75
  %886 = fmul float %697, %885, !dbg !76
  %887 = fadd float %886, %883, !dbg !77
  %888 = insertelement <2 x float> poison, float %885, i64 0, !dbg !78
  %889 = shufflevector <2 x float> %888, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !78
  %890 = fmul <2 x float> %706, %889, !dbg !78
  %891 = fmul <2 x float> %707, %889, !dbg !78
  %892 = fmul <2 x float> %708, %889, !dbg !78
  %893 = fmul <2 x float> %709, %889, !dbg !78
  %894 = fmul <2 x float> %710, %889, !dbg !78
  %895 = fmul <2 x float> %711, %889, !dbg !78
  %896 = fmul <2 x float> %712, %889, !dbg !78
  %897 = fmul <2 x float> %713, %889, !dbg !78
  %898 = fmul <2 x float> %698, %889, !dbg !78
  %899 = fmul <2 x float> %699, %889, !dbg !78
  %900 = fmul <2 x float> %700, %889, !dbg !78
  %901 = fmul <2 x float> %701, %889, !dbg !78
  %902 = fmul <2 x float> %702, %889, !dbg !78
  %903 = fmul <2 x float> %703, %889, !dbg !78
  %904 = fmul <2 x float> %704, %889, !dbg !78
  %905 = fmul <2 x float> %705, %889, !dbg !78
  %906 = fptrunc float %849 to half, !dbg !79
  %907 = fptrunc float %850 to half, !dbg !79
  %908 = fptrunc float %851 to half, !dbg !79
  %909 = fptrunc float %852 to half, !dbg !79
  %910 = fptrunc float %853 to half, !dbg !79
  %911 = fptrunc float %854 to half, !dbg !79
  %912 = fptrunc float %855 to half, !dbg !79
  %913 = fptrunc float %856 to half, !dbg !79
  %914 = fptrunc float %857 to half, !dbg !79
  %915 = fptrunc float %858 to half, !dbg !79
  %916 = fptrunc float %859 to half, !dbg !79
  %917 = fptrunc float %860 to half, !dbg !79
  %918 = fptrunc float %861 to half, !dbg !79
  %919 = fptrunc float %862 to half, !dbg !79
  %920 = fptrunc float %863 to half, !dbg !79
  %921 = fptrunc float %864 to half, !dbg !79
  fence syncscope("workgroup") release, !dbg !60
  tail call void @llvm.amdgcn.s.barrier(), !dbg !60
  fence syncscope("workgroup") acquire, !dbg !60
  store <8 x half> %unmaskedload5, ptr addrspace(3) %627, align 16, !dbg !60
  fence syncscope("workgroup") release, !dbg !60
  tail call void @llvm.amdgcn.s.barrier(), !dbg !60
  fence syncscope("workgroup") acquire, !dbg !60
  %922 = load <1 x half>, ptr addrspace(3) %662, align 2, !dbg !60
  %923 = load <1 x half>, ptr addrspace(3) %663, align 2, !dbg !60
  %924 = load <1 x half>, ptr addrspace(3) %664, align 2, !dbg !60
  %925 = shufflevector <1 x half> %924, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %926 = load <1 x half>, ptr addrspace(3) %665, align 2, !dbg !60
  %927 = shufflevector <1 x half> %926, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %928 = load <1 x half>, ptr addrspace(3) %666, align 2, !dbg !60
  %929 = load <1 x half>, ptr addrspace(3) %667, align 2, !dbg !60
  %930 = load <1 x half>, ptr addrspace(3) %668, align 2, !dbg !60
  %931 = shufflevector <1 x half> %930, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %932 = load <1 x half>, ptr addrspace(3) %669, align 2, !dbg !60
  %933 = shufflevector <1 x half> %932, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %934 = load <1 x half>, ptr addrspace(3) %670, align 2, !dbg !60
  %935 = load <1 x half>, ptr addrspace(3) %671, align 2, !dbg !60
  %936 = load <1 x half>, ptr addrspace(3) %672, align 2, !dbg !60
  %937 = shufflevector <1 x half> %936, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %938 = load <1 x half>, ptr addrspace(3) %673, align 2, !dbg !60
  %939 = shufflevector <1 x half> %938, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %940 = load <1 x half>, ptr addrspace(3) %674, align 2, !dbg !60
  %941 = load <1 x half>, ptr addrspace(3) %675, align 2, !dbg !60
  %942 = load <1 x half>, ptr addrspace(3) %676, align 2, !dbg !60
  %943 = shufflevector <1 x half> %942, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %944 = load <1 x half>, ptr addrspace(3) %677, align 2, !dbg !60
  %945 = shufflevector <1 x half> %944, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %946 = load <1 x half>, ptr addrspace(3) %678, align 2, !dbg !60
  %947 = load <1 x half>, ptr addrspace(3) %679, align 2, !dbg !60
  %948 = load <1 x half>, ptr addrspace(3) %680, align 2, !dbg !60
  %949 = shufflevector <1 x half> %948, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %950 = load <1 x half>, ptr addrspace(3) %681, align 2, !dbg !60
  %951 = shufflevector <1 x half> %950, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %952 = load <1 x half>, ptr addrspace(3) %682, align 2, !dbg !60
  %953 = load <1 x half>, ptr addrspace(3) %683, align 2, !dbg !60
  %954 = load <1 x half>, ptr addrspace(3) %684, align 2, !dbg !60
  %955 = shufflevector <1 x half> %954, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %956 = load <1 x half>, ptr addrspace(3) %685, align 2, !dbg !60
  %957 = shufflevector <1 x half> %956, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %958 = load <1 x half>, ptr addrspace(3) %686, align 2, !dbg !60
  %959 = load <1 x half>, ptr addrspace(3) %687, align 2, !dbg !60
  %960 = load <1 x half>, ptr addrspace(3) %688, align 2, !dbg !60
  %961 = shufflevector <1 x half> %960, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %962 = load <1 x half>, ptr addrspace(3) %689, align 2, !dbg !60
  %963 = shufflevector <1 x half> %962, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %964 = load <1 x half>, ptr addrspace(3) %690, align 2, !dbg !60
  %965 = load <1 x half>, ptr addrspace(3) %691, align 2, !dbg !60
  %966 = load <1 x half>, ptr addrspace(3) %692, align 2, !dbg !60
  %967 = shufflevector <1 x half> %966, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %968 = load <1 x half>, ptr addrspace(3) %693, align 2, !dbg !60
  %969 = shufflevector <1 x half> %968, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %970 = insertelement <4 x half> poison, half %906, i64 0, !dbg !80
  %971 = insertelement <4 x half> %970, half %907, i64 1, !dbg !80
  %972 = insertelement <4 x half> %971, half %908, i64 2, !dbg !80
  %973 = insertelement <4 x half> %972, half %909, i64 3, !dbg !80
  %974 = insertelement <4 x half> poison, half %910, i64 0, !dbg !80
  %975 = insertelement <4 x half> %974, half %911, i64 1, !dbg !80
  %976 = insertelement <4 x half> %975, half %912, i64 2, !dbg !80
  %977 = insertelement <4 x half> %976, half %913, i64 3, !dbg !80
  %978 = insertelement <4 x half> poison, half %914, i64 0, !dbg !80
  %979 = insertelement <4 x half> %978, half %915, i64 1, !dbg !80
  %980 = insertelement <4 x half> %979, half %916, i64 2, !dbg !80
  %981 = insertelement <4 x half> %980, half %917, i64 3, !dbg !80
  %982 = insertelement <4 x half> poison, half %918, i64 0, !dbg !80
  %983 = insertelement <4 x half> %982, half %919, i64 1, !dbg !80
  %984 = insertelement <4 x half> %983, half %920, i64 2, !dbg !80
  %985 = insertelement <4 x half> %984, half %921, i64 3, !dbg !80
  %986 = shufflevector <1 x half> %922, <1 x half> %923, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %987 = shufflevector <4 x half> %986, <4 x half> %925, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %988 = shufflevector <4 x half> %987, <4 x half> %927, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %989 = shufflevector <1 x half> %928, <1 x half> %929, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %990 = shufflevector <4 x half> %989, <4 x half> %931, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %991 = shufflevector <4 x half> %990, <4 x half> %933, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %992 = shufflevector <1 x half> %934, <1 x half> %935, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %993 = shufflevector <4 x half> %992, <4 x half> %937, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %994 = shufflevector <4 x half> %993, <4 x half> %939, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %995 = shufflevector <1 x half> %940, <1 x half> %941, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %996 = shufflevector <4 x half> %995, <4 x half> %943, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %997 = shufflevector <4 x half> %996, <4 x half> %945, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %998 = shufflevector <1 x half> %946, <1 x half> %947, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %999 = shufflevector <4 x half> %998, <4 x half> %949, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1000 = shufflevector <4 x half> %999, <4 x half> %951, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1001 = shufflevector <1 x half> %952, <1 x half> %953, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1002 = shufflevector <4 x half> %1001, <4 x half> %955, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1003 = shufflevector <4 x half> %1002, <4 x half> %957, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1004 = shufflevector <1 x half> %958, <1 x half> %959, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1005 = shufflevector <4 x half> %1004, <4 x half> %961, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1006 = shufflevector <4 x half> %1005, <4 x half> %963, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1007 = shufflevector <1 x half> %964, <1 x half> %965, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !80
  %1008 = shufflevector <4 x half> %1007, <4 x half> %967, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !80
  %1009 = shufflevector <4 x half> %1008, <4 x half> %969, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !80
  %1010 = shufflevector <2 x float> %890, <2 x float> %891, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1011 = shufflevector <2 x float> %892, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1012 = shufflevector <16 x float> %1010, <16 x float> %1011, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1013 = shufflevector <2 x float> %893, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1014 = shufflevector <16 x float> %1012, <16 x float> %1013, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1015 = shufflevector <2 x float> %894, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1016 = shufflevector <16 x float> %1014, <16 x float> %1015, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1017 = shufflevector <2 x float> %895, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1018 = shufflevector <16 x float> %1016, <16 x float> %1017, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1019 = shufflevector <2 x float> %896, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1020 = shufflevector <16 x float> %1018, <16 x float> %1019, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !80
  %1021 = shufflevector <2 x float> %897, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1022 = shufflevector <16 x float> %1020, <16 x float> %1021, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !80
  %1023 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %988, <4 x half> %973, <16 x float> %1022, i32 0, i32 0, i32 0), !dbg !80
  %1024 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %991, <4 x half> %977, <16 x float> %1023, i32 0, i32 0, i32 0), !dbg !80
  %1025 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %994, <4 x half> %981, <16 x float> %1024, i32 0, i32 0, i32 0), !dbg !80
  %1026 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %997, <4 x half> %985, <16 x float> %1025, i32 0, i32 0, i32 0), !dbg !80
  %1027 = shufflevector <2 x float> %898, <2 x float> %899, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1028 = shufflevector <2 x float> %900, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1029 = shufflevector <16 x float> %1027, <16 x float> %1028, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1030 = shufflevector <2 x float> %901, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1031 = shufflevector <16 x float> %1029, <16 x float> %1030, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1032 = shufflevector <2 x float> %902, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1033 = shufflevector <16 x float> %1031, <16 x float> %1032, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1034 = shufflevector <2 x float> %903, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1035 = shufflevector <16 x float> %1033, <16 x float> %1034, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1036 = shufflevector <2 x float> %904, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1037 = shufflevector <16 x float> %1035, <16 x float> %1036, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !80
  %1038 = shufflevector <2 x float> %905, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %1039 = shufflevector <16 x float> %1037, <16 x float> %1038, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !80
  %1040 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1000, <4 x half> %973, <16 x float> %1039, i32 0, i32 0, i32 0), !dbg !80
  %1041 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1003, <4 x half> %977, <16 x float> %1040, i32 0, i32 0, i32 0), !dbg !80
  %1042 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1006, <4 x half> %981, <16 x float> %1041, i32 0, i32 0, i32 0), !dbg !80
  %1043 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1009, <4 x half> %985, <16 x float> %1042, i32 0, i32 0, i32 0), !dbg !80
  %1044 = add nsw i64 %695, 32, !dbg !81
  %indvars56 = trunc i64 %1044 to i32, !dbg !58
  %1045 = icmp sgt i32 %572, %indvars56, !dbg !58
  %1046 = shufflevector <16 x float> %1043, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1047 = shufflevector <16 x float> %1043, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1048 = shufflevector <16 x float> %1043, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1049 = shufflevector <16 x float> %1043, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1050 = shufflevector <16 x float> %1043, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1051 = shufflevector <16 x float> %1043, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1052 = shufflevector <16 x float> %1043, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1053 = shufflevector <16 x float> %1043, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  %1054 = shufflevector <16 x float> %1026, <16 x float> poison, <2 x i32> <i32 0, i32 1>
  %1055 = shufflevector <16 x float> %1026, <16 x float> poison, <2 x i32> <i32 2, i32 3>
  %1056 = shufflevector <16 x float> %1026, <16 x float> poison, <2 x i32> <i32 4, i32 5>
  %1057 = shufflevector <16 x float> %1026, <16 x float> poison, <2 x i32> <i32 6, i32 7>
  %1058 = shufflevector <16 x float> %1026, <16 x float> poison, <2 x i32> <i32 8, i32 9>
  %1059 = shufflevector <16 x float> %1026, <16 x float> poison, <2 x i32> <i32 10, i32 11>
  %1060 = shufflevector <16 x float> %1026, <16 x float> poison, <2 x i32> <i32 12, i32 13>
  %1061 = shufflevector <16 x float> %1026, <16 x float> poison, <2 x i32> <i32 14, i32 15>
  br i1 %1045, label %694, label %._crit_edge38.loopexit, !dbg !58

._crit_edge38.loopexit:                           ; preds = %694
  %1062 = extractelement <16 x float> %1043, i64 15, !dbg !80
  %1063 = extractelement <16 x float> %1043, i64 14, !dbg !80
  %1064 = extractelement <16 x float> %1043, i64 13, !dbg !80
  %1065 = extractelement <16 x float> %1043, i64 12, !dbg !80
  %1066 = extractelement <16 x float> %1043, i64 11, !dbg !80
  %1067 = extractelement <16 x float> %1043, i64 10, !dbg !80
  %1068 = extractelement <16 x float> %1043, i64 9, !dbg !80
  %1069 = extractelement <16 x float> %1043, i64 8, !dbg !80
  %1070 = extractelement <16 x float> %1043, i64 7, !dbg !80
  %1071 = extractelement <16 x float> %1043, i64 6, !dbg !80
  %1072 = extractelement <16 x float> %1043, i64 5, !dbg !80
  %1073 = extractelement <16 x float> %1043, i64 4, !dbg !80
  %1074 = extractelement <16 x float> %1043, i64 3, !dbg !80
  %1075 = extractelement <16 x float> %1043, i64 2, !dbg !80
  %1076 = extractelement <16 x float> %1043, i64 1, !dbg !80
  %1077 = extractelement <16 x float> %1043, i64 0, !dbg !80
  %1078 = extractelement <16 x float> %1026, i64 15, !dbg !80
  %1079 = extractelement <16 x float> %1026, i64 14, !dbg !80
  %1080 = extractelement <16 x float> %1026, i64 13, !dbg !80
  %1081 = extractelement <16 x float> %1026, i64 12, !dbg !80
  %1082 = extractelement <16 x float> %1026, i64 11, !dbg !80
  %1083 = extractelement <16 x float> %1026, i64 10, !dbg !80
  %1084 = extractelement <16 x float> %1026, i64 9, !dbg !80
  %1085 = extractelement <16 x float> %1026, i64 8, !dbg !80
  %1086 = extractelement <16 x float> %1026, i64 7, !dbg !80
  %1087 = extractelement <16 x float> %1026, i64 6, !dbg !80
  %1088 = extractelement <16 x float> %1026, i64 5, !dbg !80
  %1089 = extractelement <16 x float> %1026, i64 4, !dbg !80
  %1090 = extractelement <16 x float> %1026, i64 3, !dbg !80
  %1091 = extractelement <16 x float> %1026, i64 2, !dbg !80
  %1092 = extractelement <16 x float> %1026, i64 1, !dbg !80
  %1093 = extractelement <16 x float> %1026, i64 0, !dbg !80
  br label %._crit_edge38, !dbg !22

._crit_edge38:                                    ; preds = %._crit_edge38.loopexit, %._crit_edge
  %.lcssa25 = phi float [ %.lcssa28, %._crit_edge ], [ %887, %._crit_edge38.loopexit ], !dbg !32
  %1094 = phi float [ %589, %._crit_edge ], [ %1093, %._crit_edge38.loopexit ], !dbg !32
  %1095 = phi float [ %590, %._crit_edge ], [ %1092, %._crit_edge38.loopexit ], !dbg !32
  %1096 = phi float [ %591, %._crit_edge ], [ %1091, %._crit_edge38.loopexit ], !dbg !32
  %1097 = phi float [ %592, %._crit_edge ], [ %1090, %._crit_edge38.loopexit ], !dbg !32
  %1098 = phi float [ %593, %._crit_edge ], [ %1089, %._crit_edge38.loopexit ], !dbg !32
  %1099 = phi float [ %594, %._crit_edge ], [ %1088, %._crit_edge38.loopexit ], !dbg !32
  %1100 = phi float [ %595, %._crit_edge ], [ %1087, %._crit_edge38.loopexit ], !dbg !32
  %1101 = phi float [ %596, %._crit_edge ], [ %1086, %._crit_edge38.loopexit ], !dbg !32
  %1102 = phi float [ %597, %._crit_edge ], [ %1085, %._crit_edge38.loopexit ], !dbg !32
  %1103 = phi float [ %598, %._crit_edge ], [ %1084, %._crit_edge38.loopexit ], !dbg !32
  %1104 = phi float [ %599, %._crit_edge ], [ %1083, %._crit_edge38.loopexit ], !dbg !32
  %1105 = phi float [ %600, %._crit_edge ], [ %1082, %._crit_edge38.loopexit ], !dbg !32
  %1106 = phi float [ %601, %._crit_edge ], [ %1081, %._crit_edge38.loopexit ], !dbg !32
  %1107 = phi float [ %602, %._crit_edge ], [ %1080, %._crit_edge38.loopexit ], !dbg !32
  %1108 = phi float [ %603, %._crit_edge ], [ %1079, %._crit_edge38.loopexit ], !dbg !32
  %1109 = phi float [ %604, %._crit_edge ], [ %1078, %._crit_edge38.loopexit ], !dbg !32
  %1110 = phi float [ %573, %._crit_edge ], [ %1077, %._crit_edge38.loopexit ], !dbg !32
  %1111 = phi float [ %574, %._crit_edge ], [ %1076, %._crit_edge38.loopexit ], !dbg !32
  %1112 = phi float [ %575, %._crit_edge ], [ %1075, %._crit_edge38.loopexit ], !dbg !32
  %1113 = phi float [ %576, %._crit_edge ], [ %1074, %._crit_edge38.loopexit ], !dbg !32
  %1114 = phi float [ %577, %._crit_edge ], [ %1073, %._crit_edge38.loopexit ], !dbg !32
  %1115 = phi float [ %578, %._crit_edge ], [ %1072, %._crit_edge38.loopexit ], !dbg !32
  %1116 = phi float [ %579, %._crit_edge ], [ %1071, %._crit_edge38.loopexit ], !dbg !32
  %1117 = phi float [ %580, %._crit_edge ], [ %1070, %._crit_edge38.loopexit ], !dbg !32
  %1118 = phi float [ %581, %._crit_edge ], [ %1069, %._crit_edge38.loopexit ], !dbg !32
  %1119 = phi float [ %582, %._crit_edge ], [ %1068, %._crit_edge38.loopexit ], !dbg !32
  %1120 = phi float [ %583, %._crit_edge ], [ %1067, %._crit_edge38.loopexit ], !dbg !32
  %1121 = phi float [ %584, %._crit_edge ], [ %1066, %._crit_edge38.loopexit ], !dbg !32
  %1122 = phi float [ %585, %._crit_edge ], [ %1065, %._crit_edge38.loopexit ], !dbg !32
  %1123 = phi float [ %586, %._crit_edge ], [ %1064, %._crit_edge38.loopexit ], !dbg !32
  %1124 = phi float [ %587, %._crit_edge ], [ %1063, %._crit_edge38.loopexit ], !dbg !32
  %1125 = phi float [ %588, %._crit_edge ], [ %1062, %._crit_edge38.loopexit ], !dbg !32
  %.lcssa = phi float [ %.lcssa26, %._crit_edge ], [ %832, %._crit_edge38.loopexit ], !dbg !32
  %1126 = or disjoint i32 %38, 56, !dbg !22
  %1127 = zext nneg i32 %1126 to i64, !dbg !23
  %1128 = or disjoint i32 %38, 48, !dbg !22
  %1129 = zext nneg i32 %1128 to i64, !dbg !23
  %1130 = or disjoint i32 %38, 40, !dbg !22
  %1131 = zext nneg i32 %1130 to i64, !dbg !23
  %1132 = or disjoint i32 %38, 32, !dbg !22
  %1133 = zext nneg i32 %1132 to i64, !dbg !23
  %1134 = zext nneg i32 %67 to i64, !dbg !23
  %1135 = zext nneg i32 %66 to i64, !dbg !23
  %1136 = zext nneg i32 %65 to i64, !dbg !23
  %1137 = zext nneg i32 %38 to i64, !dbg !23
  %1138 = zext nneg i32 %64 to i64, !dbg !23
  %1139 = sext i32 %17 to i64, !dbg !82
  %1140 = getelementptr half, ptr addrspace(1) %5, i64 %30, !dbg !83
  %1141 = tail call noundef float @llvm.log2.f32(float %.lcssa25), !dbg !84
  %1142 = fadd float %1141, %.lcssa, !dbg !85
  %1143 = fdiv float %1094, %.lcssa25, !dbg !86
  %1144 = fdiv float %1095, %.lcssa25, !dbg !86
  %1145 = fdiv float %1096, %.lcssa25, !dbg !86
  %1146 = fdiv float %1097, %.lcssa25, !dbg !86
  %1147 = fdiv float %1098, %.lcssa25, !dbg !86
  %1148 = fdiv float %1099, %.lcssa25, !dbg !86
  %1149 = fdiv float %1100, %.lcssa25, !dbg !86
  %1150 = fdiv float %1101, %.lcssa25, !dbg !86
  %1151 = fdiv float %1102, %.lcssa25, !dbg !86
  %1152 = fdiv float %1103, %.lcssa25, !dbg !86
  %1153 = fdiv float %1104, %.lcssa25, !dbg !86
  %1154 = fdiv float %1105, %.lcssa25, !dbg !86
  %1155 = fdiv float %1106, %.lcssa25, !dbg !86
  %1156 = fdiv float %1107, %.lcssa25, !dbg !86
  %1157 = fdiv float %1108, %.lcssa25, !dbg !86
  %1158 = fdiv float %1109, %.lcssa25, !dbg !86
  %1159 = fdiv float %1110, %.lcssa25, !dbg !86
  %1160 = fdiv float %1111, %.lcssa25, !dbg !86
  %1161 = fdiv float %1112, %.lcssa25, !dbg !86
  %1162 = fdiv float %1113, %.lcssa25, !dbg !86
  %1163 = fdiv float %1114, %.lcssa25, !dbg !86
  %1164 = fdiv float %1115, %.lcssa25, !dbg !86
  %1165 = fdiv float %1116, %.lcssa25, !dbg !86
  %1166 = fdiv float %1117, %.lcssa25, !dbg !86
  %1167 = fdiv float %1118, %.lcssa25, !dbg !86
  %1168 = fdiv float %1119, %.lcssa25, !dbg !86
  %1169 = fdiv float %1120, %.lcssa25, !dbg !86
  %1170 = fdiv float %1121, %.lcssa25, !dbg !86
  %1171 = fdiv float %1122, %.lcssa25, !dbg !86
  %1172 = fdiv float %1123, %.lcssa25, !dbg !86
  %1173 = fdiv float %1124, %.lcssa25, !dbg !86
  %1174 = fdiv float %1125, %.lcssa25, !dbg !86
  %1175 = mul i32 %19, %21, !dbg !87
  %1176 = sext i32 %1175 to i64, !dbg !88
  %1177 = getelementptr float, ptr addrspace(1) %4, i64 %1176, !dbg !88
  %1178 = getelementptr float, ptr addrspace(1) %1177, i64 %34, !dbg !89
  fence syncscope("workgroup") release, !dbg !90
  tail call void @llvm.amdgcn.s.barrier(), !dbg !90
  fence syncscope("workgroup") acquire, !dbg !90
  %1179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !90
  %1180 = insertelement <1 x float> poison, float %1142, i64 0, !dbg !90
  store <1 x float> %1180, ptr addrspace(3) %1179, align 4, !dbg !90
  fence syncscope("workgroup") release, !dbg !90
  tail call void @llvm.amdgcn.s.barrier(), !dbg !90
  fence syncscope("workgroup") acquire, !dbg !90
  %1181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %36, !dbg !90
  %1182 = load <1 x float>, ptr addrspace(3) %1181, align 4, !dbg !90
  %1183 = zext nneg i32 %36 to i64, !dbg !90
  %1184 = getelementptr float, ptr addrspace(1) %1178, i64 %1183, !dbg !90
  %urem = and i32 %35, 192, !dbg !90
  %1185 = icmp eq i32 %urem, 0, !dbg !90
  %1186 = insertelement <1 x i1> poison, i1 %1185, i64 0, !dbg !90
  tail call void @llvm.masked.store.v1f32.p1(<1 x float> %1182, ptr addrspace(1) %1184, i32 16, <1 x i1> %1186), !dbg !90
  %1187 = fptrunc float %1143 to half, !dbg !91
  %1188 = fptrunc float %1144 to half, !dbg !91
  %1189 = fptrunc float %1145 to half, !dbg !91
  %1190 = fptrunc float %1146 to half, !dbg !91
  %1191 = fptrunc float %1147 to half, !dbg !91
  %1192 = fptrunc float %1148 to half, !dbg !91
  %1193 = fptrunc float %1149 to half, !dbg !91
  %1194 = fptrunc float %1150 to half, !dbg !91
  %1195 = fptrunc float %1151 to half, !dbg !91
  %1196 = fptrunc float %1152 to half, !dbg !91
  %1197 = fptrunc float %1153 to half, !dbg !91
  %1198 = fptrunc float %1154 to half, !dbg !91
  %1199 = fptrunc float %1155 to half, !dbg !91
  %1200 = fptrunc float %1156 to half, !dbg !91
  %1201 = fptrunc float %1157 to half, !dbg !91
  %1202 = fptrunc float %1158 to half, !dbg !91
  %1203 = fptrunc float %1159 to half, !dbg !91
  %1204 = fptrunc float %1160 to half, !dbg !91
  %1205 = fptrunc float %1161 to half, !dbg !91
  %1206 = fptrunc float %1162 to half, !dbg !91
  %1207 = fptrunc float %1163 to half, !dbg !91
  %1208 = fptrunc float %1164 to half, !dbg !91
  %1209 = fptrunc float %1165 to half, !dbg !91
  %1210 = fptrunc float %1166 to half, !dbg !91
  %1211 = fptrunc float %1167 to half, !dbg !91
  %1212 = fptrunc float %1168 to half, !dbg !91
  %1213 = fptrunc float %1169 to half, !dbg !91
  %1214 = fptrunc float %1170 to half, !dbg !91
  %1215 = fptrunc float %1171 to half, !dbg !91
  %1216 = fptrunc float %1172 to half, !dbg !91
  %1217 = fptrunc float %1173 to half, !dbg !91
  %1218 = fptrunc float %1174 to half, !dbg !91
  %1219 = mul nsw i64 %1139, %34, !dbg !92
  %1220 = mul nsw i64 %1139, %1138, !dbg !92
  %1221 = getelementptr half, ptr addrspace(1) %1140, i64 %1219, !dbg !92
  %1222 = getelementptr half, ptr addrspace(1) %1221, i64 %1220, !dbg !92
  %1223 = getelementptr half, ptr addrspace(1) %1222, i64 %1137, !dbg !92
  %1224 = getelementptr half, ptr addrspace(1) %1222, i64 %1136, !dbg !92
  %1225 = getelementptr half, ptr addrspace(1) %1222, i64 %1135, !dbg !92
  %1226 = getelementptr half, ptr addrspace(1) %1222, i64 %1134, !dbg !92
  %1227 = getelementptr half, ptr addrspace(1) %1222, i64 %1133, !dbg !92
  %1228 = getelementptr half, ptr addrspace(1) %1222, i64 %1131, !dbg !92
  %1229 = getelementptr half, ptr addrspace(1) %1222, i64 %1129, !dbg !92
  %1230 = getelementptr half, ptr addrspace(1) %1222, i64 %1127, !dbg !92
  %1231 = and i32 %35, 128, !dbg !92
  %1232 = icmp eq i32 %1231, 0, !dbg !92
  %1233 = insertelement <4 x half> poison, half %1187, i64 0, !dbg !92
  %1234 = insertelement <4 x half> %1233, half %1188, i64 1, !dbg !92
  %1235 = insertelement <4 x half> %1234, half %1189, i64 2, !dbg !92
  %1236 = insertelement <4 x half> %1235, half %1190, i64 3, !dbg !92
  %1237 = insertelement <4 x i1> poison, i1 %1232, i64 0, !dbg !92
  %1238 = shufflevector <4 x i1> %1237, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !92
  tail call void @llvm.masked.store.v4f16.p1(<4 x half> %1236, ptr addrspace(1) %1223, i32 16, <4 x i1> %1238), !dbg !92
  %1239 = insertelement <4 x half> poison, half %1191, i64 0, !dbg !92
  %1240 = insertelement <4 x half> %1239, half %1192, i64 1, !dbg !92
  %1241 = insertelement <4 x half> %1240, half %1193, i64 2, !dbg !92
  %1242 = insertelement <4 x half> %1241, half %1194, i64 3, !dbg !92
  tail call void @llvm.masked.store.v4f16.p1(<4 x half> %1242, ptr addrspace(1) %1224, i32 16, <4 x i1> %1238), !dbg !92
  %1243 = insertelement <4 x half> poison, half %1195, i64 0, !dbg !92
  %1244 = insertelement <4 x half> %1243, half %1196, i64 1, !dbg !92
  %1245 = insertelement <4 x half> %1244, half %1197, i64 2, !dbg !92
  %1246 = insertelement <4 x half> %1245, half %1198, i64 3, !dbg !92
  tail call void @llvm.masked.store.v4f16.p1(<4 x half> %1246, ptr addrspace(1) %1225, i32 16, <4 x i1> %1238), !dbg !92
  %1247 = insertelement <4 x half> poison, half %1199, i64 0, !dbg !92
  %1248 = insertelement <4 x half> %1247, half %1200, i64 1, !dbg !92
  %1249 = insertelement <4 x half> %1248, half %1201, i64 2, !dbg !92
  %1250 = insertelement <4 x half> %1249, half %1202, i64 3, !dbg !92
  tail call void @llvm.masked.store.v4f16.p1(<4 x half> %1250, ptr addrspace(1) %1226, i32 16, <4 x i1> %1238), !dbg !92
  %1251 = insertelement <4 x half> poison, half %1203, i64 0, !dbg !92
  %1252 = insertelement <4 x half> %1251, half %1204, i64 1, !dbg !92
  %1253 = insertelement <4 x half> %1252, half %1205, i64 2, !dbg !92
  %1254 = insertelement <4 x half> %1253, half %1206, i64 3, !dbg !92
  tail call void @llvm.masked.store.v4f16.p1(<4 x half> %1254, ptr addrspace(1) %1227, i32 16, <4 x i1> %1238), !dbg !92
  %1255 = insertelement <4 x half> poison, half %1207, i64 0, !dbg !92
  %1256 = insertelement <4 x half> %1255, half %1208, i64 1, !dbg !92
  %1257 = insertelement <4 x half> %1256, half %1209, i64 2, !dbg !92
  %1258 = insertelement <4 x half> %1257, half %1210, i64 3, !dbg !92
  tail call void @llvm.masked.store.v4f16.p1(<4 x half> %1258, ptr addrspace(1) %1228, i32 16, <4 x i1> %1238), !dbg !92
  %1259 = insertelement <4 x half> poison, half %1211, i64 0, !dbg !92
  %1260 = insertelement <4 x half> %1259, half %1212, i64 1, !dbg !92
  %1261 = insertelement <4 x half> %1260, half %1213, i64 2, !dbg !92
  %1262 = insertelement <4 x half> %1261, half %1214, i64 3, !dbg !92
  tail call void @llvm.masked.store.v4f16.p1(<4 x half> %1262, ptr addrspace(1) %1229, i32 16, <4 x i1> %1238), !dbg !92
  %1263 = insertelement <4 x half> poison, half %1215, i64 0, !dbg !92
  %1264 = insertelement <4 x half> %1263, half %1216, i64 1, !dbg !92
  %1265 = insertelement <4 x half> %1264, half %1217, i64 2, !dbg !92
  %1266 = insertelement <4 x half> %1265, half %1218, i64 3, !dbg !92
  tail call void @llvm.masked.store.v4f16.p1(<4 x half> %1266, ptr addrspace(1) %1230, i32 16, <4 x i1> %1238), !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half>, <4 x half>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.log2.f32(float) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.masked.store.v4f16.p1(<4 x half>, ptr addrspace(1) nocapture, i32 immarg, <4 x i1>) #5

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.masked.store.v1f32.p1(<1 x float>, ptr addrspace(1) nocapture, i32 immarg, <1 x i1>) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-agpr" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="3" "denormal-fp-math-f32"="preserve-sign" "uniform-work-group-size"="false" }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 8, !"PIC Level", i32 0}
!4 = distinct !DICompileUnit(language: DW_LANG_C, file: !5, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!5 = !DIFile(filename: "06-fused-attention.py", directory: "/triton/python/tutorials")
!6 = !DISubprogram(name: "llvm.amdgcn.exp2.f32", linkageName: "llvm.amdgcn.exp2.f32", scope: !5, file: !5, line: 173, type: !7, scopeLine: 173, spFlags: DISPFlagOptimized)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = distinct !DISubprogram(name: "_attn_fwd", linkageName: "_attn_fwd", scope: !5, file: !5, line: 102, type: !7, scopeLine: 102, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4)
!10 = !DILocation(line: 115, column: 27, scope: !9)
!11 = !DILocation(line: 116, column: 22, scope: !9)
!12 = !DILocation(line: 118, column: 26, scope: !9)
!13 = !DILocation(line: 118, column: 38, scope: !9)
!14 = !DILocation(line: 117, column: 21, scope: !9)
!15 = !DILocation(line: 118, column: 59, scope: !9)
!16 = !DILocation(line: 118, column: 71, scope: !9)
!17 = !DILocation(line: 118, column: 50, scope: !9)
!18 = !DILocation(line: 122, column: 17, scope: !9)
!19 = !DILocation(line: 114, column: 28, scope: !9)
!20 = !DILocation(line: 125, column: 27, scope: !9)
!21 = !DILocation(line: 127, column: 8, scope: !9)
!22 = !DILocation(line: 155, column: 46, scope: !9)
!23 = !DILocation(line: 165, column: 16, scope: !9)
!24 = !DILocation(line: 131, column: 17, scope: !9)
!25 = !DILocation(line: 136, column: 8, scope: !9)
!26 = !DILocation(line: 139, column: 17, scope: !9)
!27 = !DILocation(line: 144, column: 8, scope: !9)
!28 = !DILocation(line: 155, column: 33, scope: !9)
!29 = !DILocation(line: 163, column: 16, scope: !9)
!30 = !DILocation(line: 46, column: 33, scope: !31, inlinedAt: !32)
!31 = distinct !DILexicalBlockFile(scope: !9, file: !5, discriminator: 0)
!32 = !DILocation(line: 173, column: 74, scope: !9)
!33 = !DILocation(line: 49, column: 20, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 67, column: 20, scope: !31, inlinedAt: !32)
!35 = !DILocation(line: 50, column: 23, scope: !31, inlinedAt: !32)
!36 = !DILocation(line: 163, column: 27, scope: !37, inlinedAt: !32)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/triton/python/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !31, file: !38, discriminator: 0)
!40 = !DILocation(line: 184, column: 40, scope: !39, inlinedAt: !32)
!41 = !DILocation(line: 57, column: 51, scope: !31, inlinedAt: !32)
!42 = !DILocation(line: 57, column: 35, scope: !31, inlinedAt: !32)
!43 = !DILocation(line: 58, column: 22, scope: !31, inlinedAt: !32)
!44 = !DILocation(line: 58, column: 33, scope: !31, inlinedAt: !32)
!45 = !DILocation(line: 59, column: 25, scope: !31, inlinedAt: !32)
!46 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !32)
!47 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !32)
!48 = !DILocation(line: 62, column: 35, scope: !31, inlinedAt: !32)
!49 = !DILocation(line: 62, column: 29, scope: !31, inlinedAt: !32)
!50 = !DILocation(line: 63, column: 20, scope: !31, inlinedAt: !32)
!51 = !DILocation(line: 63, column: 28, scope: !31, inlinedAt: !32)
!52 = !DILocation(line: 65, column: 20, scope: !31, inlinedAt: !32)
!53 = !DILocation(line: 71, column: 21, scope: !31, inlinedAt: !32)
!54 = !DILocation(line: 72, column: 27, scope: !31, inlinedAt: !32)
!55 = !DILocation(line: 76, column: 46, scope: !31, inlinedAt: !32)
!56 = !DILocation(line: 38, column: 52, scope: !31, inlinedAt: !57)
!57 = !DILocation(line: 182, column: 66, scope: !9)
!58 = !DILocation(line: 46, column: 33, scope: !31, inlinedAt: !57)
!59 = !DILocation(line: 49, column: 20, scope: !31, inlinedAt: !57)
!60 = !DILocation(line: 67, column: 20, scope: !31, inlinedAt: !57)
!61 = !DILocation(line: 50, column: 23, scope: !31, inlinedAt: !57)
!62 = !DILocation(line: 52, column: 49, scope: !31, inlinedAt: !57)
!63 = !DILocation(line: 52, column: 39, scope: !31, inlinedAt: !57)
!64 = !DILocation(line: 53, column: 22, scope: !31, inlinedAt: !57)
!65 = !DILocation(line: 53, column: 51, scope: !31, inlinedAt: !57)
!66 = !DILocation(line: 53, column: 33, scope: !31, inlinedAt: !57)
!67 = !DILocation(line: 163, column: 27, scope: !37, inlinedAt: !57)
!68 = !DILocation(line: 184, column: 40, scope: !39, inlinedAt: !57)
!69 = !DILocation(line: 54, column: 35, scope: !31, inlinedAt: !57)
!70 = !DILocation(line: 55, column: 18, scope: !31, inlinedAt: !57)
!71 = !DILocation(line: 59, column: 25, scope: !31, inlinedAt: !57)
!72 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !57)
!73 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !57)
!74 = !DILocation(line: 62, column: 35, scope: !31, inlinedAt: !57)
!75 = !DILocation(line: 62, column: 29, scope: !31, inlinedAt: !57)
!76 = !DILocation(line: 63, column: 20, scope: !31, inlinedAt: !57)
!77 = !DILocation(line: 63, column: 28, scope: !31, inlinedAt: !57)
!78 = !DILocation(line: 65, column: 20, scope: !31, inlinedAt: !57)
!79 = !DILocation(line: 71, column: 21, scope: !31, inlinedAt: !57)
!80 = !DILocation(line: 72, column: 27, scope: !31, inlinedAt: !57)
!81 = !DILocation(line: 76, column: 46, scope: !31, inlinedAt: !57)
!82 = !DILocation(line: 152, column: 8, scope: !9)
!83 = !DILocation(line: 147, column: 19, scope: !9)
!84 = !DILocation(line: 185, column: 24, scope: !9)
!85 = !DILocation(line: 185, column: 11, scope: !9)
!86 = !DILocation(line: 186, column: 16, scope: !9)
!87 = !DILocation(line: 187, column: 26, scope: !9)
!88 = !DILocation(line: 187, column: 17, scope: !9)
!89 = !DILocation(line: 187, column: 34, scope: !9)
!90 = !DILocation(line: 188, column: 21, scope: !9)
!91 = !DILocation(line: 189, column: 33, scope: !9)
!92 = !DILocation(line: 189, column: 26, scope: !9)
!93 = !DILocation(line: 189, column: 4, scope: !9)
